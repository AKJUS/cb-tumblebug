basePath: /tumblebug
definitions:
  auth.AuthsInfo:
    properties:
      authenticated:
        type: boolean
      expired-time:
        type: string
      name:
        type: string
      role:
        type: string
      token:
        type: string
    type: object
  common.CSPDetail:
    properties:
      description:
        type: string
      driver:
        type: string
      links:
        items:
          type: string
        type: array
      regions:
        additionalProperties:
          $ref: '#/definitions/common.RegionDetail'
        type: object
    type: object
  common.CloudInfo:
    properties:
      csps:
        additionalProperties:
          $ref: '#/definitions/common.CSPDetail'
        type: object
    type: object
  common.ConfigInfo:
    properties:
      id:
        example: TB_SPIDER_REST_URL
        type: string
      name:
        example: TB_SPIDER_REST_URL
        type: string
      value:
        example: http://localhost:1024/spider
        type: string
    type: object
  common.ConfigReq:
    properties:
      name:
        example: TB_SPIDER_REST_URL
        type: string
      value:
        example: http://localhost:1024/spider
        type: string
    type: object
  common.ConnConfig:
    properties:
      configName:
        type: string
      credentialHolder:
        type: string
      credentialName:
        type: string
      driverName:
        type: string
      providerName:
        type: string
      regionDetail:
        $ref: '#/definitions/common.RegionDetail'
      regionRepresentative:
        type: boolean
      regionZoneInfo:
        $ref: '#/definitions/common.RegionZoneInfo'
      regionZoneInfoName:
        type: string
      verified:
        type: boolean
    type: object
  common.ConnConfigList:
    properties:
      connectionconfig:
        items:
          $ref: '#/definitions/common.ConnConfig'
        type: array
    type: object
  common.CredentialInfo:
    properties:
      credentialHolder:
        type: string
      credentialName:
        type: string
      keyValueInfoList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      providerName:
        type: string
    type: object
  common.CredentialReq:
    properties:
      credentialHolder:
        type: string
      keyValueInfoList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      providerName:
        type: string
    type: object
  common.IID:
    properties:
      nameId:
        description: NameID by user
        type: string
      systemId:
        description: SystemID by CloudOS
        type: string
    type: object
  common.IdList:
    properties:
      output:
        items:
          type: string
        type: array
    type: object
  common.JSONResult:
    type: object
  common.K8sClusterDetail:
    properties:
      node_images:
        items:
          $ref: '#/definitions/common.K8sClusterNodeImageDetail'
        type: array
      nodegroups_on_creation:
        type: boolean
      root_disks:
        items:
          $ref: '#/definitions/common.K8sClusterRootDiskDetail'
        type: array
      versions:
        items:
          $ref: '#/definitions/common.K8sClusterVersionDetail'
        type: array
    type: object
  common.K8sClusterInfo:
    properties:
      k8s_cluster:
        additionalProperties:
          $ref: '#/definitions/common.K8sClusterDetail'
        type: object
    type: object
  common.K8sClusterNodeGroupsOnCreation:
    properties:
      result:
        example: "true"
        type: string
    type: object
  common.K8sClusterNodeImageDetail:
    properties:
      availables:
        items:
          $ref: '#/definitions/common.K8sClusterNodeImageDetailAvailable'
        type: array
      region:
        items:
          type: string
        type: array
    type: object
  common.K8sClusterNodeImageDetailAvailable:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  common.K8sClusterRootDiskDetail:
    properties:
      region:
        items:
          type: string
        type: array
      size:
        $ref: '#/definitions/common.K8sClusterRootDiskDetailSize'
      type:
        items:
          $ref: '#/definitions/common.K8sClusterRootDiskDetailType'
        type: array
    type: object
  common.K8sClusterRootDiskDetailSize:
    properties:
      max:
        type: integer
      min:
        type: integer
    type: object
  common.K8sClusterRootDiskDetailType:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  common.K8sClusterVersionDetail:
    properties:
      availables:
        items:
          $ref: '#/definitions/common.K8sClusterVersionDetailAvailable'
        type: array
      region:
        items:
          type: string
        type: array
    type: object
  common.K8sClusterVersionDetailAvailable:
    properties:
      id:
        example: 1.30.1-aliyun.1
        type: string
      name:
        example: "1.30"
        type: string
    type: object
  common.KeyValue:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  common.Location:
    properties:
      display:
        type: string
      latitude:
        type: number
      longitude:
        type: number
    type: object
  common.NsInfo:
    properties:
      description:
        example: Description for this namespace
        type: string
      id:
        example: default
        type: string
      name:
        example: default
        type: string
    type: object
  common.NsReq:
    properties:
      description:
        example: Description for this namespace
        type: string
      name:
        example: default
        type: string
    type: object
  common.RegionDetail:
    properties:
      description:
        type: string
      location:
        $ref: '#/definitions/common.Location'
      regionId:
        type: string
      regionName:
        type: string
      zones:
        items:
          type: string
        type: array
    type: object
  common.RegionList:
    properties:
      region:
        items:
          $ref: '#/definitions/common.SpiderRegionZoneInfo'
        type: array
    type: object
  common.RegionZoneInfo:
    properties:
      assignedRegion:
        type: string
      assignedZone:
        type: string
    type: object
  common.RequestDetails:
    properties:
      endTime:
        description: The time when the request was fully processed.
        type: string
      errorResponse:
        description: A message describing any error that occurred during request processing.
        type: string
      requestInfo:
        allOf:
        - $ref: '#/definitions/common.RequestInfo'
        description: Extracted information about the request.
      responseData:
        description: The data sent back in response to the request.
      startTime:
        description: The time when the request was received by the server.
        type: string
      status:
        description: The current status of the request (e.g., "Handling", "Error",
          "Success").
        type: string
    type: object
  common.RequestInfo:
    properties:
      body:
        description: 'Optional: request body'
      header:
        additionalProperties:
          type: string
        description: Key-value pairs of the request headers.
        type: object
      method:
        description: HTTP method (GET, POST, etc.), indicating the request's action
          type.
        type: string
      url:
        description: The URL the request is made to.
        type: string
    type: object
  common.RestGetAllConfigResponse:
    properties:
      config:
        description: Name string     `json:"name"`
        items:
          $ref: '#/definitions/common.ConfigInfo'
        type: array
    type: object
  common.RestGetAllNsResponse:
    properties:
      ns:
        description: Name string     `json:"name"`
        items:
          $ref: '#/definitions/common.NsInfo'
        type: array
    type: object
  common.RestInspectResourcesRequest:
    properties:
      connectionName:
        example: aws-ap-southeast-1
        type: string
      resourceType:
        enum:
        - vNet
        - securityGroup
        - sshKey
        - vm
        example: vNet
        type: string
    type: object
  common.RestRegisterCspNativeResourcesRequest:
    properties:
      connectionName:
        example: aws-ap-southeast-1
        type: string
      mciName:
        example: csp
        type: string
      nsId:
        example: default
        type: string
    type: object
  common.RestRegisterCspNativeResourcesRequestAll:
    properties:
      mciName:
        example: csp
        type: string
      nsId:
        example: default
        type: string
    type: object
  common.SimpleMsg:
    properties:
      message:
        example: Any message
        type: string
    type: object
  common.SpiderRegionZoneInfo:
    properties:
      availableZoneList:
        items:
          type: string
        type: array
      keyValueInfoList:
        description: ex) { {region, us-east1}, {zone, us-east1-c} }
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      providerName:
        description: ex) "GCP"
        type: string
      regionName:
        description: ex) "region01"
        type: string
    type: object
  common.TbConnectionName:
    properties:
      connectionName:
        type: string
    type: object
  mci.AgentInstallContent:
    properties:
      mciId:
        type: string
      result:
        type: string
      vmId:
        type: string
      vmIp:
        type: string
    type: object
  mci.AgentInstallContentWrapper:
    properties:
      resultArray:
        items:
          $ref: '#/definitions/mci.AgentInstallContent'
        type: array
    type: object
  mci.AutoAction:
    properties:
      actionType:
        enum:
        - ScaleOut
        - ScaleIn
        example: ScaleOut
        type: string
      placementAlgo:
        example: random
        type: string
      postCommand:
        allOf:
        - $ref: '#/definitions/mci.MciCmdReq'
        description: PostCommand is field for providing command to VMs after its creation.
          example:"wget https://raw.githubusercontent.com/cloud-barista/cb-tumblebug/main/scripts/setweb.sh
          -O ~/setweb.sh; chmod +x ~/setweb.sh; sudo ~/setweb.sh"
      vmDynamicReq:
        $ref: '#/definitions/mci.TbVmDynamicReq'
    type: object
  mci.AutoCondition:
    properties:
      evaluationPeriod:
        example: "10"
        type: string
      evaluationValue:
        items:
          type: string
        type: array
      metric:
        example: cpu
        type: string
      operand:
        example: "80"
        type: string
      operator:
        enum:
        - <
        - <=
        - '>'
        - '>='
        example: '>='
        type: string
    type: object
  mci.BenchmarkInfo:
    properties:
      desc:
        type: string
      elapsed:
        type: string
      regionName:
        type: string
      result:
        type: string
      resultarray:
        description: struct-element cycle ?
        items:
          $ref: '#/definitions/mci.BenchmarkInfo'
        type: array
      specid:
        type: string
      unit:
        type: string
    type: object
  mci.BenchmarkInfoArray:
    properties:
      resultarray:
        items:
          $ref: '#/definitions/mci.BenchmarkInfo'
        type: array
    type: object
  mci.CheckMciDynamicReqInfo:
    properties:
      reqCheck:
        items:
          $ref: '#/definitions/mci.CheckVmDynamicReqInfo'
        type: array
    required:
    - reqCheck
    type: object
  mci.CheckVmDynamicReqInfo:
    properties:
      connectionConfigCandidates:
        description: ConnectionConfigCandidates will provide ConnectionConfig options
        items:
          type: string
        type: array
      image:
        items:
          $ref: '#/definitions/mcir.TbImageInfo'
        type: array
      region:
        $ref: '#/definitions/common.RegionDetail'
      spec:
        $ref: '#/definitions/mcir.TbSpecInfo'
      systemMessage:
        description: Latest system message such as error message
        example: Failed because ...
        type: string
    type: object
  mci.DeploymentPlan:
    properties:
      filter:
        $ref: '#/definitions/mci.FilterInfo'
      limit:
        enum:
        - "1"
        - "2"
        - "30"
        example: "5"
        type: string
      priority:
        $ref: '#/definitions/mci.PriorityInfo'
    type: object
  mci.FilterCondition:
    properties:
      condition:
        items:
          $ref: '#/definitions/mci.Operation'
        type: array
      metric:
        enum:
        - vCPU
        - memoryGiB
        - costPerHour
        example: vCPU
        type: string
    type: object
  mci.FilterInfo:
    properties:
      policy:
        items:
          $ref: '#/definitions/mci.FilterCondition'
        type: array
    type: object
  mci.InspectResource:
    properties:
      connectionName:
        type: string
      resourceOverview:
        $ref: '#/definitions/mci.resourceCountOverview'
      resourceType:
        type: string
      resources:
        $ref: '#/definitions/mci.resourcesByManageType'
      systemMessage:
        type: string
    type: object
  mci.InspectResourceAllResult:
    properties:
      availableConnection:
        type: integer
      cspOnlyOverview:
        $ref: '#/definitions/mci.inspectOverview'
      elapsedTime:
        type: integer
      inspectResult:
        items:
          $ref: '#/definitions/mci.InspectResourceResult'
        type: array
      registeredConnection:
        type: integer
      tumblebugOverview:
        $ref: '#/definitions/mci.inspectOverview'
    type: object
  mci.InspectResourceResult:
    properties:
      connectionName:
        type: string
      cspOnlyOverview:
        $ref: '#/definitions/mci.inspectOverview'
      elapsedTime:
        type: integer
      systemMessage:
        type: string
      tumblebugOverview:
        $ref: '#/definitions/mci.inspectOverview'
    type: object
  mci.JSONResult:
    type: object
  mci.McNlbInfo:
    properties:
      deploymentLog:
        $ref: '#/definitions/mci.MciSshCmdResult'
      mcNlbHostInfo:
        $ref: '#/definitions/mci.TbMciInfo'
      mciAccessInfo:
        $ref: '#/definitions/mci.MciAccessInfo'
    type: object
  mci.MciAccessInfo:
    properties:
      mciId:
        type: string
      mciNlbListener:
        $ref: '#/definitions/mci.MciAccessInfo'
      mciSubGroupAccessInfo:
        items:
          $ref: '#/definitions/mci.MciSubGroupAccessInfo'
        type: array
    type: object
  mci.MciCmdReq:
    properties:
      command:
        example:
        - 'client_ip=$(echo $SSH_CLIENT | awk ''{print $1}''); echo SSH client IP
          is: $client_ip'
        items:
          type: string
        type: array
      userName:
        example: cb-user
        type: string
    required:
    - command
    type: object
  mci.MciConnectionConfigCandidatesReq:
    properties:
      commonSpec:
        description: CommonSpec is field for id of a spec in common namespace
        example:
        - aws+ap-northeast-2+t2.small
        - gcp+us-west1+g1-small
        items:
          type: string
        type: array
    required:
    - commonSpec
    type: object
  mci.MciPolicyInfo:
    properties:
      Id:
        description: MCI Id (generated ID by the Name)
        type: string
      Name:
        description: MCI Name (for request)
        type: string
      actionLog:
        type: string
      description:
        example: Description
        type: string
      policy:
        items:
          $ref: '#/definitions/mci.Policy'
        type: array
    type: object
  mci.MciPolicyReq:
    properties:
      description:
        example: Description
        type: string
      policy:
        items:
          $ref: '#/definitions/mci.Policy'
        type: array
    type: object
  mci.MciSshCmdResult:
    properties:
      results:
        items:
          $ref: '#/definitions/mci.SshCmdResult'
        type: array
    type: object
  mci.MciStatusInfo:
    properties:
      id:
        type: string
      installMonAgent:
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:yes)
        example: '[yes, no]'
        type: string
      label:
        description: Label is for describing the mci in a keyword (any string can
          be used)
        example: User custom label
        type: string
      masterIp:
        example: 32.201.134.113
        type: string
      masterSSHPort:
        type: string
      masterVmId:
        example: vm-asiaeast1-cb-01
        type: string
      name:
        type: string
      status:
        type: string
      statusCount:
        $ref: '#/definitions/mci.StatusCountInfo'
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: Managed by CB-Tumblebug
        type: string
      targetAction:
        type: string
      targetStatus:
        type: string
      vm:
        items:
          $ref: '#/definitions/mci.TbVmStatusInfo'
        type: array
    type: object
  mci.MciSubGroupAccessInfo:
    properties:
      bastionVmId:
        type: string
      mciVmAccessInfo:
        items:
          $ref: '#/definitions/mci.MciVmAccessInfo'
        type: array
      nlbListener:
        $ref: '#/definitions/mci.TbNLBListenerInfo'
      subGroupId:
        type: string
    type: object
  mci.MciVmAccessInfo:
    properties:
      privateIP:
        type: string
      privateKey:
        type: string
      publicIP:
        type: string
      sshPort:
        type: string
      vmId:
        type: string
      vmUserAccount:
        type: string
      vmUserPassword:
        type: string
    type: object
  mci.MonResultSimple:
    properties:
      err:
        type: string
      metric:
        type: string
      value:
        type: string
      vmId:
        type: string
    type: object
  mci.MonResultSimpleResponse:
    properties:
      mciId:
        type: string
      mciMonitoring:
        items:
          $ref: '#/definitions/mci.MonResultSimple'
        type: array
      nsId:
        type: string
    type: object
  mci.NLBListenerReq:
    properties:
      port:
        description: 1-65535
        example: "80"
        type: string
      protocol:
        description: TCP|UDP
        example: TCP
        type: string
    type: object
  mci.Operation:
    properties:
      operand:
        description: 10, 70, 80, 98, ...
        enum:
        - "4"
        - "8"
        - ..
        example: "4"
        type: string
      operator:
        description: '>=, <=, =='
        enum:
        - '>='
        - <=
        - ==
        example: <=
        type: string
    type: object
  mci.ParameterKeyVal:
    properties:
      key:
        description: coordinate
        enum:
        - coordinateClose
        - coordinateWithin
        - coordinateFair
        example: coordinateClose
        type: string
      val:
        description: '["Latitude,Longitude","12,543",..,"31,433"]'
        example:
        - 44.146838/-116.411403
        items:
          type: string
        type: array
    type: object
  mci.Policy:
    properties:
      autoAction:
        $ref: '#/definitions/mci.AutoAction'
      autoCondition:
        $ref: '#/definitions/mci.AutoCondition'
      status:
        type: string
    type: object
  mci.PriorityCondition:
    properties:
      metric:
        enum:
        - location
        - cost
        - random
        - performance
        - latency
        example: location
        type: string
      parameter:
        items:
          $ref: '#/definitions/mci.ParameterKeyVal'
        type: array
      weight:
        enum:
        - "0.1"
        - "0.2"
        - '...'
        example: "0.3"
        type: string
    type: object
  mci.PriorityInfo:
    properties:
      policy:
        items:
          $ref: '#/definitions/mci.PriorityCondition'
        type: array
    type: object
  mci.RegionInfo:
    properties:
      region:
        type: string
      zone:
        type: string
    type: object
  mci.RegisterResourceAllResult:
    properties:
      availableConnection:
        type: integer
      elapsedTime:
        type: integer
      registerationOverview:
        $ref: '#/definitions/mci.registerationOverview'
      registerationResult:
        items:
          $ref: '#/definitions/mci.RegisterResourceResult'
        type: array
      registeredConnection:
        type: integer
    type: object
  mci.RegisterResourceResult:
    properties:
      connectionName:
        type: string
      elapsedTime:
        type: integer
      registerationOutputs:
        $ref: '#/definitions/common.IdList'
      registerationOverview:
        $ref: '#/definitions/mci.registerationOverview'
      systemMessage:
        type: string
    type: object
  mci.RestGetAllBenchmarkRequest:
    properties:
      host:
        type: string
    type: object
  mci.RestGetAllK8sClusterResponse:
    properties:
      cluster:
        items:
          $ref: '#/definitions/mci.TbK8sClusterInfo'
        type: array
    type: object
  mci.RestGetAllMciPolicyResponse:
    properties:
      mciPolicy:
        items:
          $ref: '#/definitions/mci.MciPolicyInfo'
        type: array
    type: object
  mci.RestGetAllMciResponse:
    properties:
      mci:
        items:
          $ref: '#/definitions/mci.TbMciInfo'
        type: array
    type: object
  mci.RestGetAllMciStatusResponse:
    properties:
      mci:
        items:
          $ref: '#/definitions/mci.MciStatusInfo'
        type: array
    type: object
  mci.RestGetAllNLBResponse:
    properties:
      nlb:
        items:
          $ref: '#/definitions/mci.TbNLBInfo'
        type: array
    type: object
  mci.RestGetBenchmarkRequest:
    properties:
      host:
        type: string
    type: object
  mci.SpiderImageType:
    enum:
    - PublicImage
    - MyImage
    type: string
    x-enum-varnames:
    - PublicImage
    - MyImage
  mci.SpiderVMInfo:
    properties:
      cspid:
        description: VM ID given by CSP (required for registering VM)
        type: string
      dataDiskIIDs:
        items:
          $ref: '#/definitions/common.IID'
        type: array
      dataDiskNames:
        items:
          type: string
        type: array
      iid:
        allOf:
        - $ref: '#/definitions/common.IID'
        description: Fields for response
      imageIId:
        $ref: '#/definitions/common.IID'
      imageName:
        type: string
      imageType:
        $ref: '#/definitions/mci.SpiderImageType'
      keyPairIId:
        $ref: '#/definitions/common.IID'
      keyPairName:
        type: string
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        description: Fields for request
        type: string
      networkInterface:
        description: ex) eth0
        type: string
      privateDNS:
        type: string
      privateIP:
        type: string
      publicDNS:
        type: string
      publicIP:
        type: string
      region:
        allOf:
        - $ref: '#/definitions/mci.RegionInfo'
        description: ex) {us-east1, us-east1-c} or {ap-northeast-2}
      rootDeviceName:
        description: '"/dev/sda1", ...'
        type: string
      rootDiskSize:
        description: '"default", "50", "1000" (GB)'
        type: string
      rootDiskType:
        description: '"SSD(gp2)", "Premium SSD", ...'
        type: string
      securityGroupIIds:
        description: AWS, ex) sg-0b7452563e1121bb6
        items:
          $ref: '#/definitions/common.IID'
        type: array
      securityGroupNames:
        items:
          type: string
        type: array
      sshaccessPoint:
        type: string
      startTime:
        type: string
      subnetIID:
        allOf:
        - $ref: '#/definitions/common.IID'
        description: AWS, ex) subnet-8c4a53e4
      subnetName:
        type: string
      vmspecName:
        description: Fields for both request and response
        type: string
      vmuserId:
        description: ex) user1
        type: string
      vmuserPasswd:
        type: string
      vpcIID:
        $ref: '#/definitions/common.IID'
      vpcname:
        type: string
    type: object
  mci.SshCmdResult:
    properties:
      command:
        additionalProperties:
          type: string
        type: object
      err: {}
      mciId:
        type: string
      stderr:
        additionalProperties:
          type: string
        type: object
      stdout:
        additionalProperties:
          type: string
        type: object
      vmId:
        type: string
      vmIp:
        type: string
    type: object
  mci.StatusCountInfo:
    properties:
      countCreating:
        description: CountCreating is for counting Creating
        type: integer
      countFailed:
        description: CountFailed is for counting Failed
        type: integer
      countRebooting:
        description: CountRebooting is for counting Rebooting
        type: integer
      countResuming:
        description: CountResuming is for counting Resuming
        type: integer
      countRunning:
        description: CountRunning is for counting Running
        type: integer
      countSuspended:
        description: CountSuspended is for counting Suspended
        type: integer
      countSuspending:
        description: CountSuspending is for counting Suspending
        type: integer
      countTerminated:
        description: CountTerminated is for counting Terminated
        type: integer
      countTerminating:
        description: CountTerminating is for counting Terminating
        type: integer
      countTotal:
        description: CountTotal is for Total VMs
        type: integer
      countUndefined:
        description: CountUndefined is for counting Undefined
        type: integer
    type: object
  mci.TbChangeK8sNodeGroupAutoscaleSizeReq:
    properties:
      desiredNodeSize:
        example: "1"
        type: string
      maxNodeSize:
        example: "3"
        type: string
      minNodeSize:
        example: "1"
        type: string
    type: object
  mci.TbChangeK8sNodeGroupAutoscaleSizeRes:
    properties:
      desiredNodeSize:
        example: 1
        type: integer
      id:
        example: ng-01
        type: string
      imageId:
        description: VM config.
        example: image-01
        type: string
      k8sNodes:
        description: id for nodes
        example:
        - node-01
        items:
          type: string
        type: array
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      maxNodeSize:
        example: 3
        type: integer
      minNodeSize:
        example: 1
        type: integer
      onAutoScaling:
        description: Scaling config.
        example: true
        type: boolean
      rootDiskSize:
        example: "40"
        type: string
      rootDiskType:
        example: cloud_essd
        type: string
      specId:
        example: spec-01
        type: string
      sshKeyId:
        example: sshkey-01
        type: string
      status:
        allOf:
        - $ref: '#/definitions/mci.TbK8sNodeGroupStatus'
        description: '---'
        example: Creating
    type: object
  mci.TbIdNameInDetailInfo:
    properties:
      idInCsp:
        type: string
      idInSp:
        type: string
      idInTb:
        type: string
      nameInCsp:
        type: string
    type: object
  mci.TbK8sAccessInfo:
    properties:
      endpoint:
        example: http://1.2.3.4:6443
        type: string
      kubeconfig:
        example: |-
          apiVersion: v1
          clusters:
          - cluster:
           certificate-authority-data: LS0...
        type: string
    type: object
  mci.TbK8sAddonsInfo:
    properties:
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
    type: object
  mci.TbK8sClusterInfo:
    properties:
      accessInfo:
        $ref: '#/definitions/mci.TbK8sAccessInfo'
      addons:
        $ref: '#/definitions/mci.TbK8sAddonsInfo'
      connectionName:
        example: alibaba-ap-northeast-2
        type: string
      createdTime:
        example: "1970-01-01T00:00:00.00Z"
        type: string
      cspK8sClusterId:
        example: c123456789012345678901234567890
        type: string
      cspK8sClusterName:
        example: default-k8scluster-01
        type: string
      description:
        example: My K8sCluster
        type: string
      id:
        example: k8scluster-01
        type: string
      k8sNodeGroupList:
        items:
          $ref: '#/definitions/mci.TbK8sNodeGroupInfo'
        type: array
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        example: k8scluster-01
        type: string
      network:
        $ref: '#/definitions/mci.TbK8sClusterNetworkInfo'
      status:
        allOf:
        - $ref: '#/definitions/mci.TbK8sClusterStatus'
        description: Creating, Active, Inactive, Updating, Deleting
        example: Creating
      systemLabel:
        description: SystemLabel is for describing the MCIR in a keyword (any string
          can be used) for special System purpose
        example: Managed by CB-Tumblebug
        type: string
      systemMessage:
        description: Latest system message such as error message
        example: Failed because ...
        type: string
      version:
        description: Kubernetes Version, ex) 1.23.3
        example: 1.30.1-aliyun.1
        type: string
    type: object
  mci.TbK8sClusterNetworkInfo:
    properties:
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      securityGroupIds:
        example:
        - sg-01
        items:
          type: string
        type: array
      subnetIds:
        example:
        - subnet-01
        items:
          type: string
        type: array
      vNetId:
        example: vpc-01
        type: string
    type: object
  mci.TbK8sClusterReq:
    properties:
      connectionName:
        description: Namespace      string `json:"namespace" validate:"required" example:"default"`
        example: alibaba-ap-northeast-2
        type: string
      cspK8sClusterId:
        description: |-
          Fields for "Register existing K8sCluster" feature
          @description CspK8sClusterId is required to register a k8s cluster from CSP (option=register)
        example: required when option is register
        type: string
      description:
        example: My K8sCluster
        type: string
      id:
        description: (1) K8sCluster Info
        example: k8scluster-01
        type: string
      k8sNodeGroupList:
        description: (3) NodeGroupInfo List
        items:
          $ref: '#/definitions/mci.TbK8sNodeGroupReq'
        type: array
      securityGroupIds:
        example:
        - sg-01
        items:
          type: string
        type: array
      subnetIds:
        example:
        - subnet-01
        items:
          type: string
        type: array
      vNetId:
        description: (2) Network Info
        example: vpc-01
        type: string
      version:
        example: 1.30.1-aliyun.1
        type: string
    required:
    - connectionName
    - id
    - securityGroupIds
    - subnetIds
    - vNetId
    type: object
  mci.TbK8sClusterStatus:
    enum:
    - Creating
    - Active
    - Inactive
    - Updating
    - Deleting
    type: string
    x-enum-varnames:
    - TbK8sClusterCreating
    - TbK8sClusterActive
    - TbK8sClusterInactive
    - TbK8sClusterUpdating
    - TbK8sClusterDeleting
  mci.TbK8sNodeGroupInfo:
    properties:
      desiredNodeSize:
        example: 1
        type: integer
      id:
        example: ng-01
        type: string
      imageId:
        description: VM config.
        example: image-01
        type: string
      k8sNodes:
        description: id for nodes
        example:
        - node-01
        items:
          type: string
        type: array
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      maxNodeSize:
        example: 3
        type: integer
      minNodeSize:
        example: 1
        type: integer
      onAutoScaling:
        description: Scaling config.
        example: true
        type: boolean
      rootDiskSize:
        example: "40"
        type: string
      rootDiskType:
        example: cloud_essd
        type: string
      specId:
        example: spec-01
        type: string
      sshKeyId:
        example: sshkey-01
        type: string
      status:
        allOf:
        - $ref: '#/definitions/mci.TbK8sNodeGroupStatus'
        description: '---'
        example: Creating
    type: object
  mci.TbK8sNodeGroupReq:
    properties:
      desiredNodeSize:
        example: "1"
        type: string
      imageId:
        example: image-01
        type: string
      maxNodeSize:
        example: "3"
        type: string
      minNodeSize:
        example: "1"
        type: string
      name:
        example: ng-01
        type: string
      onAutoScaling:
        description: autoscale config.
        example: "true"
        type: string
      rootDiskSize:
        description: '"default", Integer (GB): ["50", ..., "1000"]'
        example: "40"
        type: string
      rootDiskType:
        description: '"", "default", "TYPE1", AWS: ["standard", "gp2", "gp3"], Azure:
          ["PremiumSSD", "StandardSSD", "StandardHDD"], GCP: ["pd-standard", "pd-balanced",
          "pd-ssd", "pd-extreme"], ALIBABA: ["cloud_efficiency", "cloud", "cloud_ssd"],
          TENCENT: ["CLOUD_PREMIUM", "CLOUD_SSD"]'
        example: cloud_essd
        type: string
      specId:
        example: Standard_B2s (temporarily, CSP's Spec Names are valid. It will be
          upgraded)
        type: string
      sshKeyId:
        example: sshkey-01
        type: string
    type: object
  mci.TbK8sNodeGroupStatus:
    enum:
    - Creating
    - Active
    - Inactive
    - Updating
    - Deleting
    type: string
    x-enum-varnames:
    - TbK8sNodeGroupCreating
    - TbK8sNodeGroupActive
    - TbK8sNodeGroupInactive
    - TbK8sNodeGroupUpdating
    - TbK8sNodeGroupDeleting
  mci.TbMciDynamicReq:
    properties:
      description:
        example: Made in CB-TB
        type: string
      installMonAgent:
        default: "no"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:yes)
        enum:
        - "yes"
        - "no"
        example: "no"
        type: string
      label:
        description: Label is for describing the mci in a keyword (any string can
          be used)
        example: DynamicVM
        type: string
      name:
        example: mci01
        type: string
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: ""
        type: string
      vm:
        items:
          $ref: '#/definitions/mci.TbVmDynamicReq'
        type: array
    required:
    - name
    - vm
    type: object
  mci.TbMciInfo:
    properties:
      configureCloudAdaptiveNetwork:
        default: "no"
        description: ConfigureCloudAdaptiveNetwork is an option to configure Cloud
          Adaptive Network (CLADNet) ([yes/no] default:yes)
        enum:
        - "yes"
        - "no"
        example: "yes"
        type: string
      description:
        type: string
      id:
        type: string
      installMonAgent:
        default: "yes"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:yes)
        enum:
        - "yes"
        - "no"
        example: "yes"
        type: string
      label:
        description: Label is for describing the mci in a keyword (any string can
          be used)
        example: User custom label
        type: string
      name:
        type: string
      newVmList:
        description: List of IDs for new VMs. Return IDs if the VMs are newly added.
          This field should be used for return body only.
        items:
          type: string
        type: array
      placementAlgo:
        type: string
      status:
        type: string
      statusCount:
        $ref: '#/definitions/mci.StatusCountInfo'
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: Managed by CB-Tumblebug
        type: string
      systemMessage:
        description: Latest system message such as error message
        example: Failed because ...
        type: string
      targetAction:
        type: string
      targetStatus:
        type: string
      vm:
        items:
          $ref: '#/definitions/mci.TbVmInfo'
        type: array
    type: object
  mci.TbMciReq:
    properties:
      description:
        example: Made in CB-TB
        type: string
      installMonAgent:
        default: "yes"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:yes)
        enum:
        - "yes"
        - "no"
        example: "no"
        type: string
      label:
        description: Label is for describing the mci in a keyword (any string can
          be used)
        example: custom tag
        type: string
      name:
        example: mci01
        type: string
      placementAlgo:
        type: string
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: ""
        type: string
      vm:
        items:
          $ref: '#/definitions/mci.TbVmReq'
        type: array
    required:
    - name
    - vm
    type: object
  mci.TbNLBAddRemoveVMReq:
    properties:
      targetGroup:
        $ref: '#/definitions/mci.TbNLBTargetGroupInfo'
    type: object
  mci.TbNLBHealthCheckerInfo:
    properties:
      interval:
        description: secs, Interval time between health checks.
        example: 10
        type: integer
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      port:
        description: Listener Port or 1-65535
        example: "22"
        type: string
      protocol:
        description: TCP|HTTP|HTTPS
        example: TCP
        type: string
      threshold:
        description: num, The number of continuous health checks to change the VM
          status.
        example: 3
        type: integer
      timeout:
        description: secs, Waiting time to decide an unhealthy VM when no response.
        example: 10
        type: integer
    type: object
  mci.TbNLBHealthCheckerReq:
    properties:
      interval:
        description: secs, Interval time between health checks.
        example: default
        type: string
      threshold:
        description: num, The number of continuous health checks to change the VM
          status.
        example: default
        type: string
      timeout:
        description: secs, Waiting time to decide an unhealthy VM when no response.
        example: default
        type: string
    type: object
  mci.TbNLBInfo:
    properties:
      associatedObjectList:
        items:
          type: string
        type: array
      connectionName:
        type: string
      createdTime:
        type: string
      cspNLBId:
        type: string
      cspNLBName:
        type: string
      description:
        type: string
      healthChecker:
        $ref: '#/definitions/mci.TbNLBHealthCheckerInfo'
      id:
        type: string
      isAutoGenerated:
        type: boolean
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      listener:
        $ref: '#/definitions/mci.TbNLBListenerInfo'
      location:
        $ref: '#/definitions/common.Location'
      name:
        type: string
      scope:
        description: REGION(V) | GLOBAL
        type: string
      status:
        type: string
      systemLabel:
        description: SystemLabel is for describing the MCIR in a keyword (any string
          can be used) for special System purpose
        example: Managed by CB-Tumblebug
        type: string
      targetGroup:
        $ref: '#/definitions/mci.TbNLBTargetGroupInfo'
      type:
        description: PUBLIC(V) | INTERNAL
        type: string
    type: object
  mci.TbNLBListenerInfo:
    properties:
      dnsName:
        description: Optional, Auto Generated and attached
        example: default-group-cd3.elb.ap-northeast-2.amazonaws.com
        type: string
      ip:
        description: Auto Generated and attached
        example: x.x.x.x
        type: string
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      port:
        description: 1-65535
        example: "80"
        type: string
      protocol:
        description: TCP|UDP
        example: TCP
        type: string
    type: object
  mci.TbNLBReq:
    properties:
      cspNLBId:
        description: Existing NLB (used only for option=register)
        type: string
      description:
        type: string
      healthChecker:
        allOf:
        - $ref: '#/definitions/mci.TbNLBHealthCheckerReq'
        description: HealthChecker
      listener:
        allOf:
        - $ref: '#/definitions/mci.NLBListenerReq'
        description: Frontend
      scope:
        description: REGION(V) | GLOBAL
        enum:
        - REGION
        - GLOBAL
        example: REGION
        type: string
      targetGroup:
        allOf:
        - $ref: '#/definitions/mci.TbNLBTargetGroupReq'
        description: Backend
      type:
        description: PUBLIC(V) | INTERNAL
        enum:
        - PUBLIC
        - INTERNAL
        example: PUBLIC
        type: string
    required:
    - healthChecker
    - listener
    - scope
    - targetGroup
    - type
    type: object
  mci.TbNLBTargetGroupInfo:
    properties:
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      port:
        description: Listener Port or 1-65535
        example: "80"
        type: string
      protocol:
        description: TCP|HTTP|HTTPS
        example: TCP
        type: string
      subGroupId:
        example: g1
        type: string
      vms:
        items:
          type: string
        type: array
    type: object
  mci.TbNLBTargetGroupReq:
    properties:
      port:
        description: Listener Port or 1-65535
        example: "80"
        type: string
      protocol:
        description: TCP|HTTP|HTTPS
        example: TCP
        type: string
      subGroupId:
        example: g1
        type: string
    type: object
  mci.TbScaleOutSubGroupReq:
    properties:
      numVMsToAdd:
        description: Define addtional VMs to scaleOut
        example: "2"
        type: string
    required:
    - numVMsToAdd
    type: object
  mci.TbSetK8sNodeGroupAutoscalingReq:
    properties:
      onAutoScaling:
        example: "true"
        type: string
    type: object
  mci.TbSetK8sNodeGroupAutoscalingRes:
    properties:
      result:
        example: "true"
        type: string
    type: object
  mci.TbUpgradeK8sClusterReq:
    properties:
      version:
        example: 1.30.1-alyun.1
        type: string
    type: object
  mci.TbVmDynamicReq:
    properties:
      commonImage:
        description: CommonImage is field for id of a image in common namespace
        example: ubuntu18.04
        type: string
      commonSpec:
        description: CommonSpec is field for id of a spec in common namespace
        example: aws+ap-northeast-2+t2.small
        type: string
      connectionName:
        description: |-
          if ConnectionName is given, the VM tries to use associtated credential.
          if not, it will use predefined ConnectionName in Spec objects
        type: string
      description:
        example: Description
        type: string
      label:
        example: DynamicVM
        type: string
      name:
        description: VM name or subGroup name if is (not empty) && (> 0). If it is
          a group, actual VM name will be generated with -N postfix.
        example: g1-1
        type: string
      rootDiskSize:
        default: default
        description: '"default", Integer (GB): ["50", ..., "1000"]'
        example: default, 30, 42, ...
        type: string
      rootDiskType:
        default: default
        description: '"", "default", "TYPE1", AWS: ["standard", "gp2", "gp3"], Azure:
          ["PremiumSSD", "StandardSSD", "StandardHDD"], GCP: ["pd-standard", "pd-balanced",
          "pd-ssd", "pd-extreme"], ALIBABA: ["cloud_efficiency", "cloud", "cloud_essd"],
          TENCENT: ["CLOUD_PREMIUM", "CLOUD_SSD"]'
        example: default, TYPE1, ...
        type: string
      subGroupSize:
        default: "1"
        description: if subGroupSize is (not empty) && (> 0), subGroup will be generated.
          VMs will be created accordingly.
        example: "3"
        type: string
      vmUserPassword:
        type: string
    required:
    - commonImage
    - commonSpec
    type: object
  mci.TbVmInfo:
    properties:
      connectionConfig:
        $ref: '#/definitions/common.ConnConfig'
      connectionName:
        type: string
      createdTime:
        description: Created time
        example: "2022-11-10 23:00:00"
        type: string
      cspViewVmDetail:
        $ref: '#/definitions/mci.SpiderVMInfo'
      dataDiskIds:
        items:
          type: string
        type: array
      description:
        type: string
      id:
        type: string
      idByCSP:
        description: CSP managed ID or Name
        type: string
      imageId:
        type: string
      label:
        type: string
      location:
        $ref: '#/definitions/common.Location'
      monAgentStatus:
        description: Montoring agent status
        example: '[installed, notInstalled, failed]'
        type: string
      name:
        type: string
      networkAgentStatus:
        description: NetworkAgent status
        example: '[notInstalled, installing, installed, failed]'
        type: string
      privateDNS:
        type: string
      privateIP:
        type: string
      publicDNS:
        type: string
      publicIP:
        type: string
      region:
        allOf:
        - $ref: '#/definitions/mci.RegionInfo'
        description: AWS, ex) {us-east1, us-east1-c} or {ap-northeast-2}
      rootDeviceName:
        type: string
      rootDiskSize:
        type: string
      rootDiskType:
        type: string
      securityGroupIds:
        items:
          type: string
        type: array
      specId:
        type: string
      sshKeyId:
        type: string
      sshPort:
        type: string
      status:
        description: Required by CB-Tumblebug
        type: string
      subGroupId:
        description: defined if the VM is in a group
        type: string
      subnetId:
        type: string
      systemMessage:
        description: Latest system message such as error message
        example: Failed because ...
        type: string
      targetAction:
        type: string
      targetStatus:
        type: string
      vNetId:
        type: string
      vmUserAccount:
        type: string
      vmUserPassword:
        type: string
    type: object
  mci.TbVmReq:
    properties:
      connectionName:
        example: testcloud01-seoul
        type: string
      dataDiskIds:
        items:
          type: string
        type: array
      description:
        example: Description
        type: string
      idByCsp:
        description: CSP managed ID or Name (required for option=register)
        example: i-014fa6ede6ada0b2c
        type: string
      imageId:
        description: ImageType        string   `json:"imageType"`
        type: string
      label:
        type: string
      name:
        description: VM name or subGroup name if is (not empty) && (> 0). If it is
          a group, actual VM name will be generated with -N postfix.
        example: g1-1
        type: string
      rootDiskSize:
        description: '"default", Integer (GB): ["50", ..., "1000"]'
        example: default, 30, 42, ...
        type: string
      rootDiskType:
        description: '"", "default", "TYPE1", AWS: ["standard", "gp2", "gp3"], Azure:
          ["PremiumSSD", "StandardSSD", "StandardHDD"], GCP: ["pd-standard", "pd-balanced",
          "pd-ssd", "pd-extreme"], ALIBABA: ["cloud_efficiency", "cloud", "cloud_ssd"],
          TENCENT: ["CLOUD_PREMIUM", "CLOUD_SSD"]'
        example: default, TYPE1, ...
        type: string
      securityGroupIds:
        items:
          type: string
        type: array
      specId:
        type: string
      sshKeyId:
        type: string
      subGroupSize:
        description: if subGroupSize is (not empty) && (> 0), subGroup will be generated.
          VMs will be created accordingly.
        example: "3"
        type: string
      subnetId:
        type: string
      vNetId:
        type: string
      vmUserAccount:
        type: string
      vmUserPassword:
        type: string
    required:
    - connectionName
    - imageId
    - name
    - securityGroupIds
    - specId
    - sshKeyId
    - subnetId
    - vNetId
    type: object
  mci.TbVmSnapshotReq:
    properties:
      name:
        example: aws-ap-southeast-1-snapshot
        type: string
    type: object
  mci.TbVmStatusInfo:
    properties:
      createdTime:
        description: Created time
        example: "2022-11-10 23:00:00"
        type: string
      cspVmId:
        type: string
      id:
        type: string
      location:
        $ref: '#/definitions/common.Location'
      monAgentStatus:
        description: Montoring agent status
        example: '[installed, notInstalled, failed]'
        type: string
      name:
        type: string
      nativeStatus:
        type: string
      privateIp:
        type: string
      publicIp:
        type: string
      sshPort:
        type: string
      status:
        type: string
      systemMessage:
        description: Latest system message such as error message
        example: Failed because ...
        type: string
      targetAction:
        type: string
      targetStatus:
        type: string
    type: object
  mci.inspectOverview:
    properties:
      customImage:
        type: integer
      dataDisk:
        type: integer
      nlb:
        type: integer
      securityGroup:
        type: integer
      sshKey:
        type: integer
      vNet:
        type: integer
      vm:
        type: integer
    type: object
  mci.registerationOverview:
    properties:
      customImage:
        type: integer
      dataDisk:
        type: integer
      failed:
        type: integer
      nlb:
        type: integer
      securityGroup:
        type: integer
      sshKey:
        type: integer
      vNet:
        type: integer
      vm:
        type: integer
    type: object
  mci.resourceCountOverview:
    properties:
      onCspOnly:
        type: integer
      onCspTotal:
        type: integer
      onSpider:
        type: integer
      onTumblebug:
        type: integer
    type: object
  mci.resourceOnCsp:
    properties:
      count:
        type: integer
      info:
        items:
          $ref: '#/definitions/mci.resourceOnCspInfo'
        type: array
    type: object
  mci.resourceOnCspInfo:
    properties:
      idByCsp:
        type: string
      refNameOrId:
        type: string
    type: object
  mci.resourceOnSpider:
    properties:
      count:
        type: integer
      info:
        items:
          $ref: '#/definitions/mci.resourceOnSpiderInfo'
        type: array
    type: object
  mci.resourceOnSpiderInfo:
    properties:
      idByCsp:
        type: string
      idBySp:
        type: string
    type: object
  mci.resourceOnTumblebug:
    properties:
      count:
        type: integer
      info:
        items:
          $ref: '#/definitions/mci.resourceOnTumblebugInfo'
        type: array
    type: object
  mci.resourceOnTumblebugInfo:
    properties:
      idByCsp:
        type: string
      idByTb:
        type: string
      mciId:
        type: string
      nsId:
        type: string
      objectKey:
        type: string
    type: object
  mci.resourcesByManageType:
    properties:
      onCspOnly:
        $ref: '#/definitions/mci.resourceOnCsp'
      onCspTotal:
        $ref: '#/definitions/mci.resourceOnCsp'
      onSpider:
        $ref: '#/definitions/mci.resourceOnSpider'
      onTumblebug:
        $ref: '#/definitions/mci.resourceOnTumblebug'
    type: object
  mcir.BastionNode:
    properties:
      mciId:
        type: string
      vmId:
        type: string
    type: object
  mcir.CustomImageStatus:
    enum:
    - Available
    - Unavailable
    type: string
    x-enum-varnames:
    - MyImageAvailable
    - MyImageUnavailable
  mcir.DiskStatus:
    enum:
    - Creating
    - Available
    - Attached
    - Deleting
    - Error
    type: string
    x-enum-varnames:
    - DiskCreating
    - DiskAvailable
    - DiskAttached
    - DiskDeleting
    - DiskError
  mcir.FilterSpecsByRangeRequest:
    properties:
      acceleratorCount:
        $ref: '#/definitions/mcir.Range'
      acceleratorMemoryGB:
        $ref: '#/definitions/mcir.Range'
      acceleratorModel:
        type: string
      acceleratorType:
        type: string
      connectionName:
        type: string
      costPerHour:
        $ref: '#/definitions/mcir.Range'
      cspSpecName:
        type: string
      description:
        type: string
      evaluationScore01:
        $ref: '#/definitions/mcir.Range'
      evaluationScore02:
        $ref: '#/definitions/mcir.Range'
      evaluationScore03:
        $ref: '#/definitions/mcir.Range'
      evaluationScore04:
        $ref: '#/definitions/mcir.Range'
      evaluationScore05:
        $ref: '#/definitions/mcir.Range'
      evaluationScore06:
        $ref: '#/definitions/mcir.Range'
      evaluationScore07:
        $ref: '#/definitions/mcir.Range'
      evaluationScore08:
        $ref: '#/definitions/mcir.Range'
      evaluationScore09:
        $ref: '#/definitions/mcir.Range'
      evaluationScore10:
        $ref: '#/definitions/mcir.Range'
      evaluationStatus:
        type: string
      id:
        type: string
      infraType:
        type: string
      maxTotalStorageTiB:
        $ref: '#/definitions/mcir.Range'
      memoryGiB:
        $ref: '#/definitions/mcir.Range'
      name:
        type: string
      netBwGbps:
        $ref: '#/definitions/mcir.Range'
      osType:
        type: string
      providerName:
        type: string
      regionName:
        type: string
      storageGiB:
        $ref: '#/definitions/mcir.Range'
      vCPU:
        $ref: '#/definitions/mcir.Range'
    type: object
  mcir.JSONResult:
    type: object
  mcir.Range:
    properties:
      max:
        type: number
      min:
        type: number
    type: object
  mcir.RestFilterSpecsResponse:
    properties:
      spec:
        items:
          $ref: '#/definitions/mcir.TbSpecInfo'
        type: array
    type: object
  mcir.RestGetAllCustomImageResponse:
    properties:
      customImage:
        items:
          $ref: '#/definitions/mcir.TbCustomImageInfo'
        type: array
    type: object
  mcir.RestGetAllDataDiskResponse:
    properties:
      dataDisk:
        items:
          $ref: '#/definitions/mcir.TbDataDiskInfo'
        type: array
    type: object
  mcir.RestGetAllImageResponse:
    properties:
      image:
        items:
          $ref: '#/definitions/mcir.TbImageInfo'
        type: array
    type: object
  mcir.RestGetAllSecurityGroupResponse:
    properties:
      securityGroup:
        items:
          $ref: '#/definitions/mcir.TbSecurityGroupInfo'
        type: array
    type: object
  mcir.RestGetAllSshKeyResponse:
    properties:
      sshKey:
        items:
          $ref: '#/definitions/mcir.TbSshKeyInfo'
        type: array
    type: object
  mcir.RestGetAllVNetResponse:
    properties:
      vNet:
        items:
          $ref: '#/definitions/mcir.TbVNetInfo'
        type: array
    type: object
  mcir.RestLookupImageRequest:
    properties:
      connectionName:
        type: string
      cspImageId:
        type: string
    type: object
  mcir.RestLookupSpecRequest:
    properties:
      connectionName:
        type: string
      cspSpecName:
        type: string
    type: object
  mcir.RestSearchImageRequest:
    properties:
      keywords:
        items:
          type: string
        type: array
    type: object
  mcir.SpiderGpuInfo:
    properties:
      count:
        type: string
      mem:
        type: string
      mfr:
        type: string
      model:
        type: string
    type: object
  mcir.SpiderImageInfo:
    properties:
      guestOS:
        description: Windows7, Ubuntu etc.
        type: string
      iid:
        allOf:
        - $ref: '#/definitions/common.IID'
        description: Fields for response
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        description: Fields for request
        type: string
      status:
        description: available, unavailable
        type: string
    type: object
  mcir.SpiderImageList:
    properties:
      image:
        items:
          $ref: '#/definitions/mcir.SpiderImageInfo'
        type: array
    type: object
  mcir.SpiderSpecInfo:
    properties:
      gpu:
        items:
          $ref: '#/definitions/mcir.SpiderGpuInfo'
        type: array
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      mem:
        type: string
      name:
        type: string
      region:
        type: string
      vcpu:
        $ref: '#/definitions/mcir.SpiderVCpuInfo'
    type: object
  mcir.SpiderSpecList:
    properties:
      vmspec:
        items:
          $ref: '#/definitions/mcir.SpiderSpecInfo'
        type: array
    type: object
  mcir.SpiderVCpuInfo:
    properties:
      clock:
        description: GHz
        type: string
      count:
        type: string
    type: object
  mcir.TbAttachDetachDataDiskReq:
    properties:
      dataDiskId:
        type: string
    required:
    - dataDiskId
    type: object
  mcir.TbCustomImageInfo:
    properties:
      associatedObjectList:
        items:
          type: string
        type: array
      connectionName:
        example: aws-ap-southeast-1
        type: string
      creationDate:
        example: "2022-10-18T08:12:48Z"
        type: string
      cspCustomImageId:
        example: ami-06eb41e14121c550a
        type: string
      cspCustomImageName:
        example: aws-ap-southeast-1-snapshot
        type: string
      description:
        type: string
      guestOS:
        description: Windows7, Ubuntu etc.
        type: string
      id:
        example: aws-ap-southeast-1-snapshot
        type: string
      isAutoGenerated:
        type: boolean
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        example: aws-ap-southeast-1-snapshot
        type: string
      namespace:
        description: required to save in RDB
        example: default
        type: string
      sourceVmId:
        example: aws-ap-southeast-1-1
        type: string
      status:
        allOf:
        - $ref: '#/definitions/mcir.CustomImageStatus'
        example: Available
      systemLabel:
        description: SystemLabel is for describing the MCIR in a keyword (any string
          can be used) for special System purpose
        example: Managed by CB-Tumblebug
        type: string
    type: object
  mcir.TbCustomImageReq:
    properties:
      connectionName:
        type: string
      cspCustomImageId:
        description: This field is for 'Register existing custom image'
        type: string
      description:
        type: string
      name:
        type: string
      sourceVmId:
        type: string
    required:
    - name
    type: object
  mcir.TbDataDiskInfo:
    properties:
      associatedObjectList:
        items:
          type: string
        type: array
      connectionName:
        example: aws-ap-southeast-1
        type: string
      createdTime:
        example: "2022-10-12T05:09:51.05Z"
        type: string
      cspDataDiskId:
        example: vol-0d397c3239629bd43
        type: string
      cspDataDiskName:
        example: default-aws-ap-southeast-1-datadisk
        type: string
      description:
        example: Available
        type: string
      diskSize:
        example: "77"
        type: string
      diskType:
        example: standard
        type: string
      id:
        example: aws-ap-southeast-1-datadisk
        type: string
      isAutoGenerated:
        type: boolean
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        example: aws-ap-southeast-1-datadisk
        type: string
      status:
        allOf:
        - $ref: '#/definitions/mcir.DiskStatus'
        description: Available, Unavailable, Attached, ...
        example: Available
      systemLabel:
        description: SystemLabel is for describing the MCIR in a keyword (any string
          can be used) for special System purpose
        example: Managed by CB-Tumblebug
        type: string
      systemMessage:
        description: Latest system message such as error message
        example: Failed because ...
        type: string
    type: object
  mcir.TbDataDiskReq:
    properties:
      connectionName:
        example: aws-ap-southeast-1
        type: string
      cspDataDiskId:
        description: |-
          Fields for "Register existing dataDisk" feature
          CspDataDiskId is required to register object from CSP (option=register)
        type: string
      description:
        type: string
      diskSize:
        default: "100"
        example: "77"
        type: string
      diskType:
        example: default
        type: string
      name:
        example: aws-ap-southeast-1-datadisk
        type: string
    required:
    - connectionName
    - diskSize
    - name
    type: object
  mcir.TbDataDiskUpsizeReq:
    properties:
      description:
        type: string
      diskSize:
        type: string
    required:
    - diskSize
    type: object
  mcir.TbDataDiskVmReq:
    properties:
      description:
        type: string
      diskSize:
        default: "100"
        example: "77"
        type: string
      diskType:
        example: default
        type: string
      name:
        example: aws-ap-southeast-1-datadisk
        type: string
    required:
    - diskSize
    - name
    type: object
  mcir.TbFirewallRuleInfo:
    properties:
      cidr:
        type: string
      direction:
        description: '`json:"direction"`'
        type: string
      fromPort:
        description: '`json:"fromPort"`'
        type: string
      ipprotocol:
        description: '`json:"ipProtocol"`'
        type: string
      toPort:
        description: '`json:"toPort"`'
        type: string
    required:
    - direction
    - fromPort
    - ipprotocol
    - toPort
    type: object
  mcir.TbFirewallRulesWrapper:
    properties:
      firewallRules:
        description: validate:"required"`
        items:
          $ref: '#/definitions/mcir.TbFirewallRuleInfo'
        type: array
    type: object
  mcir.TbImageInfo:
    properties:
      associatedObjectList:
        items:
          type: string
        type: array
      connectionName:
        type: string
      creationDate:
        type: string
      cspImageId:
        type: string
      cspImageName:
        type: string
      description:
        type: string
      guestOS:
        description: Windows7, Ubuntu etc.
        type: string
      id:
        type: string
      infraType:
        description: vm|k8s|kubernetes|container, etc.
        type: string
      isAutoGenerated:
        type: boolean
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        type: string
      namespace:
        description: required to save in RDB
        type: string
      status:
        description: available, unavailable
        type: string
      systemLabel:
        description: SystemLabel is for describing the MCIR in a keyword (any string
          can be used) for special System purpose
        example: Managed by CB-Tumblebug
        type: string
    type: object
  mcir.TbImageReq:
    properties:
      connectionName:
        type: string
      cspImageId:
        type: string
      description:
        type: string
      name:
        type: string
    required:
    - connectionName
    - cspImageId
    - name
    type: object
  mcir.TbSecurityGroupInfo:
    properties:
      associatedObjectList:
        items:
          type: string
        type: array
      connectionName:
        type: string
      cspSecurityGroupId:
        type: string
      cspSecurityGroupName:
        type: string
      description:
        type: string
      firewallRules:
        items:
          $ref: '#/definitions/mcir.TbFirewallRuleInfo'
        type: array
      id:
        type: string
      isAutoGenerated:
        type: boolean
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        type: string
      systemLabel:
        description: SystemLabel is for describing the MCIR in a keyword (any string
          can be used) for special System purpose
        example: Managed by CB-Tumblebug
        type: string
      vNetId:
        type: string
    type: object
  mcir.TbSecurityGroupReq:
    properties:
      connectionName:
        type: string
      cspSecurityGroupId:
        description: CspSecurityGroupId is required to register object from CSP (option=register)
        type: string
      description:
        type: string
      firewallRules:
        description: validate:"required"`
        items:
          $ref: '#/definitions/mcir.TbFirewallRuleInfo'
        type: array
      name:
        type: string
      vNetId:
        type: string
    required:
    - connectionName
    - name
    - vNetId
    type: object
  mcir.TbSpecInfo:
    properties:
      acceleratorCount:
        type: integer
      acceleratorMemoryGB:
        type: number
      acceleratorModel:
        type: string
      acceleratorType:
        type: string
      associatedObjectList:
        items:
          type: string
        type: array
      connectionName:
        type: string
      costPerHour:
        type: number
      cspSpecName:
        type: string
      description:
        type: string
      evaluationScore01:
        type: number
      evaluationScore02:
        type: number
      evaluationScore03:
        type: number
      evaluationScore04:
        type: number
      evaluationScore05:
        type: number
      evaluationScore06:
        type: number
      evaluationScore07:
        type: number
      evaluationScore08:
        type: number
      evaluationScore09:
        type: number
      evaluationScore10:
        type: number
      evaluationStatus:
        type: string
      id:
        type: string
      infraType:
        description: vm|k8s|kubernetes|container, etc.
        type: string
      isAutoGenerated:
        type: boolean
      maxTotalStorageTiB:
        type: integer
      memoryGiB:
        type: number
      name:
        type: string
      namespace:
        description: required to save in RDB
        type: string
      netBwGbps:
        type: integer
      orderInFilteredResult:
        type: integer
      osType:
        type: string
      providerName:
        type: string
      regionName:
        type: string
      rootDiskSize:
        type: string
      rootDiskType:
        type: string
      storageGiB:
        type: integer
      systemLabel:
        description: SystemLabel is for describing the MCIR in a keyword (any string
          can be used) for special System purpose
        example: Managed by CB-Tumblebug
        type: string
      vCPU:
        type: integer
    type: object
  mcir.TbSpecReq:
    properties:
      connectionName:
        type: string
      cspSpecName:
        type: string
      description:
        type: string
      name:
        type: string
    required:
    - connectionName
    - cspSpecName
    - name
    type: object
  mcir.TbSshKeyInfo:
    properties:
      associatedObjectList:
        items:
          type: string
        type: array
      connectionName:
        type: string
      cspSshKeyId:
        description: CspSshKeyId used for CSP-native identifier (either Name or ID)
        type: string
      cspSshKeyName:
        description: CspSshKeyName used for CB-Spider identifier
        type: string
      description:
        type: string
      fingerprint:
        type: string
      id:
        type: string
      isAutoGenerated:
        type: boolean
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        type: string
      privateKey:
        type: string
      publicKey:
        type: string
      systemLabel:
        description: SystemLabel is for describing the MCIR in a keyword (any string
          can be used) for special System purpose
        example: Managed by CB-Tumblebug
        type: string
      username:
        type: string
      verifiedUsername:
        type: string
    type: object
  mcir.TbSshKeyReq:
    properties:
      connectionName:
        type: string
      cspSshKeyId:
        description: |-
          Fields for "Register existing SSH keys" feature
          CspSshKeyId is required to register object from CSP (option=register)
        type: string
      description:
        type: string
      fingerprint:
        type: string
      name:
        type: string
      privateKey:
        type: string
      publicKey:
        type: string
      username:
        type: string
      verifiedUsername:
        type: string
    required:
    - connectionName
    - name
    type: object
  mcir.TbSubnetInfo:
    properties:
      bastionNodes:
        items:
          $ref: '#/definitions/mcir.BastionNode'
        type: array
      description:
        type: string
      id:
        type: string
      idFromCsp:
        type: string
      ipv4_CIDR:
        type: string
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        type: string
    required:
    - ipv4_CIDR
    - name
    type: object
  mcir.TbSubnetReq:
    properties:
      description:
        type: string
      idFromCsp:
        type: string
      ipv4_CIDR:
        type: string
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        type: string
    required:
    - ipv4_CIDR
    - name
    type: object
  mcir.TbVNetInfo:
    properties:
      associatedObjectList:
        items:
          type: string
        type: array
      cidrBlock:
        type: string
      connectionName:
        type: string
      cspVNetId:
        type: string
      cspVNetName:
        type: string
      description:
        type: string
      id:
        type: string
      isAutoGenerated:
        type: boolean
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        type: string
      status:
        type: string
      subnetInfoList:
        items:
          $ref: '#/definitions/mcir.TbSubnetInfo'
        type: array
      systemLabel:
        description: SystemLabel is for describing the MCIR in a keyword (any string
          can be used) for special System purpose
        example: Managed by CB-Tumblebug
        type: string
    type: object
  mcir.TbVNetReq:
    properties:
      cidrBlock:
        type: string
      connectionName:
        type: string
      cspVNetId:
        type: string
      description:
        type: string
      name:
        type: string
      subnetInfoList:
        items:
          $ref: '#/definitions/mcir.TbSubnetReq'
        type: array
    required:
    - connectionName
    - name
    type: object
  model.Response:
    properties:
      details:
        example: Any details
        type: string
      list:
        items: {}
        type: array
      message:
        example: Any message
        type: string
      object:
        additionalProperties: true
        type: object
      status:
        example: 200
        type: integer
      success:
        example: true
        type: boolean
    type: object
  model.RestPostVpnGcpToAwsRequest:
    properties:
      tfVars:
        $ref: '#/definitions/model.TfVarsGcpAwsVpnTunnel'
    type: object
  model.RestPostVpnRequest:
    properties:
      site1:
        $ref: '#/definitions/model.SiteDetail'
      site2:
        $ref: '#/definitions/model.SiteDetail'
    type: object
  model.SiteDetail:
    properties:
      csp:
        example: aws
        type: string
      gatewaySubnetCidr:
        example: xxx.xxx.xxx.xxx/xx
        type: string
      region:
        example: ap-northeast-2
        type: string
      resourceGroup:
        example: rg-xxxxx
        type: string
      subnet:
        example: subnet-xxxxx
        type: string
      vnet:
        example: vpc-xxxxx
        type: string
      zone:
        example: ap-northeast-2a
        type: string
    type: object
  model.SitesInfo:
    properties:
      count:
        example: 3
        type: integer
      mciId:
        example: mci-01
        type: string
      nsId:
        example: ns-01
        type: string
      sites:
        $ref: '#/definitions/model.sites'
    type: object
  model.TfVarsGcpAwsVpnTunnel:
    properties:
      aws-region:
        default: ap-northeast-2
        example: ap-northeast-2
        type: string
      aws-subnet-id:
        example: subnet-xxxxx
        type: string
      aws-vpc-id:
        example: vpc-xxxxx
        type: string
      gcp-region:
        default: asia-northeast3
        example: asia-northeast3
        type: string
      gcp-vpc-network-name:
        default: vpc01
        example: vpc01
        type: string
      resource-group-id:
        example: ""
        type: string
    required:
    - aws-region
    - aws-subnet-id
    - aws-vpc-id
    - gcp-region
    - gcp-vpc-network-name
    type: object
  model.sites:
    properties:
      aws:
        items:
          $ref: '#/definitions/model.SiteDetail'
        type: array
      azure:
        items:
          $ref: '#/definitions/model.SiteDetail'
        type: array
      gcp:
        items:
          $ref: '#/definitions/model.SiteDetail'
        type: array
    type: object
  netutil.Network:
    properties:
      cidrBlock:
        type: string
      name:
        type: string
      subnets:
        items:
          $ref: '#/definitions/netutil.Network'
        type: array
    type: object
  netutil.RestPostUtilToDesignNetworkReponse:
    properties:
      cidrBlock:
        type: string
      name:
        type: string
      subnets:
        items:
          $ref: '#/definitions/netutil.Network'
        type: array
    type: object
  netutil.RestPostUtilToDesignNetworkRequest:
    properties:
      cidrBlock:
        example: 192.168.0.0/16
        type: string
      subnettingRules:
        items:
          $ref: '#/definitions/netutil.SubnettingRule'
        type: array
    type: object
  netutil.RestPostUtilToValidateNetworkRequest:
    properties:
      networkConfiguration:
        $ref: '#/definitions/netutil.Network'
    type: object
  netutil.SubnettingRule:
    properties:
      type:
        allOf:
        - $ref: '#/definitions/netutil.SubnettingRuleType'
        example: minSubnets
      value:
        example: 2
        type: integer
    type: object
  netutil.SubnettingRuleType:
    enum:
    - minSubnets
    - minHosts
    type: string
    x-enum-varnames:
    - SubnettingRuleTypeMinSubnets
    - SubnettingRuleTypeMinHosts
info:
  contact:
    email: contact-to-cloud-barista@googlegroups.com
    name: API Support
    url: http://cloud-barista.github.io
  description: CB-Tumblebug REST API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: CB-Tumblebug REST API
  version: latest
paths:
  /auth/test:
    get:
      consumes:
      - application/json
      description: Test JWT authentication
      produces:
      - application/json
      responses:
        "200":
          description: Information of JWT authentication
          schema:
            $ref: '#/definitions/auth.AuthsInfo'
        "400":
          description: Invalid Request
          schema:
            type: object
      security:
      - Bearer: []
      summary: Test JWT authentication
      tags:
      - '[Auth] Test JWT authentication'
  /availableK8sClusterNodeImage:
    get:
      consumes:
      - application/json
      description: Get available kubernetes cluster node image
      operationId: GetAvailableK8sClusterNodeImage
      parameters:
      - description: Name of the CSP to retrieve
        in: query
        name: providerName
        required: true
        type: string
      - description: Name of region to retrieve
        in: query
        name: regionName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.K8sClusterNodeImageDetailAvailable'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get available kubernetes cluster node image
      tags:
      - '[Infra resource] K8sCluster management'
  /availableK8sClusterVersion:
    get:
      consumes:
      - application/json
      description: Get available kubernetes cluster version
      operationId: GetAvailableK8sClusterVersion
      parameters:
      - description: Name of the CSP to retrieve
        in: query
        name: providerName
        required: true
        type: string
      - description: Name of region to retrieve
        in: query
        name: regionName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.K8sClusterVersionDetailAvailable'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get available kubernetes cluster version
      tags:
      - '[Infra resource] K8sCluster management'
  /checkNodeGroupsOnK8sCreation:
    get:
      consumes:
      - application/json
      description: Check whether nodegroups are required during the k8scluster creation
      operationId: CheckNodeGroupsOnK8sCreation
      parameters:
      - description: Name of the CSP to retrieve
        in: query
        name: providerName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.K8sClusterNodeGroupsOnCreation'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Check whether nodegroups are required during the k8scluster creation
      tags:
      - '[Infra resource] K8sCluster management'
  /cloudInfo:
    get:
      consumes:
      - application/json
      description: Get cloud information
      operationId: GetCloudInfo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.CloudInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get cloud information
      tags:
      - '[Admin] Multi-Cloud environment configuration'
  /config:
    delete:
      consumes:
      - application/json
      description: Init all configs
      operationId: InitAllConfig
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Init all configs
      tags:
      - '[Admin] System environment'
    get:
      consumes:
      - application/json
      description: List all configs
      operationId: GetAllConfig
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.RestGetAllConfigResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all configs
      tags:
      - '[Admin] System environment'
    post:
      consumes:
      - application/json
      description: Create or Update config (TB_SPIDER_REST_URL, TB_DRAGONFLY_REST_URL,
        ...)
      operationId: PostConfig
      parameters:
      - description: Key and Value for configuration
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/common.ConfigReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ConfigInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create or Update config
      tags:
      - '[Admin] System environment'
  /config/{configId}:
    delete:
      consumes:
      - application/json
      description: Init config
      operationId: InitConfig
      parameters:
      - description: Config ID
        in: path
        name: configId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ConfigInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Init config
      tags:
      - '[Admin] System environment'
    get:
      consumes:
      - application/json
      description: Get config
      operationId: GetConfig
      parameters:
      - description: Config ID
        in: path
        name: configId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ConfigInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get config
      tags:
      - '[Admin] System environment'
  /connConfig:
    get:
      consumes:
      - application/json
      description: List all registered ConnConfig
      operationId: GetConnConfigList
      parameters:
      - default: ""
        description: filter objects by Credential Holder
        in: query
        name: filterCredentialHolder
        type: string
      - default: true
        description: filter verified connections only
        enum:
        - true
        - false
        in: query
        name: filterVerified
        type: boolean
      - default: false
        description: filter connections with the representative region only
        enum:
        - true
        - false
        in: query
        name: filterRegionRepresentative
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ConnConfigList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all registered ConnConfig
      tags:
      - '[Admin] Multi-Cloud environment configuration'
  /connConfig/{connConfigName}:
    get:
      consumes:
      - application/json
      description: Get registered ConnConfig info
      operationId: GetConnConfig
      parameters:
      - description: Name of connection config (cloud config)
        in: path
        name: connConfigName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ConnConfig'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get registered ConnConfig info
      tags:
      - '[Admin] Multi-Cloud environment configuration'
  /credential:
    post:
      consumes:
      - application/json
      description: Post register Credential info
      operationId: RegisterCredential
      parameters:
      - description: Credential request info
        in: body
        name: CredentialReq
        required: true
        schema:
          $ref: '#/definitions/common.CredentialReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.CredentialInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Post register Credential info
      tags:
      - '[Admin] Multi-Cloud environment configuration'
  /forward/{path}:
    post:
      consumes:
      - application/json
      description: Forward any (GET) request to CB-Spider
      operationId: ForwardAnyReqToAny
      parameters:
      - default: vmspec
        description: Internal call path to CB-Spider (path without /spider/ prefix)
          - see [https://documenter.getpostman.com/view/24786935/2s9Ykq8Lpf#231eec23-b0ab-4966-83ce-a0ef92ead7bc]
          for more details
        in: path
        name: path
        required: true
        type: string
      - description: Request body (various formats) - see [https://documenter.getpostman.com/view/24786935/2s9Ykq8Lpf#231eec23-b0ab-4966-83ce-a0ef92ead7bc]
          for more details
        in: body
        name: Request
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Forward any (GET) request to CB-Spider
      tags:
      - '[Admin] System utility'
  /httpVersion:
    get:
      consumes:
      - application/json
      description: Checks and logs the HTTP version of the incoming request to the
        server console.
      operationId: CheckHTTPVersion
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Check HTTP version of incoming request
      tags:
      - '[Admin] System management'
  /inspectResources:
    post:
      consumes:
      - application/json
      description: Inspect Resources (vNet, securityGroup, sshKey, vm) registered
        in CB-Tumblebug, CB-Spider, CSP
      operationId: InspectResources
      parameters:
      - description: Specify connectionName and resource type
        in: body
        name: connectionName
        required: true
        schema:
          $ref: '#/definitions/common.RestInspectResourcesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.InspectResource'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Inspect Resources (vNet, securityGroup, sshKey, vm) registered in CB-Tumblebug,
        CB-Spider, CSP
      tags:
      - '[Admin] System management'
  /inspectResourcesOverview:
    get:
      consumes:
      - application/json
      description: Inspect Resources Overview (vNet, securityGroup, sshKey, vm) registered
        in CB-Tumblebug and CSP for all connections
      operationId: InspectResourcesOverview
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.InspectResourceAllResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Inspect Resources Overview (vNet, securityGroup, sshKey, vm) registered
        in CB-Tumblebug and CSP for all connections
      tags:
      - '[Admin] System management'
  /k8sClusterInfo:
    get:
      consumes:
      - application/json
      description: Get kubernetes cluster information
      operationId: GetK8sClusterInfo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.K8sClusterInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get kubernetes cluster information
      tags:
      - '[Admin] Multi-Cloud environment configuration'
  /loadCommonResource:
    get:
      consumes:
      - application/json
      description: Load Common Resources from internal asset files (Spec, Image)
      operationId: LoadCommonResource
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Load Common Resources from internal asset files
      tags:
      - '[Admin] Multi-Cloud environment configuration'
  /lookupImage:
    post:
      consumes:
      - application/json
      description: Lookup image
      operationId: LookupImage
      parameters:
      - description: Specify connectionName & cspImageId
        in: body
        name: lookupImageReq
        required: true
        schema:
          $ref: '#/definitions/mcir.RestLookupImageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.SpiderImageInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Lookup image
      tags:
      - '[Infra resource] MCIR Common'
  /lookupImages:
    post:
      consumes:
      - application/json
      description: Lookup image list
      operationId: LookupImageList
      parameters:
      - description: Specify connectionName
        in: body
        name: lookupImagesReq
        required: true
        schema:
          $ref: '#/definitions/common.TbConnectionName'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.SpiderImageList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Lookup image list
      tags:
      - '[Infra resource] MCIR Common'
  /lookupSpec:
    post:
      consumes:
      - application/json
      description: Lookup spec
      operationId: LookupSpec
      parameters:
      - description: Specify connectionName & cspSpecName
        in: body
        name: lookupSpecReq
        required: true
        schema:
          $ref: '#/definitions/mcir.RestLookupSpecRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.SpiderSpecInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Lookup spec
      tags:
      - '[Infra resource] MCIR Common'
  /lookupSpecs:
    post:
      consumes:
      - application/json
      description: Lookup spec list
      operationId: LookupSpecList
      parameters:
      - description: Specify connectionName
        in: body
        name: lookupSpecsReq
        required: true
        schema:
          $ref: '#/definitions/common.TbConnectionName'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.SpiderSpecList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Lookup spec list
      tags:
      - '[Infra resource] MCIR Common'
  /mciDynamicCheckRequest:
    post:
      consumes:
      - application/json
      description: Check available ConnectionConfig list before create MCI Dynamically
        from common spec and image
      operationId: PostMciDynamicCheckRequest
      parameters:
      - description: Details for MCI dynamic request information
        in: body
        name: mciReq
        required: true
        schema:
          $ref: '#/definitions/mci.MciConnectionConfigCandidatesReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.CheckMciDynamicReqInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Check available ConnectionConfig list for creating MCI Dynamically
      tags:
      - '[MC-Infra] MCI Provisioning management'
  /mciRecommendVm:
    post:
      consumes:
      - application/json
      description: Recommend MCI plan (filter and priority) Find details from https://github.com/cloud-barista/cb-tumblebug/discussions/1234
      operationId: RecommendVm
      parameters:
      - description: Recommend MCI plan (filter and priority)
        in: body
        name: deploymentPlan
        schema:
          $ref: '#/definitions/mci.DeploymentPlan'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/mcir.TbSpecInfo'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Recommend MCI plan (filter and priority)
      tags:
      - '[MC-Infra] MCI Provisioning management'
  /ns:
    delete:
      consumes:
      - application/json
      description: Delete all namespaces
      operationId: DelAllNs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all namespaces
      tags:
      - '[Namespace] Namespace management'
    get:
      consumes:
      - application/json
      description: List all namespaces or namespaces' ID
      operationId: GetAllNs
      parameters:
      - description: Option
        enum:
        - id
        in: query
        name: option
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given option param
          schema:
            allOf:
            - $ref: '#/definitions/common.JSONResult'
            - properties:
                '[DEFAULT]':
                  $ref: '#/definitions/common.RestGetAllNsResponse'
                '[ID]':
                  $ref: '#/definitions/common.IdList'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all namespaces or namespaces' ID
      tags:
      - '[Namespace] Namespace management'
    post:
      consumes:
      - application/json
      description: Create namespace
      operationId: PostNs
      parameters:
      - description: Details for a new namespace
        in: body
        name: nsReq
        required: true
        schema:
          $ref: '#/definitions/common.NsReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NsInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create namespace
      tags:
      - '[Namespace] Namespace management'
  /ns/{nsId}:
    delete:
      consumes:
      - application/json
      description: Delete namespace
      operationId: DelNs
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete namespace
      tags:
      - '[Namespace] Namespace management'
    get:
      consumes:
      - application/json
      description: Get namespace
      operationId: GetNs
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NsInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get namespace
      tags:
      - '[Namespace] Namespace management'
    put:
      consumes:
      - application/json
      description: Update namespace
      operationId: PutNs
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Details to update existing namespace
        in: body
        name: namespace
        required: true
        schema:
          $ref: '#/definitions/common.NsReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NsInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Update namespace
      tags:
      - '[Namespace] Namespace management'
  /ns/{nsId}/benchmark/mci/{mciId}:
    post:
      consumes:
      - application/json
      description: Run MCI benchmark for a single performance metric and return results
      operationId: GetBenchmark
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: Host IP address to benchmark
        in: body
        name: hostIP
        required: true
        schema:
          $ref: '#/definitions/mci.RestGetBenchmarkRequest'
      - description: Benchmark Action to MCI
        enum:
        - install
        - init
        - cpus
        - cpum
        - memR
        - memW
        - fioR
        - fioW
        - dbR
        - dbW
        - rtt
        - mrtt
        - clean
        in: query
        name: action
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.BenchmarkInfoArray'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Run MCI benchmark for a single performance metric and return results
      tags:
      - '[MC-Infra] MCI Performance benchmarking (WIP)'
  /ns/{nsId}/benchmarkAll/mci/{mciId}:
    post:
      consumes:
      - application/json
      description: Run MCI benchmark for all performance metrics and return results
      operationId: GetAllBenchmark
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: Host IP address to benchmark
        in: body
        name: hostIP
        required: true
        schema:
          $ref: '#/definitions/mci.RestGetAllBenchmarkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.BenchmarkInfoArray'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Run MCI benchmark for all performance metrics and return results
      tags:
      - '[MC-Infra] MCI Performance benchmarking (WIP)'
  /ns/{nsId}/benchmarkLatency/mci/{mciId}:
    get:
      consumes:
      - application/json
      description: Run MCI benchmark for network latency
      operationId: GetLatencyBenchmark
      parameters:
      - default: system
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: probe
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.BenchmarkInfoArray'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Run MCI benchmark for network latency
      tags:
      - '[MC-Infra] MCI Performance benchmarking (WIP)'
  /ns/{nsId}/checkResource/{resourceType}/{resourceId}:
    get:
      consumes:
      - application/json
      description: Check resources' existence
      operationId: CheckResource
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Resource Type
        in: path
        name: resourceType
        required: true
        type: string
      - description: Resource ID
        in: path
        name: resourceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Check resources' existence
      tags:
      - '[Infra resource] MCIR Common'
  /ns/{nsId}/cmd/mci/{mciId}:
    post:
      consumes:
      - application/json
      description: Send a command to specified MCI
      operationId: PostCmdMci
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: MCI Command Request
        in: body
        name: mciCmdReq
        required: true
        schema:
          $ref: '#/definitions/mci.MciCmdReq'
      - default: g1
        description: subGroupId to apply the command only for VMs in subGroup of MCI
        in: query
        name: subGroupId
        type: string
      - default: g1-1
        description: vmId to apply the command only for a VM in MCI
        in: query
        name: vmId
        type: string
      - description: Custom request ID
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.MciSshCmdResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Send a command to specified MCI
      tags:
      - '[MC-Infra] MCI Remote command'
  /ns/{nsId}/control/mci/{mciId}:
    get:
      consumes:
      - application/json
      description: Control the lifecycle of MCI (refine, suspend, resume, reboot,
        terminate)
      operationId: GetControlMci
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: Action to MCI
        enum:
        - suspend
        - resume
        - reboot
        - terminate
        - refine
        - continue
        - withdraw
        in: query
        name: action
        required: true
        type: string
      - description: Force control to skip checking controllable status
        enum:
        - "false"
        - "true"
        in: query
        name: force
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Control the lifecycle of MCI (refine, suspend, resume, reboot, terminate)
      tags:
      - '[MC-Infra] MCI Control lifecycle'
  /ns/{nsId}/control/mci/{mciId}/vm/{vmId}:
    get:
      consumes:
      - application/json
      description: Control the lifecycle of VM (suspend, resume, reboot, terminate)
      operationId: GetControlMciVm
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1-1
        description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      - description: Action to MCI
        enum:
        - suspend
        - resume
        - reboot
        - terminate
        in: query
        name: action
        required: true
        type: string
      - description: Force control to skip checking controllable status
        enum:
        - "false"
        - "true"
        in: query
        name: force
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Control the lifecycle of VM (suspend, resume, reboot, terminate)
      tags:
      - '[MC-Infra] MCI Control lifecycle'
  /ns/{nsId}/defaultResources:
    delete:
      consumes:
      - application/json
      description: Delete all Default Resource Objects in the given namespace
      operationId: DelAllDefaultResources
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all Default Resource Objects in the given namespace
      tags:
      - '[Infra resource] MCIR Common'
  /ns/{nsId}/installBenchmarkAgent/mci/{mciId}:
    post:
      consumes:
      - application/json
      description: Install the benchmark agent to specified MCI
      operationId: PostInstallBenchmarkAgentToMci
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: MCI Command Request
        in: body
        name: mciCmdReq
        required: true
        schema:
          $ref: '#/definitions/mci.MciCmdReq'
      - description: Option for checking update
        enum:
        - update
        in: query
        name: option
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.MciSshCmdResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Install the benchmark agent to specified MCI
      tags:
      - '[MC-Infra] MCI Performance benchmarking (WIP)'
  /ns/{nsId}/k8scluster:
    delete:
      consumes:
      - application/json
      description: Delete all K8sClusters
      operationId: DeleteAllK8sCluster
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: ""
        description: Delete resources containing matched ID-substring only
        in: query
        name: match
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all K8sClusters
      tags:
      - '[Infra resource] K8sCluster management'
    get:
      consumes:
      - application/json
      description: List all K8sClusters or K8sClusters' ID
      operationId: GetAllK8sCluster
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Option
        enum:
        - id
        in: query
        name: option
        type: string
      - description: 'Field key for filtering (ex: cspK8sClusterName)'
        in: query
        name: filterKey
        type: string
      - description: 'Field value for filtering (ex: default-alibaba-ap-northeast-2-vpc)'
        in: query
        name: filterVal
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given option param
          schema:
            allOf:
            - $ref: '#/definitions/mci.JSONResult'
            - properties:
                '[DEFAULT]':
                  $ref: '#/definitions/mci.RestGetAllK8sClusterResponse'
                '[ID]':
                  $ref: '#/definitions/common.IdList'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all K8sClusters or K8sClusters' ID
      tags:
      - '[Infra resource] K8sCluster management'
    post:
      consumes:
      - application/json
      description: Create K8sCluster<br>Find details from https://github.com/cloud-barista/cb-tumblebug/discussions/1614
      operationId: PostK8sCluster
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: 'Option: [required params for register] connectionName, name,
          cspK8sClusterId'
        enum:
        - register
        in: query
        name: option
        type: string
      - description: Details of the K8sCluster object
        in: body
        name: k8sClusterReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbK8sClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbK8sClusterInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create K8sCluster
      tags:
      - '[Infra resource] K8sCluster management'
  /ns/{nsId}/k8scluster/{k8sClusterId}:
    delete:
      consumes:
      - application/json
      description: Delete K8sCluster
      operationId: DeleteK8sCluster
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: k8scluster-01
        description: K8sCluster ID
        in: path
        name: k8sClusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete K8sCluster
      tags:
      - '[Infra resource] K8sCluster management'
    get:
      consumes:
      - application/json
      description: Get K8sCluster
      operationId: GetK8sCluster
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: k8scluster-01
        description: K8sCluster ID
        in: path
        name: k8sClusterId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbK8sClusterInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get K8sCluster
      tags:
      - '[Infra resource] K8sCluster management'
  /ns/{nsId}/k8scluster/{k8sClusterId}/k8snodegroup:
    post:
      consumes:
      - application/json
      description: Add a K8sNodeGroup
      operationId: PostK8sNodeGroup
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: k8scluster-01
        description: K8sCluster ID
        in: path
        name: k8sClusterId
        required: true
        type: string
      - description: Details of the K8sNodeGroup object
        in: body
        name: k8sNodeGroupReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbK8sNodeGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbK8sClusterInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Add a K8sNodeGroup
      tags:
      - '[Infra resource] K8sCluster management'
  /ns/{nsId}/k8scluster/{k8sClusterId}/k8snodegroup/{k8sNodeGroupName}:
    delete:
      consumes:
      - application/json
      description: Remove a K8sNodeGroup
      operationId: DeleteK8sNodeGroup
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: k8scluster-01
        description: K8sCluster ID
        in: path
        name: k8sClusterId
        required: true
        type: string
      - default: ng-01
        description: K8sNodeGroup Name
        in: path
        name: k8sNodeGroupName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Remove a K8sNodeGroup
      tags:
      - '[Infra resource] K8sCluster management'
  /ns/{nsId}/k8scluster/{k8sClusterId}/k8snodegroup/{k8sNodeGroupName}/autoscalesize:
    put:
      consumes:
      - application/json
      description: Change a K8sNodeGroup's Autoscale Size
      operationId: PutChangeK8sNodeGroupAutoscaleSize
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: k8scluster-01
        description: K8sCluster ID
        in: path
        name: k8sClusterId
        required: true
        type: string
      - default: ng-01
        description: K8sNodeGroup Name
        in: path
        name: k8sNodeGroupName
        required: true
        type: string
      - description: Details of the TbChangeK8sNodeGroupAutoscaleSizeReq object
        in: body
        name: changeK8sNodeGroupAutoscaleSizeReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbChangeK8sNodeGroupAutoscaleSizeReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbChangeK8sNodeGroupAutoscaleSizeRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Change a K8sNodeGroup's Autoscale Size
      tags:
      - '[Infra resource] K8sCluster management'
  /ns/{nsId}/k8scluster/{k8sClusterId}/k8snodegroup/{k8sNodeGroupName}/onautoscaling:
    put:
      consumes:
      - application/json
      description: Set a K8sNodeGroup's Autoscaling On/Off
      operationId: PutSetK8sNodeGroupAutoscaling
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: k8scluster-01
        description: K8sCluster ID
        in: path
        name: k8sClusterId
        required: true
        type: string
      - default: ng-01
        description: K8sNodeGroup Name
        in: path
        name: k8sNodeGroupName
        required: true
        type: string
      - description: Details of the TbSetK8sNodeGroupAutoscalingReq object
        in: body
        name: setK8sNodeGroupAutoscalingReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbSetK8sNodeGroupAutoscalingReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbSetK8sNodeGroupAutoscalingRes'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Set a K8sNodeGroup's Autoscaling On/Off
      tags:
      - '[Infra resource] K8sCluster management'
  /ns/{nsId}/k8scluster/{k8sClusterId}/upgrade:
    put:
      consumes:
      - application/json
      description: Upgrade a K8sCluster's version
      operationId: PutUpgradeK8sCluster
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: k8scluster-01
        description: K8sCluster ID
        in: path
        name: k8sClusterId
        required: true
        type: string
      - description: Details of the TbUpgradeK8sClusterReq object
        in: body
        name: upgradeK8sClusterReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbUpgradeK8sClusterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Upgrade a K8sCluster's version
      tags:
      - '[Infra resource] K8sCluster management'
  /ns/{nsId}/loadSharedResource:
    get:
      consumes:
      - application/json
      description: Load Default Resource from internal asset file
      operationId: LoadSharedResource
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Option
        enum:
        - all
        - vnet
        - sg
        - sshkey
        in: query
        name: option
        required: true
        type: string
      - default: ""
        description: connectionName of cloud for designated resource
        in: query
        name: connectionName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Load Default Resource from internal asset file
      tags:
      - '[Infra resource] MCIR Common'
  /ns/{nsId}/mci:
    delete:
      consumes:
      - application/json
      description: Delete all MCIs
      operationId: DelAllMci
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Option for delete MCI (support force delete)
        enum:
        - force
        in: query
        name: option
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all MCIs
      tags:
      - '[MC-Infra] MCI Provisioning management'
    get:
      consumes:
      - application/json
      description: List all MCIs or MCIs' ID
      operationId: GetAllMci
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Option
        enum:
        - id
        - simple
        - status
        in: query
        name: option
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given option param
          schema:
            allOf:
            - $ref: '#/definitions/mci.JSONResult'
            - properties:
                '[DEFAULT]':
                  $ref: '#/definitions/mci.RestGetAllMciResponse'
                '[ID]':
                  $ref: '#/definitions/common.IdList'
                '[SIMPLE]':
                  $ref: '#/definitions/mci.RestGetAllMciResponse'
                '[STATUS]':
                  $ref: '#/definitions/mci.RestGetAllMciStatusResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all MCIs or MCIs' ID
      tags:
      - '[MC-Infra] MCI Provisioning management'
    post:
      consumes:
      - application/json
      description: Create MCI
      operationId: PostMci
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Details for an MCI object
        in: body
        name: mciReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbMciReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbMciInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create MCI
      tags:
      - '[MC-Infra] MCI Provisioning management'
  /ns/{nsId}/mci/{mciId}:
    delete:
      consumes:
      - application/json
      description: Delete MCI
      operationId: DelMci
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: Option for delete MCI (support force delete)
        enum:
        - terminate
        - force
        in: query
        name: option
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete MCI
      tags:
      - '[MC-Infra] MCI Provisioning management'
    get:
      consumes:
      - application/json
      description: 'Get MCI object (option: status, accessInfo, vmId)'
      operationId: GetMci
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: Option
        enum:
        - default
        - id
        - status
        - accessinfo
        in: query
        name: option
        type: string
      - description: '(For option=id) Field key for filtering (ex: connectionName)'
        in: query
        name: filterKey
        type: string
      - description: '(For option=id) Field value for filtering (ex: aws-ap-northeast-2)'
        in: query
        name: filterVal
        type: string
      - description: (For option=accessinfo) accessInfoOption (showSshKey)
        in: query
        name: accessInfoOption
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given action param
          schema:
            allOf:
            - $ref: '#/definitions/mci.JSONResult'
            - properties:
                '[AccessInfo]':
                  $ref: '#/definitions/mci.MciAccessInfo'
                '[DEFAULT]':
                  $ref: '#/definitions/mci.TbMciInfo'
                '[ID]':
                  $ref: '#/definitions/common.IdList'
                '[STATUS]':
                  $ref: '#/definitions/mci.MciStatusInfo'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: 'Get MCI object (option: status, accessInfo, vmId)'
      tags:
      - '[MC-Infra] MCI Provisioning management'
  /ns/{nsId}/mci/{mciId}/bastion/{bastionVmId}:
    delete:
      consumes:
      - application/json
      description: Remove a bastion VM from all vNets
      operationId: RemoveBastionNodes
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1-1
        description: Bastion VM ID
        in: path
        name: bastionVmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Remove a bastion VM from all vNets
      tags:
      - '[MC-Infra] MCI Remote command'
  /ns/{nsId}/mci/{mciId}/mcSwNlb:
    post:
      consumes:
      - application/json
      description: Create a special purpose MCI for NLB and depoly and setting SW
        NLB
      operationId: PostMcNLB
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: Details of the NLB object
        in: body
        name: nlbReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbNLBReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.McNlbInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create a special purpose MCI for NLB and depoly and setting SW NLB
      tags:
      - '[Infra resource] NLB management'
  /ns/{nsId}/mci/{mciId}/nlb:
    delete:
      consumes:
      - application/json
      description: Delete all NLBs
      operationId: DelAllNLB
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: ""
        description: Delete resources containing matched ID-substring only
        in: query
        name: match
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all NLBs
      tags:
      - '[Infra resource] NLB management'
    get:
      consumes:
      - application/json
      description: List all NLBs or NLBs' ID
      operationId: GetAllNLB
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: Option
        enum:
        - id
        in: query
        name: option
        type: string
      - description: 'Field key for filtering (ex: cspNLBName)'
        in: query
        name: filterKey
        type: string
      - description: 'Field value for filtering (ex: default-alibaba-ap-northeast-1-vpc)'
        in: query
        name: filterVal
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given option param
          schema:
            allOf:
            - $ref: '#/definitions/mci.JSONResult'
            - properties:
                '[DEFAULT]':
                  $ref: '#/definitions/mci.RestGetAllNLBResponse'
                '[ID]':
                  $ref: '#/definitions/common.IdList'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all NLBs or NLBs' ID
      tags:
      - '[Infra resource] NLB management'
    post:
      consumes:
      - application/json
      description: Create NLB
      operationId: PostNLB
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: 'Option: [required params for register] connectionName, name,
          cspNLBId'
        enum:
        - register
        in: query
        name: option
        type: string
      - description: Details of the NLB object
        in: body
        name: nlbReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbNLBReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbNLBInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create NLB
      tags:
      - '[Infra resource] NLB management'
  /ns/{nsId}/mci/{mciId}/nlb/{nlbId}:
    delete:
      consumes:
      - application/json
      description: Delete NLB
      operationId: DelNLB
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: NLB ID
        in: path
        name: nlbId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete NLB
      tags:
      - '[Infra resource] NLB management'
    get:
      consumes:
      - application/json
      description: Get NLB
      operationId: GetNLB
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1
        description: NLB ID
        in: path
        name: nlbId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbNLBInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get NLB
      tags:
      - '[Infra resource] NLB management'
  /ns/{nsId}/mci/{mciId}/nlb/{nlbId}/healthz:
    get:
      consumes:
      - application/json
      description: Get NLB Health
      operationId: GetNLBHealth
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1
        description: NLB ID
        in: path
        name: nlbId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbNLBInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get NLB Health
      tags:
      - '[Infra resource] NLB management'
  /ns/{nsId}/mci/{mciId}/nlb/{nlbId}/vm:
    delete:
      consumes:
      - application/json
      description: Delete VMs from NLB
      operationId: RemoveNLBVMs
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1
        description: NLB ID
        in: path
        name: nlbId
        required: true
        type: string
      - description: VMs to add to NLB
        in: body
        name: nlbAddRemoveVMReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbNLBAddRemoveVMReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete VMs from NLB
      tags:
      - '[Infra resource] NLB management (for developer)'
    post:
      consumes:
      - application/json
      description: Add VMs to NLB
      operationId: AddNLBVMs
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1
        description: NLB ID
        in: path
        name: nlbId
        required: true
        type: string
      - description: VMs to add to NLB
        in: body
        name: nlbAddRemoveVMReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbNLBAddRemoveVMReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbNLBInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Add VMs to NLB
      tags:
      - '[Infra resource] NLB management (for developer)'
  /ns/{nsId}/mci/{mciId}/site:
    get:
      consumes:
      - application/json
      description: Get sites in MCI
      operationId: GetSitesInMci
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SitesInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get sites in MCI
      tags:
      - '[VPN] Sites in MCI'
  /ns/{nsId}/mci/{mciId}/subgroup:
    get:
      consumes:
      - application/json
      description: List SubGroup IDs in a specified MCI
      operationId: GetMciGroupIds
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List SubGroup IDs in a specified MCI
      tags:
      - '[MC-Infra] MCI Provisioning management'
  /ns/{nsId}/mci/{mciId}/subgroup/{subgroupId}:
    get:
      consumes:
      - application/json
      description: List VMs with a SubGroup label in a specified MCI
      operationId: GetMciGroupVms
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1
        description: subGroup ID
        in: path
        name: subgroupId
        required: true
        type: string
      - description: Option
        enum:
        - id
        in: query
        name: option
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List VMs with a SubGroup label in a specified MCI
      tags:
      - '[MC-Infra] MCI Provisioning management'
    post:
      consumes:
      - application/json
      description: ScaleOut subGroup in specified MCI
      operationId: PostMciSubGroupScaleOut
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1
        description: subGroup ID
        in: path
        name: subgroupId
        required: true
        type: string
      - description: subGroup scaleOut request
        in: body
        name: vmReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbScaleOutSubGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbMciInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: ScaleOut subGroup in specified MCI
      tags:
      - '[MC-Infra] MCI Provisioning management'
  /ns/{nsId}/mci/{mciId}/vm:
    post:
      consumes:
      - application/json
      description: Create and add homogeneous VMs(subGroup) to a specified MCI (Set
        subGroupSize for multiple VMs)
      operationId: PostMciVm
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: Details for VMs(subGroup)
        in: body
        name: vmReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbVmReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbMciInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create and add homogeneous VMs(subGroup) to a specified MCI (Set subGroupSize
        for multiple VMs)
      tags:
      - '[MC-Infra] MCI Provisioning management'
  /ns/{nsId}/mci/{mciId}/vm/{targetVmId}/bastion:
    get:
      consumes:
      - application/json
      description: Get bastion nodes for a VM
      operationId: GetBastionNodes
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1-1
        description: Target VM ID
        in: path
        name: targetVmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/mcir.BastionNode'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get bastion nodes for a VM
      tags:
      - '[MC-Infra] MCI Remote command'
  /ns/{nsId}/mci/{mciId}/vm/{targetVmId}/bastion/{bastionVmId}:
    put:
      consumes:
      - application/json
      description: Set bastion nodes for a VM
      operationId: SetBastionNodes
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1-1
        description: Target VM ID
        in: path
        name: targetVmId
        required: true
        type: string
      - default: g1-1
        description: Bastion VM ID
        in: path
        name: bastionVmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Set bastion nodes for a VM
      tags:
      - '[MC-Infra] MCI Remote command'
  /ns/{nsId}/mci/{mciId}/vm/{vmId}:
    delete:
      consumes:
      - application/json
      description: Delete VM in specified MCI
      operationId: DelMciVm
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1-1
        description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      - description: Option for delete VM (support force delete)
        enum:
        - force
        in: query
        name: option
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete VM in specified MCI
      tags:
      - '[MC-Infra] MCI Provisioning management'
    get:
      consumes:
      - application/json
      description: Get VM in specified MCI
      operationId: GetMciVm
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1-1
        description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      - description: Option for MCI
        enum:
        - default
        - status
        - idsInDetail
        in: query
        name: option
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given option param
          schema:
            allOf:
            - $ref: '#/definitions/mci.JSONResult'
            - properties:
                '[DEFAULT]':
                  $ref: '#/definitions/mci.TbVmInfo'
                '[IDNAME]':
                  $ref: '#/definitions/mci.TbIdNameInDetailInfo'
                '[STATUS]':
                  $ref: '#/definitions/mci.TbVmStatusInfo'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get VM in specified MCI
      tags:
      - '[MC-Infra] MCI Provisioning management'
  /ns/{nsId}/mci/{mciId}/vm/{vmId}/dataDisk:
    get:
      consumes:
      - application/json
      description: Get available dataDisks for a VM
      operationId: GetVmDataDisk
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1-1
        description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given option param
          schema:
            allOf:
            - $ref: '#/definitions/mcir.JSONResult'
            - properties:
                '[DEFAULT]':
                  $ref: '#/definitions/mcir.RestGetAllDataDiskResponse'
                '[ID]':
                  $ref: '#/definitions/common.IdList'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get available dataDisks for a VM
      tags:
      - '[Infra resource] MCIR Data Disk management'
    post:
      consumes:
      - application/json
      description: Provisioning (Create and attach) dataDisk
      operationId: PostVmDataDisk
      parameters:
      - description: Details for an Data Disk object
        in: body
        name: dataDiskInfo
        required: true
        schema:
          $ref: '#/definitions/mcir.TbDataDiskVmReq'
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1-1
        description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbVmInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Provisioning (Create and attach) dataDisk
      tags:
      - '[Infra resource] MCIR Data Disk management'
    put:
      consumes:
      - application/json
      description: Attach/Detach available dataDisk
      operationId: PutVmDataDisk
      parameters:
      - description: Request body to attach/detach dataDisk
        in: body
        name: attachDetachDataDiskReq
        schema:
          $ref: '#/definitions/mcir.TbAttachDetachDataDiskReq'
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1-1
        description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      - description: Option for MCI
        enum:
        - attach
        - detach
        in: query
        name: option
        required: true
        type: string
      - description: Force to attach/detach even if VM info is not matched
        enum:
        - "true"
        - "false"
        in: query
        name: force
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbVmInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Attach/Detach available dataDisk
      tags:
      - '[Infra resource] MCIR Data Disk management'
  /ns/{nsId}/mci/{mciId}/vm/{vmId}/snapshot:
    post:
      consumes:
      - application/json
      description: Snapshot VM and create a Custom Image Object using the Snapshot
      operationId: PostMciVmSnapshot
      parameters:
      - description: Request body to create VM snapshot
        in: body
        name: vmSnapshotReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbVmSnapshotReq'
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: g1-1
        description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbCustomImageInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Snapshot VM and create a Custom Image Object using the Snapshot
      tags:
      - '[Infra resource] Snapshot and Custom Image Management'
  /ns/{nsId}/mci/{mciId}/vmDynamic:
    post:
      consumes:
      - application/json
      description: Create VM Dynamically and add it to MCI
      operationId: PostMciVmDynamic
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: Details for Vm dynamic request
        in: body
        name: vmReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbVmDynamicReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbMciInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create VM Dynamically and add it to MCI
      tags:
      - '[MC-Infra] MCI Provisioning management'
  /ns/{nsId}/mci/{mciId}/vpn/{vpnId}:
    get:
      consumes:
      - application/json
      description: Get resource info of a site-to-site VPN (Currently, GCP-AWS is
        supported)
      operationId: GetSiteToSiteVpn
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: vpn01
        description: VPN ID
        in: path
        name: vpnId
        required: true
        type: string
      - default: refined
        description: Resource info by detail (refined, raw)
        in: query
        name: detail
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get resource info of a site-to-site VPN (Currently, GCP-AWS is supported)
      tags:
      - '[VPN] Site-to-site VPN (under development)'
  /ns/{nsId}/mci/{mciId}/vpn/{vpnId}/request/{requestId}:
    get:
      consumes:
      - application/json
      description: Check the status of a specific request by its ID
      operationId: GetRequestStatusOfSiteToSiteVpn
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: vpn01
        description: VPN ID
        in: path
        name: vpnId
        required: true
        type: string
      - description: Request ID
        in: path
        name: requestId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/model.Response'
      summary: Check the status of a specific request by its ID
      tags:
      - '[VPN] Site-to-site VPN (under development)'
  /ns/{nsId}/mciDynamic:
    post:
      consumes:
      - application/json
      description: Create MCI Dynamically from common spec and image
      operationId: PostMciDynamic
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: 'Request body to provision MCI dynamically. Must include commonSpec
          and commonImage info of each VM request.(ex: {name: mci01,vm: [{commonImage:
          aws+ap-northeast-2+ubuntu22.04,commonSpec: aws+ap-northeast-2+t2.small}]}
          ) You can use /mciRecommendVm and /mciDynamicCheckRequest to get it) Check
          the guide: https://github.com/cloud-barista/cb-tumblebug/discussions/1570'
        in: body
        name: mciReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbMciDynamicReq'
      - description: Option for MCI creation
        enum:
        - hold
        in: query
        name: option
        type: string
      - description: Custom request ID
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbMciInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create MCI Dynamically
      tags:
      - '[MC-Infra] MCI Provisioning management'
  /ns/{nsId}/monitoring/install/mci/{mciId}:
    post:
      consumes:
      - application/json
      description: Install monitoring agent (CB-Dragonfly agent) to MCI
      operationId: PostInstallMonitorAgentToMci
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: Details for an MCI object
        in: body
        name: mciInfo
        required: true
        schema:
          $ref: '#/definitions/mci.MciCmdReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.AgentInstallContentWrapper'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Install monitoring agent (CB-Dragonfly agent) to MCI
      tags:
      - '[MC-Infra] MCI Resource monitor (for developer)'
  /ns/{nsId}/monitoring/mci/{mciId}/metric/{metric}:
    get:
      consumes:
      - application/json
      description: Get monitoring data of specified MCI for specified monitoring metric
        (cpu, memory, disk, network)
      operationId: GetMonitorData
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: 'Metric type: cpu, memory, disk, network'
        in: path
        name: metric
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.MonResultSimpleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get monitoring data of specified MCI for specified monitoring metric
        (cpu, memory, disk, network)
      tags:
      - '[MC-Infra] MCI Resource monitor (for developer)'
  /ns/{nsId}/monitoring/status/mci/{mciId}/vm/{vmId}:
    put:
      consumes:
      - application/json
      description: Set monitoring agent (CB-Dragonfly agent) installation status installed
        (for Windows VM only)
      operationId: PutMonitorAgentStatusInstalled
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: vm01
        description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbVmInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Set monitoring agent (CB-Dragonfly agent) installation status installed
        (for Windows VM only)
      tags:
      - '[MC-Infra] MCI Resource monitor (for developer)'
  /ns/{nsId}/policy/mci:
    delete:
      consumes:
      - application/json
      description: Delete all MCI policies
      operationId: DelAllMciPolicy
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all MCI policies
      tags:
      - '[MC-Infra] MCI Auto control policy management (WIP)'
    get:
      consumes:
      - application/json
      description: List all MCI policies
      operationId: GetAllMciPolicy
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.RestGetAllMciPolicyResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all MCI policies
      tags:
      - '[MC-Infra] MCI Auto control policy management (WIP)'
  /ns/{nsId}/policy/mci/{mciId}:
    delete:
      consumes:
      - application/json
      description: Delete MCI Policy
      operationId: DelMciPolicy
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete MCI Policy
      tags:
      - '[MC-Infra] MCI Auto control policy management (WIP)'
    get:
      consumes:
      - application/json
      description: Get MCI Policy
      operationId: GetMciPolicy
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.MciPolicyInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get MCI Policy
      tags:
      - '[MC-Infra] MCI Auto control policy management (WIP)'
    post:
      consumes:
      - application/json
      description: Create MCI Automation policy
      operationId: PostMciPolicy
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - description: Details for an MCI automation policy request
        in: body
        name: mciPolicyReq
        required: true
        schema:
          $ref: '#/definitions/mci.MciPolicyReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.MciPolicyInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create MCI Automation policy
      tags:
      - '[MC-Infra] MCI Auto control policy management (WIP)'
  /ns/{nsId}/registerCspVm:
    post:
      consumes:
      - application/json
      description: Register existing VM in a CSP to Cloud-Barista MCI
      operationId: PostRegisterCSPNativeVM
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Details for an MCI object with existing CSP VM ID
        in: body
        name: mciReq
        required: true
        schema:
          $ref: '#/definitions/mci.TbMciReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbMciInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Register existing VM in a CSP to Cloud-Barista MCI
      tags:
      - '[MC-Infra] MCI Provisioning management'
  /ns/{nsId}/resources/customImage:
    delete:
      consumes:
      - application/json
      description: Delete all customImages
      operationId: DelAllCustomImage
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: ""
        description: Delete resources containing matched ID-substring only
        in: query
        name: match
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all customImages
      tags:
      - '[Infra resource] Snapshot and Custom Image Management'
    get:
      consumes:
      - application/json
      description: List all customImages or customImages' ID
      operationId: GetAllCustomImage
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Option
        enum:
        - id
        in: query
        name: option
        type: string
      - description: Field key for filtering (ex:guestOS)
        in: query
        name: filterKey
        type: string
      - description: 'Field value for filtering (ex: Ubuntu18.04)'
        in: query
        name: filterVal
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given option param
          schema:
            allOf:
            - $ref: '#/definitions/mcir.JSONResult'
            - properties:
                '[DEFAULT]':
                  $ref: '#/definitions/mcir.RestGetAllCustomImageResponse'
                '[ID]':
                  $ref: '#/definitions/common.IdList'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all customImages or customImages' ID
      tags:
      - '[Infra resource] Snapshot and Custom Image Management'
    post:
      consumes:
      - application/json
      description: Register existing Custom Image in a CSP (option=register)
      operationId: PostCustomImage
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: 'Option: '
        enum:
        - register
        in: query
        name: option
        required: true
        type: string
      - description: Request to Register existing Custom Image in a CSP
        in: body
        name: customImageRegisterReq
        required: true
        schema:
          $ref: '#/definitions/mcir.TbCustomImageReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbCustomImageInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Register existing Custom Image in a CSP
      tags:
      - '[Infra resource] Snapshot and Custom Image Management'
  /ns/{nsId}/resources/customImage/{customImageId}:
    delete:
      consumes:
      - application/json
      description: Delete customImage
      operationId: DelCustomImage
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: customImage ID
        in: path
        name: customImageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete customImage
      tags:
      - '[Infra resource] Snapshot and Custom Image Management'
    get:
      consumes:
      - application/json
      description: Get customImage
      operationId: GetCustomImage
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: customImage ID
        in: path
        name: customImageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbCustomImageInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get customImage
      tags:
      - '[Infra resource] Snapshot and Custom Image Management'
  /ns/{nsId}/resources/dataDisk:
    delete:
      consumes:
      - application/json
      description: Delete all Data Disks
      operationId: DelAllDataDisk
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: ""
        description: Delete resources containing matched ID-substring only
        in: query
        name: match
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all Data Disks
      tags:
      - '[Infra resource] MCIR Data Disk management'
    get:
      consumes:
      - application/json
      description: List all Data Disks or Data Disks' ID
      operationId: GetAllDataDisk
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Option
        enum:
        - id
        in: query
        name: option
        type: string
      - description: 'Field key for filtering (ex: systemLabel)'
        in: query
        name: filterKey
        type: string
      - description: 'Field value for filtering (ex: Registered from CSP resource)'
        in: query
        name: filterVal
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given option param
          schema:
            allOf:
            - $ref: '#/definitions/mcir.JSONResult'
            - properties:
                '[DEFAULT]':
                  $ref: '#/definitions/mcir.RestGetAllDataDiskResponse'
                '[ID]':
                  $ref: '#/definitions/common.IdList'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all Data Disks or Data Disks' ID
      tags:
      - '[Infra resource] MCIR Data Disk management'
    post:
      consumes:
      - application/json
      description: Create Data Disk
      operationId: PostDataDisk
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: 'Option: '
        enum:
        - register
        in: query
        name: option
        type: string
      - description: Details for an Data Disk object
        in: body
        name: dataDiskInfo
        required: true
        schema:
          $ref: '#/definitions/mcir.TbDataDiskReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbDataDiskInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create Data Disk
      tags:
      - '[Infra resource] MCIR Data Disk management'
  /ns/{nsId}/resources/dataDisk/{dataDiskId}:
    delete:
      consumes:
      - application/json
      description: Delete Data Disk
      operationId: DelDataDisk
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Data Disk ID
        in: path
        name: dataDiskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete Data Disk
      tags:
      - '[Infra resource] MCIR Data Disk management'
    get:
      consumes:
      - application/json
      description: Get Data Disk
      operationId: GetDataDisk
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Data Disk ID
        in: path
        name: dataDiskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbDataDiskInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get Data Disk
      tags:
      - '[Infra resource] MCIR Data Disk management'
    put:
      consumes:
      - application/json
      description: Upsize Data Disk
      operationId: PutDataDisk
      parameters:
      - description: Request body to upsize the dataDisk
        in: body
        name: dataDiskUpsizeReq
        required: true
        schema:
          $ref: '#/definitions/mcir.TbDataDiskUpsizeReq'
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: DataDisk ID
        in: path
        name: dataDiskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbDataDiskInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Upsize Data Disk
      tags:
      - '[Infra resource] MCIR Data Disk management'
  /ns/{nsId}/resources/fetchImages:
    post:
      consumes:
      - application/json
      description: Fetch images
      operationId: FetchImages
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Fetch images
      tags:
      - '[Infra resource] MCIR Image management'
  /ns/{nsId}/resources/fetchSpecs:
    post:
      consumes:
      - application/json
      description: Fetch specs
      operationId: FetchSpecs
      parameters:
      - default: system
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Fetch specs
      tags:
      - '[Infra resource] MCIR Spec management'
  /ns/{nsId}/resources/filterSpecsByRange:
    post:
      consumes:
      - application/json
      description: Filter specs by range
      operationId: FilterSpecsByRange
      parameters:
      - default: system
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Filter for range-filtering specs
        in: body
        name: specRangeFilter
        schema:
          $ref: '#/definitions/mcir.FilterSpecsByRangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.RestFilterSpecsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Filter specs by range
      tags:
      - '[Infra resource] MCIR Spec management'
  /ns/{nsId}/resources/image:
    delete:
      consumes:
      - application/json
      description: Delete all images
      operationId: DelAllImage
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: ""
        description: Delete resources containing matched ID-substring only
        in: query
        name: match
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all images
      tags:
      - '[Infra resource] MCIR Image management'
    get:
      consumes:
      - application/json
      description: List all images or images' ID
      operationId: GetAllImage
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Option
        enum:
        - id
        in: query
        name: option
        type: string
      - description: Field key for filtering (ex:guestOS)
        in: query
        name: filterKey
        type: string
      - description: 'Field value for filtering (ex: Ubuntu18.04)'
        in: query
        name: filterVal
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given option param
          schema:
            allOf:
            - $ref: '#/definitions/mcir.JSONResult'
            - properties:
                '[DEFAULT]':
                  $ref: '#/definitions/mcir.RestGetAllImageResponse'
                '[ID]':
                  $ref: '#/definitions/common.IdList'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all images or images' ID
      tags:
      - '[Infra resource] MCIR Image management'
    post:
      consumes:
      - application/json
      description: Register image
      operationId: PostImage
      parameters:
      - description: registeringMethod
        enum:
        - registerWithInfo
        - registerWithId
        in: query
        name: action
        required: true
        type: string
      - default: system
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Specify details of a image object (cspImageName, guestOS, description,
          ...) manually
        in: body
        name: imageInfo
        schema:
          $ref: '#/definitions/mcir.TbImageInfo'
      - description: Specify name, connectionName and cspImageId to register an image
          object automatically
        in: body
        name: imageId
        schema:
          $ref: '#/definitions/mcir.TbImageReq'
      - default: false
        description: Force update to existing image object
        in: query
        name: update
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbImageInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Register image
      tags:
      - '[Infra resource] MCIR Image management'
  /ns/{nsId}/resources/image/{imageId}:
    delete:
      consumes:
      - application/json
      description: Delete image
      operationId: DelImage
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Image ID ({providerName}+{regionName}+{imageName})
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete image
      tags:
      - '[Infra resource] MCIR Image management'
    get:
      consumes:
      - application/json
      description: Get image
      operationId: GetImage
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Image ID ({providerName}+{regionName}+{imageName})
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbImageInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get image
      tags:
      - '[Infra resource] MCIR Image management'
    put:
      consumes:
      - application/json
      description: Update image
      operationId: PutImage
      parameters:
      - description: Details for an image object
        in: body
        name: imageInfo
        required: true
        schema:
          $ref: '#/definitions/mcir.TbImageInfo'
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Image ID ({providerName}+{regionName}+{imageName})
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbImageInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Update image
      tags:
      - '[Infra resource] MCIR Image management'
  /ns/{nsId}/resources/searchImage:
    post:
      consumes:
      - application/json
      description: Search image
      operationId: SearchImage
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Keywords
        in: body
        name: keywords
        required: true
        schema:
          $ref: '#/definitions/mcir.RestSearchImageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.RestGetAllImageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Search image
      tags:
      - '[Infra resource] MCIR Image management'
  /ns/{nsId}/resources/securityGroup:
    delete:
      consumes:
      - application/json
      description: Delete all Security Groups
      operationId: DelAllSecurityGroup
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: ""
        description: Delete resources containing matched ID-substring only
        in: query
        name: match
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all Security Groups
      tags:
      - '[Infra resource] MCIR Security group management'
    get:
      consumes:
      - application/json
      description: List all Security Groups or Security Groups' ID
      operationId: GetAllSecurityGroup
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Option
        enum:
        - id
        in: query
        name: option
        type: string
      - description: 'Field key for filtering (ex: systemLabel)'
        in: query
        name: filterKey
        type: string
      - description: 'Field value for filtering (ex: Registered from CSP resource)'
        in: query
        name: filterVal
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given option param
          schema:
            allOf:
            - $ref: '#/definitions/mcir.JSONResult'
            - properties:
                '[DEFAULT]':
                  $ref: '#/definitions/mcir.RestGetAllSecurityGroupResponse'
                '[ID]':
                  $ref: '#/definitions/common.IdList'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all Security Groups or Security Groups' ID
      tags:
      - '[Infra resource] MCIR Security group management'
    post:
      consumes:
      - application/json
      description: Create Security Group
      operationId: PostSecurityGroup
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: 'Option: [required params for register] connectionName, name,
          vNetId, cspSecurityGroupId'
        enum:
        - register
        in: query
        name: option
        type: string
      - description: Details for an securityGroup object
        in: body
        name: securityGroupReq
        required: true
        schema:
          $ref: '#/definitions/mcir.TbSecurityGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSecurityGroupInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create Security Group
      tags:
      - '[Infra resource] MCIR Security group management'
  /ns/{nsId}/resources/securityGroup/{securityGroupId}:
    delete:
      consumes:
      - application/json
      description: Delete Security Group
      operationId: DelSecurityGroup
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Security Group ID
        in: path
        name: securityGroupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete Security Group
      tags:
      - '[Infra resource] MCIR Security group management'
    get:
      consumes:
      - application/json
      description: Get Security Group
      operationId: GetSecurityGroup
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Security Group ID
        in: path
        name: securityGroupId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSecurityGroupInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get Security Group
      tags:
      - '[Infra resource] MCIR Security group management'
  /ns/{nsId}/resources/securityGroup/{securityGroupId}/rules:
    delete:
      consumes:
      - application/json
      description: Delete FirewallRules
      operationId: DelFirewallRules
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: FirewallRules to delete
        in: body
        name: firewallRuleReq
        required: true
        schema:
          $ref: '#/definitions/mcir.TbFirewallRulesWrapper'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSecurityGroupInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete FirewallRules
      tags:
      - '[Infra resource] MCIR Security group management'
    post:
      consumes:
      - application/json
      description: Create FirewallRules
      operationId: PostFirewallRules
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: FirewallRules to create
        in: body
        name: firewallRuleReq
        required: true
        schema:
          $ref: '#/definitions/mcir.TbFirewallRulesWrapper'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSecurityGroupInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create FirewallRules
      tags:
      - '[Infra resource] MCIR Security group management'
  /ns/{nsId}/resources/spec:
    post:
      consumes:
      - application/json
      description: Register spec
      operationId: PostSpec
      parameters:
      - description: registeringMethod
        enum:
        - registerWithInfo
        - registerWithCspSpecName
        in: query
        name: action
        required: true
        type: string
      - default: system
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Specify details of a spec object (vCPU, memoryGiB, ...) manually
        in: body
        name: specInfo
        schema:
          $ref: '#/definitions/mcir.TbSpecInfo'
      - description: Specify name, connectionName and cspSpecName to register a spec
          object automatically
        in: body
        name: specName
        schema:
          $ref: '#/definitions/mcir.TbSpecReq'
      - default: false
        description: Force update to existing spec object
        in: query
        name: update
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSpecInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Register spec
      tags:
      - '[Infra resource] MCIR Spec management'
  /ns/{nsId}/resources/spec/{specId}:
    delete:
      consumes:
      - application/json
      description: Delete spec
      operationId: DelSpec
      parameters:
      - default: system
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Spec ID ({providerName}+{regionName}+{specName})
        in: path
        name: specId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete spec
      tags:
      - '[Infra resource] MCIR Spec management'
    get:
      consumes:
      - application/json
      description: Get spec
      operationId: GetSpec
      parameters:
      - default: system
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Spec ID ({providerName}+{regionName}+{specName})
        in: path
        name: specId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSpecInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get spec
      tags:
      - '[Infra resource] MCIR Spec management'
    put:
      consumes:
      - application/json
      description: Update spec
      operationId: PutSpec
      parameters:
      - description: Details for an spec object
        in: body
        name: specInfo
        required: true
        schema:
          $ref: '#/definitions/mcir.TbSpecInfo'
      - default: system
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Spec ID ({providerName}+{regionName}+{specName})
        in: path
        name: specId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSpecInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Update spec
      tags:
      - '[Infra resource] MCIR Spec management'
  /ns/{nsId}/resources/sshKey:
    delete:
      consumes:
      - application/json
      description: Delete all SSH Keys
      operationId: DelAllSshKey
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: ""
        description: Delete resources containing matched ID-substring only
        in: query
        name: match
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all SSH Keys
      tags:
      - '[Infra resource] MCIR Access key management'
    get:
      consumes:
      - application/json
      description: List all SSH Keys or SSH Keys' ID
      operationId: GetAllSshKey
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Option
        enum:
        - id
        in: query
        name: option
        type: string
      - description: 'Field key for filtering (ex: systemLabel)'
        in: query
        name: filterKey
        type: string
      - description: 'Field value for filtering (ex: Registered from CSP resource)'
        in: query
        name: filterVal
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given option param
          schema:
            allOf:
            - $ref: '#/definitions/mcir.JSONResult'
            - properties:
                '[DEFAULT]':
                  $ref: '#/definitions/mcir.RestGetAllSshKeyResponse'
                '[ID]':
                  $ref: '#/definitions/common.IdList'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all SSH Keys or SSH Keys' ID
      tags:
      - '[Infra resource] MCIR Access key management'
    post:
      consumes:
      - application/json
      description: Create SSH Key
      operationId: PostSshKey
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: 'Option: [required params for register] connectionName, name,
          cspSshKeyId, fingerprint, username, publicKey, privateKey'
        enum:
        - register
        in: query
        name: option
        type: string
      - description: Details for an SSH Key object
        in: body
        name: sshKeyInfo
        required: true
        schema:
          $ref: '#/definitions/mcir.TbSshKeyReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSshKeyInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create SSH Key
      tags:
      - '[Infra resource] MCIR Access key management'
  /ns/{nsId}/resources/sshKey/{sshKeyId}:
    delete:
      consumes:
      - application/json
      description: Delete SSH Key
      operationId: DelSshKey
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: SSH Key ID
        in: path
        name: sshKeyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete SSH Key
      tags:
      - '[Infra resource] MCIR Access key management'
    get:
      consumes:
      - application/json
      description: Get SSH Key
      operationId: GetSshKey
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: SSH Key ID
        in: path
        name: sshKeyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSshKeyInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get SSH Key
      tags:
      - '[Infra resource] MCIR Access key management'
    put:
      consumes:
      - application/json
      description: Update SSH Key
      operationId: PutSshKey
      parameters:
      - description: Details for an SSH Key object
        in: body
        name: sshKeyInfo
        required: true
        schema:
          $ref: '#/definitions/mcir.TbSshKeyInfo'
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: SshKey ID
        in: path
        name: sshKeyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSshKeyInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Update SSH Key
      tags:
      - '[Infra resource] MCIR Access key management'
  /ns/{nsId}/resources/vNet:
    delete:
      consumes:
      - application/json
      description: Delete all VNets
      operationId: DelAllVNet
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: ""
        description: Delete resources containing matched ID-substring only
        in: query
        name: match
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all VNets
      tags:
      - '[Infra resource] MCIR Network management'
    get:
      consumes:
      - application/json
      description: List all VNets or VNets' ID
      operationId: GetAllVNet
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Option
        enum:
        - id
        in: query
        name: option
        type: string
      - description: 'Field key for filtering (ex: cspVNetName)'
        in: query
        name: filterKey
        type: string
      - description: 'Field value for filtering (ex: default-alibaba-ap-northeast-1-vpc)'
        in: query
        name: filterVal
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given option param
          schema:
            allOf:
            - $ref: '#/definitions/mcir.JSONResult'
            - properties:
                '[DEFAULT]':
                  $ref: '#/definitions/mcir.RestGetAllVNetResponse'
                '[ID]':
                  $ref: '#/definitions/common.IdList'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all VNets or VNets' ID
      tags:
      - '[Infra resource] MCIR Network management'
    post:
      consumes:
      - application/json
      description: Create VNet
      operationId: PostVNet
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: 'Option: [required params for register] connectionName, name,
          cspVNetId'
        enum:
        - register
        in: query
        name: option
        type: string
      - description: Details for an VNet object
        in: body
        name: vNetReq
        required: true
        schema:
          $ref: '#/definitions/mcir.TbVNetReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbVNetInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create VNet
      tags:
      - '[Infra resource] MCIR Network management'
  /ns/{nsId}/resources/vNet/{vNetId}:
    delete:
      consumes:
      - application/json
      description: Delete VNet
      operationId: DelVNet
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: VNet ID
        in: path
        name: vNetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete VNet
      tags:
      - '[Infra resource] MCIR Network management'
    get:
      consumes:
      - application/json
      description: Get VNet
      operationId: GetVNet
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: VNet ID
        in: path
        name: vNetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbVNetInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get VNet
      tags:
      - '[Infra resource] MCIR Network management'
  /ns/{nsId}/resources/vNet/{vNetId}/subnet:
    post:
      consumes:
      - application/json
      description: Create Subnet
      operationId: PostSubnet
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: VNet ID
        in: path
        name: vNetId
        required: true
        type: string
      - description: Details for an Subnet object
        in: body
        name: subnetReq
        required: true
        schema:
          $ref: '#/definitions/mcir.TbSubnetReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mcir.TbSubnetInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create Subnet
      tags:
      - '[Infra resource] MCIR Network management'
  /ns/{nsId}/resources/vNet/{vNetId}/subnet/{subnetId}:
    delete:
      consumes:
      - application/json
      description: Delete Subnet
      operationId: DelSubnet
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: VNet ID
        in: path
        name: vNetId
        required: true
        type: string
      - description: Subnet ID
        in: path
        name: subnetId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete Subnet
      tags:
      - '[Infra resource] MCIR Network management'
  /object:
    delete:
      consumes:
      - application/json
      description: Delete an object
      operationId: DeleteObject
      parameters:
      - description: delete object value by key
        in: query
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete an object
      tags:
      - '[Admin] System management'
    get:
      consumes:
      - application/json
      description: Get value of an object
      operationId: GetObject
      parameters:
      - description: get object value by key
        in: query
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get value of an object
      tags:
      - '[Admin] System management'
  /objects:
    delete:
      consumes:
      - application/json
      description: Delete child objects along with the given object
      operationId: DeleteObjects
      parameters:
      - description: Delete child objects based on the given key string
        in: query
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete child objects along with the given object
      tags:
      - '[Admin] System management'
    get:
      consumes:
      - application/json
      description: List all objects for a given key
      operationId: GetObjects
      parameters:
      - description: retrieve objects by key
        in: query
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all objects for a given key
      tags:
      - '[Admin] System management'
  /provider:
    get:
      consumes:
      - application/json
      description: List all registered Providers
      operationId: GetProviderList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.IdList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all registered Providers
      tags:
      - '[Admin] Multi-Cloud environment configuration'
  /provider/{providerName}/region/{regionName}:
    get:
      consumes:
      - application/json
      description: Get registered region info
      operationId: GetRegion
      parameters:
      - description: Name of the CSP to retrieve
        in: path
        name: providerName
        required: true
        type: string
      - description: Name of region to retrieve
        in: path
        name: regionName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.RegionDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get registered region info
      tags:
      - '[Admin] Multi-Cloud environment configuration'
  /readyz:
    get:
      consumes:
      - application/json
      description: Check Tumblebug is ready
      operationId: GetReadyz
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Check Tumblebug is ready
      tags:
      - '[Admin] System management'
  /region:
    get:
      consumes:
      - application/json
      description: List all registered regions
      operationId: GetRegionList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.RegionList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all registered regions
      tags:
      - '[Admin] Multi-Cloud environment configuration'
  /registerCspResources:
    post:
      consumes:
      - application/json
      description: Register CSP Native Resources (vNet, securityGroup, sshKey, vm)
        to CB-Tumblebug
      operationId: RegisterCspNativeResources
      parameters:
      - description: Specify connectionName, NS Id, and MCI Name
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/common.RestRegisterCspNativeResourcesRequest'
      - description: Option to specify resourceType
        enum:
        - onlyVm
        - exceptVm
        in: query
        name: option
        type: string
      - default: "y"
        description: Flag to show VMs in a collective MCI form (y,n)
        enum:
        - "y"
        - "n"
        in: query
        name: mciFlag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.RegisterResourceResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Register CSP Native Resources (vNet, securityGroup, sshKey, vm) to
        CB-Tumblebug
      tags:
      - '[Admin] System management'
  /registerCspResourcesAll:
    post:
      consumes:
      - application/json
      description: Register CSP Native Resources (vNet, securityGroup, sshKey, vm)
        from all Clouds to CB-Tumblebug
      operationId: RegisterCspNativeResourcesAll
      parameters:
      - description: Specify NS Id and MCI Name
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/common.RestRegisterCspNativeResourcesRequestAll'
      - description: Option to specify resourceType
        enum:
        - onlyVm
        - exceptVm
        in: query
        name: option
        type: string
      - default: "y"
        description: Flag to show VMs in a collective MCI form (y,n)
        enum:
        - "y"
        - "n"
        in: query
        name: mciFlag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.RegisterResourceAllResult'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Register CSP Native Resources (vNet, securityGroup, sshKey, vm) from
        all Clouds to CB-Tumblebug
      tags:
      - '[Admin] System management'
  /request/{reqId}:
    delete:
      consumes:
      - application/json
      description: Delete details of a specific request
      operationId: DeleteRequest
      parameters:
      - description: Request ID to delete
        in: path
        name: reqId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete a specific request's details
      tags:
      - '[Admin] Request tracking'
    get:
      consumes:
      - application/json
      description: Get details of a specific request
      operationId: GetRequest
      parameters:
      - description: Request ID acquired from X-Request-ID header
        in: path
        name: reqId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.RequestDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get request details
      tags:
      - '[Admin] Request tracking'
  /requests:
    delete:
      consumes:
      - application/json
      description: Delete details of all requests
      operationId: DeleteAllRequests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all requests' details
      tags:
      - '[Admin] Request tracking'
    get:
      consumes:
      - application/json
      description: Get details of all requests with optional filters.
      operationId: GetAllRequests
      parameters:
      - description: Filter by request status (Handling, Error, Success)
        in: query
        name: status
        type: string
      - description: Filter by HTTP method (GET, POST, etc.)
        in: query
        name: method
        type: string
      - description: Filter by request URL
        in: query
        name: url
        type: string
      - description: Filter by time in minutes from now (to get recent requests)
        in: query
        name: time
        type: string
      - description: Option to save the results to a file (set 'true' to activate)
        in: query
        name: savefile
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/common.RequestDetails'
              type: array
            type: object
      summary: Get all requests
      tags:
      - '[Admin] Request tracking'
  /stream-response/ns/{nsId}/mci/{mciId}/vpn/{vpnId}:
    delete:
      consumes:
      - application/json
      description: Delete a site-to-site VPN (Currently, GCP-AWS is supported)
      operationId: DeleteSiteToSiteVpn
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: vpn01
        description: VPN ID
        in: path
        name: vpnId
        required: true
        type: string
      produces:
      - application/x-json-stream
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete a site-to-site VPN (Currently, GCP-AWS is supported)
      tags:
      - '[VPN] Site-to-site VPN (under development)'
    post:
      consumes:
      - application/json
      description: Create a site-to-site VPN (Currently, GCP-AWS is supported)
      operationId: PostSiteToSiteVpn
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: vpn01
        description: VPN ID
        in: path
        name: vpnId
        required: true
        type: string
      - description: Sites info for VPN configuration
        in: body
        name: vpnReq
        required: true
        schema:
          $ref: '#/definitions/model.RestPostVpnRequest'
      produces:
      - application/x-json-stream
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create a site-to-site VPN (Currently, GCP-AWS is supported)
      tags:
      - '[VPN] Site-to-site VPN (under development)'
    put:
      consumes:
      - application/json
      description: (To be provided) Update a site-to-site VPN
      operationId: PutSiteToSiteVpn
      parameters:
      - default: default
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mci01
        description: MCI ID
        in: path
        name: mciId
        required: true
        type: string
      - default: vpn01
        description: VPN ID
        in: path
        name: vpnId
        required: true
        type: string
      - description: Resources info for VPN tunnel configuration between GCP and AWS
        in: body
        name: vpnReq
        required: true
        schema:
          $ref: '#/definitions/model.RestPostVpnGcpToAwsRequest'
      produces:
      - application/x-json-stream
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: (To be provided) Update a site-to-site VPN
      tags:
      - '[VPN] Site-to-site VPN (under development)'
  /systemMci:
    post:
      consumes:
      - application/json
      description: Create System MCI Dynamically for Special Purpose
      operationId: PostSystemMci
      parameters:
      - description: Option for the purpose of system MCI
        enum:
        - probe
        in: query
        name: option
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mci.TbMciInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create System MCI Dynamically for Special Purpose in NS:system
      tags:
      - '[MC-Infra] MCI Provisioning management'
  /util/net/design:
    post:
      consumes:
      - application/json
      description: Design a hierarchical network configuration of a VPC network or
        multi-cloud network consisting of multiple VPC networks
      operationId: PostUtilToDesignNetwork
      parameters:
      - description: A root/main network CIDR block and subnetting rules
        in: body
        name: subnettingReq
        required: true
        schema:
          $ref: '#/definitions/netutil.RestPostUtilToDesignNetworkRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/netutil.RestPostUtilToDesignNetworkReponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Design a multi-cloud network configuration
      tags:
      - '[Utility] Multi-cloud network design'
  /util/net/validate:
    post:
      consumes:
      - application/json
      description: Validate a hierarchical configuration of a VPC network or multi-cloud
        network consisting of multiple VPC networks
      operationId: PostUtilToValidateNetwork
      parameters:
      - description: A hierarchical network configuration
        in: body
        name: subnettingReq
        required: true
        schema:
          $ref: '#/definitions/netutil.RestPostUtilToValidateNetworkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Validate a multi-cloud network configuration
      tags:
      - '[Utility] Multi-cloud network design'
securityDefinitions:
  BasicAuth:
    type: basic
  Bearer:
    description: Type "Bearer" followed by a space and JWT token ([TBD] Get token
      in http://xxx.xxx.xxx.xxx:xxx/auth)
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
