// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cbtumblebug/cbtumblebug.proto

package cbtumblebug

import (
	context "context"
	fmt "fmt"
	_ "github.com/cloud-barista/cb-spider/api-runtime/grpc-runtime/stub/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Empty 메시지 정의
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// KeyValue 메시지 정의
type KeyValue struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,json=Key,proto3" json:"Key" yaml:"Key"`
	Value                string   `protobuf:"bytes,2,opt,name=value,json=Value,proto3" json:"Value" yaml:"Value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{1}
}
func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(m, src)
}
func (m *KeyValue) XXX_Size() int {
	return m.Size()
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IID 메시지 정의
type IID struct {
	NameId               string   `protobuf:"bytes,1,opt,name=name_id,json=NameId,proto3" json:"NameId" yaml:"NameId"`
	SystemId             string   `protobuf:"bytes,2,opt,name=system_id,json=SystemId,proto3" json:"SystemId" yaml:"SystemId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IID) Reset()         { *m = IID{} }
func (m *IID) String() string { return proto.CompactTextString(m) }
func (*IID) ProtoMessage()    {}
func (*IID) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{2}
}
func (m *IID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IID.Merge(m, src)
}
func (m *IID) XXX_Size() int {
	return m.Size()
}
func (m *IID) XXX_DiscardUnknown() {
	xxx_messageInfo_IID.DiscardUnknown(m)
}

var xxx_messageInfo_IID proto.InternalMessageInfo

func (m *IID) GetNameId() string {
	if m != nil {
		return m.NameId
	}
	return ""
}

func (m *IID) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

// Boolean 응답 메시지 정의
type BooleanResponse struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,json=Result,proto3" json:"Result" yaml:"Result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BooleanResponse) Reset()         { *m = BooleanResponse{} }
func (m *BooleanResponse) String() string { return proto.CompactTextString(m) }
func (*BooleanResponse) ProtoMessage()    {}
func (*BooleanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{3}
}
func (m *BooleanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BooleanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BooleanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BooleanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BooleanResponse.Merge(m, src)
}
func (m *BooleanResponse) XXX_Size() int {
	return m.Size()
}
func (m *BooleanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BooleanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BooleanResponse proto.InternalMessageInfo

func (m *BooleanResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// Exists 응답 메시지 정의
type ExistsResponse struct {
	Exists               bool     `protobuf:"varint,1,opt,name=exists,proto3" json:"exists" yaml:"exists"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExistsResponse) Reset()         { *m = ExistsResponse{} }
func (m *ExistsResponse) String() string { return proto.CompactTextString(m) }
func (*ExistsResponse) ProtoMessage()    {}
func (*ExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{4}
}
func (m *ExistsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExistsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistsResponse.Merge(m, src)
}
func (m *ExistsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExistsResponse proto.InternalMessageInfo

func (m *ExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

// StringResponse 응답 메시지 정의
type StringResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,json=Result,proto3" json:"Result" yaml:"Result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringResponse) Reset()         { *m = StringResponse{} }
func (m *StringResponse) String() string { return proto.CompactTextString(m) }
func (*StringResponse) ProtoMessage()    {}
func (*StringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{5}
}
func (m *StringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringResponse.Merge(m, src)
}
func (m *StringResponse) XXX_Size() int {
	return m.Size()
}
func (m *StringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StringResponse proto.InternalMessageInfo

func (m *StringResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

// MessageResponse 응답 메시지 정의
type MessageResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message" yaml:"message"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageResponse) Reset()         { *m = MessageResponse{} }
func (m *MessageResponse) String() string { return proto.CompactTextString(m) }
func (*MessageResponse) ProtoMessage()    {}
func (*MessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{6}
}
func (m *MessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageResponse.Merge(m, src)
}
func (m *MessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MessageResponse proto.InternalMessageInfo

func (m *MessageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Status 응답 메시지 정의
type StatusResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,json=Status,proto3" json:"Status" yaml:"Status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{7}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type NSInfoResponse struct {
	Item                 *NSInfo  `protobuf:"bytes,1,opt,name=item,json=ns,proto3" json:"ns" yaml:"ns"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NSInfoResponse) Reset()         { *m = NSInfoResponse{} }
func (m *NSInfoResponse) String() string { return proto.CompactTextString(m) }
func (*NSInfoResponse) ProtoMessage()    {}
func (*NSInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{8}
}
func (m *NSInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSInfoResponse.Merge(m, src)
}
func (m *NSInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *NSInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NSInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NSInfoResponse proto.InternalMessageInfo

func (m *NSInfoResponse) GetItem() *NSInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListNSInfoResponse struct {
	Items                []*NSInfo `protobuf:"bytes,1,rep,name=items,json=ns,proto3" json:"ns" yaml:"ns"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListNSInfoResponse) Reset()         { *m = ListNSInfoResponse{} }
func (m *ListNSInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListNSInfoResponse) ProtoMessage()    {}
func (*ListNSInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{9}
}
func (m *ListNSInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNSInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNSInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNSInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNSInfoResponse.Merge(m, src)
}
func (m *ListNSInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListNSInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNSInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNSInfoResponse proto.InternalMessageInfo

func (m *ListNSInfoResponse) GetItems() []*NSInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type NSInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NSInfo) Reset()         { *m = NSInfo{} }
func (m *NSInfo) String() string { return proto.CompactTextString(m) }
func (*NSInfo) ProtoMessage()    {}
func (*NSInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{10}
}
func (m *NSInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSInfo.Merge(m, src)
}
func (m *NSInfo) XXX_Size() int {
	return m.Size()
}
func (m *NSInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NSInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NSInfo proto.InternalMessageInfo

func (m *NSInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NSInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NSInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type NSCreateRequest struct {
	Item                 *NsReq   `protobuf:"bytes,1,opt,name=item,json=ns,proto3" json:"ns" yaml:"ns"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NSCreateRequest) Reset()         { *m = NSCreateRequest{} }
func (m *NSCreateRequest) String() string { return proto.CompactTextString(m) }
func (*NSCreateRequest) ProtoMessage()    {}
func (*NSCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{11}
}
func (m *NSCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSCreateRequest.Merge(m, src)
}
func (m *NSCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *NSCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NSCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NSCreateRequest proto.InternalMessageInfo

func (m *NSCreateRequest) GetItem() *NsReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type NsReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NsReq) Reset()         { *m = NsReq{} }
func (m *NsReq) String() string { return proto.CompactTextString(m) }
func (*NsReq) ProtoMessage()    {}
func (*NsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{12}
}
func (m *NsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NsReq.Merge(m, src)
}
func (m *NsReq) XXX_Size() int {
	return m.Size()
}
func (m *NsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NsReq.DiscardUnknown(m)
}

var xxx_messageInfo_NsReq proto.InternalMessageInfo

func (m *NsReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NsReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type NSQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NSQryRequest) Reset()         { *m = NSQryRequest{} }
func (m *NSQryRequest) String() string { return proto.CompactTextString(m) }
func (*NSQryRequest) ProtoMessage()    {}
func (*NSQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{13}
}
func (m *NSQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NSQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSQryRequest.Merge(m, src)
}
func (m *NSQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *NSQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NSQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NSQryRequest proto.InternalMessageInfo

func (m *NSQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

type ResourceQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	ResourceType         string   `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resourceType" yaml:"resourceType"`
	ResourceId           string   `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resourceId" yaml:"resourceId"`
	Force                string   `protobuf:"bytes,4,opt,name=force,proto3" json:"force" yaml:"force"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceQryRequest) Reset()         { *m = ResourceQryRequest{} }
func (m *ResourceQryRequest) String() string { return proto.CompactTextString(m) }
func (*ResourceQryRequest) ProtoMessage()    {}
func (*ResourceQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{14}
}
func (m *ResourceQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceQryRequest.Merge(m, src)
}
func (m *ResourceQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResourceQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceQryRequest proto.InternalMessageInfo

func (m *ResourceQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *ResourceQryRequest) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *ResourceQryRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ResourceQryRequest) GetForce() string {
	if m != nil {
		return m.Force
	}
	return ""
}

type ResourceAllQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	ResourceType         string   `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resourceType" yaml:"resourceType"`
	Force                string   `protobuf:"bytes,3,opt,name=force,proto3" json:"force" yaml:"force"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceAllQryRequest) Reset()         { *m = ResourceAllQryRequest{} }
func (m *ResourceAllQryRequest) String() string { return proto.CompactTextString(m) }
func (*ResourceAllQryRequest) ProtoMessage()    {}
func (*ResourceAllQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{15}
}
func (m *ResourceAllQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceAllQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceAllQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceAllQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceAllQryRequest.Merge(m, src)
}
func (m *ResourceAllQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResourceAllQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceAllQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceAllQryRequest proto.InternalMessageInfo

func (m *ResourceAllQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *ResourceAllQryRequest) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *ResourceAllQryRequest) GetForce() string {
	if m != nil {
		return m.Force
	}
	return ""
}

type TbImageInfoRequest struct {
	NsId                 string       `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbImageInfo `protobuf:"bytes,2,opt,name=item,json=image,proto3" json:"image" yaml:"image"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TbImageInfoRequest) Reset()         { *m = TbImageInfoRequest{} }
func (m *TbImageInfoRequest) String() string { return proto.CompactTextString(m) }
func (*TbImageInfoRequest) ProtoMessage()    {}
func (*TbImageInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{16}
}
func (m *TbImageInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbImageInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbImageInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbImageInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbImageInfoRequest.Merge(m, src)
}
func (m *TbImageInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbImageInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbImageInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbImageInfoRequest proto.InternalMessageInfo

func (m *TbImageInfoRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbImageInfoRequest) GetItem() *TbImageInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbImageInfoResponse struct {
	Item                 *TbImageInfo `protobuf:"bytes,1,opt,name=item,json=image,proto3" json:"image" yaml:"image"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TbImageInfoResponse) Reset()         { *m = TbImageInfoResponse{} }
func (m *TbImageInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbImageInfoResponse) ProtoMessage()    {}
func (*TbImageInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{17}
}
func (m *TbImageInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbImageInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbImageInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbImageInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbImageInfoResponse.Merge(m, src)
}
func (m *TbImageInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbImageInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbImageInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbImageInfoResponse proto.InternalMessageInfo

func (m *TbImageInfoResponse) GetItem() *TbImageInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListTbImageInfoResponse struct {
	Items                []*TbImageInfo `protobuf:"bytes,1,rep,name=items,json=image,proto3" json:"image" yaml:"image"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListTbImageInfoResponse) Reset()         { *m = ListTbImageInfoResponse{} }
func (m *ListTbImageInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListTbImageInfoResponse) ProtoMessage()    {}
func (*ListTbImageInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{18}
}
func (m *ListTbImageInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTbImageInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTbImageInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTbImageInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTbImageInfoResponse.Merge(m, src)
}
func (m *ListTbImageInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTbImageInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTbImageInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTbImageInfoResponse proto.InternalMessageInfo

func (m *ListTbImageInfoResponse) GetItems() []*TbImageInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type TbImageInfo struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string      `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspImageId           string      `protobuf:"bytes,4,opt,name=csp_image_id,json=cspImageId,proto3" json:"cspImageId" yaml:"cspImageId"`
	CspImageName         string      `protobuf:"bytes,5,opt,name=csp_image_name,json=cspImageName,proto3" json:"cspImageName" yaml:"cspImageName"`
	Description          string      `protobuf:"bytes,6,opt,name=description,proto3" json:"description" yaml:"description"`
	CreationDate         string      `protobuf:"bytes,7,opt,name=creation_date,json=creationDate,proto3" json:"creationDate" yaml:"creationDate"`
	GuestOs              string      `protobuf:"bytes,8,opt,name=guest_os,json=guestOS,proto3" json:"guestOS" yaml:"guestOS"`
	Status               string      `protobuf:"bytes,9,opt,name=status,proto3" json:"status" yaml:"status"`
	KeyValueList         []*KeyValue `protobuf:"bytes,10,rep,name=key_value_list,json=keyValueList,proto3" json:"keyValueList" yaml:"keyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbImageInfo) Reset()         { *m = TbImageInfo{} }
func (m *TbImageInfo) String() string { return proto.CompactTextString(m) }
func (*TbImageInfo) ProtoMessage()    {}
func (*TbImageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{19}
}
func (m *TbImageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbImageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbImageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbImageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbImageInfo.Merge(m, src)
}
func (m *TbImageInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbImageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbImageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbImageInfo proto.InternalMessageInfo

func (m *TbImageInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbImageInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbImageInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbImageInfo) GetCspImageId() string {
	if m != nil {
		return m.CspImageId
	}
	return ""
}

func (m *TbImageInfo) GetCspImageName() string {
	if m != nil {
		return m.CspImageName
	}
	return ""
}

func (m *TbImageInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbImageInfo) GetCreationDate() string {
	if m != nil {
		return m.CreationDate
	}
	return ""
}

func (m *TbImageInfo) GetGuestOs() string {
	if m != nil {
		return m.GuestOs
	}
	return ""
}

func (m *TbImageInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TbImageInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type TbImageCreateRequest struct {
	NsId                 string      `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbImageReq `protobuf:"bytes,2,opt,name=item,json=image,proto3" json:"image" yaml:"image"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbImageCreateRequest) Reset()         { *m = TbImageCreateRequest{} }
func (m *TbImageCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbImageCreateRequest) ProtoMessage()    {}
func (*TbImageCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{20}
}
func (m *TbImageCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbImageCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbImageCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbImageCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbImageCreateRequest.Merge(m, src)
}
func (m *TbImageCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbImageCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbImageCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbImageCreateRequest proto.InternalMessageInfo

func (m *TbImageCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbImageCreateRequest) GetItem() *TbImageReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbImageReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string   `protobuf:"bytes,2,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspImageId           string   `protobuf:"bytes,3,opt,name=csp_image_id,json=cspImageId,proto3" json:"cspImageId" yaml:"cspImageId"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbImageReq) Reset()         { *m = TbImageReq{} }
func (m *TbImageReq) String() string { return proto.CompactTextString(m) }
func (*TbImageReq) ProtoMessage()    {}
func (*TbImageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{21}
}
func (m *TbImageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbImageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbImageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbImageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbImageReq.Merge(m, src)
}
func (m *TbImageReq) XXX_Size() int {
	return m.Size()
}
func (m *TbImageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbImageReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbImageReq proto.InternalMessageInfo

func (m *TbImageReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbImageReq) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbImageReq) GetCspImageId() string {
	if m != nil {
		return m.CspImageId
	}
	return ""
}

func (m *TbImageReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type TbSshKeyInfoResponse struct {
	Item                 *TbSshKeyInfo `protobuf:"bytes,1,opt,name=item,json=sshKey,proto3" json:"sshKey" yaml:"sshKey"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TbSshKeyInfoResponse) Reset()         { *m = TbSshKeyInfoResponse{} }
func (m *TbSshKeyInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbSshKeyInfoResponse) ProtoMessage()    {}
func (*TbSshKeyInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{22}
}
func (m *TbSshKeyInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSshKeyInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSshKeyInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSshKeyInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSshKeyInfoResponse.Merge(m, src)
}
func (m *TbSshKeyInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbSshKeyInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSshKeyInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbSshKeyInfoResponse proto.InternalMessageInfo

func (m *TbSshKeyInfoResponse) GetItem() *TbSshKeyInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListTbSshKeyInfoResponse struct {
	Items                []*TbSshKeyInfo `protobuf:"bytes,1,rep,name=items,json=sshKey,proto3" json:"sshKey" yaml:"sshKey"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListTbSshKeyInfoResponse) Reset()         { *m = ListTbSshKeyInfoResponse{} }
func (m *ListTbSshKeyInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListTbSshKeyInfoResponse) ProtoMessage()    {}
func (*ListTbSshKeyInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{23}
}
func (m *ListTbSshKeyInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTbSshKeyInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTbSshKeyInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTbSshKeyInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTbSshKeyInfoResponse.Merge(m, src)
}
func (m *ListTbSshKeyInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTbSshKeyInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTbSshKeyInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTbSshKeyInfoResponse proto.InternalMessageInfo

func (m *ListTbSshKeyInfoResponse) GetItems() []*TbSshKeyInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type TbSshKeyInfo struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string      `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	Description          string      `protobuf:"bytes,4,opt,name=description,proto3" json:"description" yaml:"description"`
	CspSshKeyName        string      `protobuf:"bytes,5,opt,name=csp_ssh_key_name,json=cspSshKeyName,proto3" json:"cspSshKeyName" yaml:"cspSshKeyName"`
	Fingerprint          string      `protobuf:"bytes,6,opt,name=fingerprint,proto3" json:"fingerprint" yaml:"fingerprint"`
	Username             string      `protobuf:"bytes,7,opt,name=username,proto3" json:"username" yaml:"username"`
	PublicKey            string      `protobuf:"bytes,8,opt,name=public_key,json=publicKey,proto3" json:"publicKey" yaml:"publicKey"`
	PrivateKey           string      `protobuf:"bytes,9,opt,name=private_key,json=privateKey,proto3" json:"privateKey" yaml:"privateKey"`
	KeyValueList         []*KeyValue `protobuf:"bytes,10,rep,name=key_value_list,json=keyValueList,proto3" json:"keyValueList" yaml:"keyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbSshKeyInfo) Reset()         { *m = TbSshKeyInfo{} }
func (m *TbSshKeyInfo) String() string { return proto.CompactTextString(m) }
func (*TbSshKeyInfo) ProtoMessage()    {}
func (*TbSshKeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{24}
}
func (m *TbSshKeyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSshKeyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSshKeyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSshKeyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSshKeyInfo.Merge(m, src)
}
func (m *TbSshKeyInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbSshKeyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSshKeyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbSshKeyInfo proto.InternalMessageInfo

func (m *TbSshKeyInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbSshKeyInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbSshKeyInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbSshKeyInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbSshKeyInfo) GetCspSshKeyName() string {
	if m != nil {
		return m.CspSshKeyName
	}
	return ""
}

func (m *TbSshKeyInfo) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *TbSshKeyInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TbSshKeyInfo) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *TbSshKeyInfo) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *TbSshKeyInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type TbSshKeyCreateRequest struct {
	NsId                 string       `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbSshKeyReq `protobuf:"bytes,2,opt,name=item,json=sshKey,proto3" json:"sshKey" yaml:"sshKey"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TbSshKeyCreateRequest) Reset()         { *m = TbSshKeyCreateRequest{} }
func (m *TbSshKeyCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbSshKeyCreateRequest) ProtoMessage()    {}
func (*TbSshKeyCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{25}
}
func (m *TbSshKeyCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSshKeyCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSshKeyCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSshKeyCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSshKeyCreateRequest.Merge(m, src)
}
func (m *TbSshKeyCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbSshKeyCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSshKeyCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbSshKeyCreateRequest proto.InternalMessageInfo

func (m *TbSshKeyCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbSshKeyCreateRequest) GetItem() *TbSshKeyReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbSshKeyReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string   `protobuf:"bytes,2,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbSshKeyReq) Reset()         { *m = TbSshKeyReq{} }
func (m *TbSshKeyReq) String() string { return proto.CompactTextString(m) }
func (*TbSshKeyReq) ProtoMessage()    {}
func (*TbSshKeyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{26}
}
func (m *TbSshKeyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSshKeyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSshKeyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSshKeyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSshKeyReq.Merge(m, src)
}
func (m *TbSshKeyReq) XXX_Size() int {
	return m.Size()
}
func (m *TbSshKeyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSshKeyReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbSshKeyReq proto.InternalMessageInfo

func (m *TbSshKeyReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbSshKeyReq) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbSshKeyReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type TbSpecInfoRequest struct {
	NsId                 string      `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbSpecInfo `protobuf:"bytes,2,opt,name=item,json=spec,proto3" json:"spec" yaml:"spec"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbSpecInfoRequest) Reset()         { *m = TbSpecInfoRequest{} }
func (m *TbSpecInfoRequest) String() string { return proto.CompactTextString(m) }
func (*TbSpecInfoRequest) ProtoMessage()    {}
func (*TbSpecInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{27}
}
func (m *TbSpecInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSpecInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSpecInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSpecInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSpecInfoRequest.Merge(m, src)
}
func (m *TbSpecInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbSpecInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSpecInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbSpecInfoRequest proto.InternalMessageInfo

func (m *TbSpecInfoRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbSpecInfoRequest) GetItem() *TbSpecInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbSpecInfoResponse struct {
	Item                 *TbSpecInfo `protobuf:"bytes,1,opt,name=item,json=spec,proto3" json:"spec" yaml:"spec"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbSpecInfoResponse) Reset()         { *m = TbSpecInfoResponse{} }
func (m *TbSpecInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbSpecInfoResponse) ProtoMessage()    {}
func (*TbSpecInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{28}
}
func (m *TbSpecInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSpecInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSpecInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSpecInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSpecInfoResponse.Merge(m, src)
}
func (m *TbSpecInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbSpecInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSpecInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbSpecInfoResponse proto.InternalMessageInfo

func (m *TbSpecInfoResponse) GetItem() *TbSpecInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListTbSpecInfoResponse struct {
	Items                []*TbSpecInfo `protobuf:"bytes,1,rep,name=items,json=spec,proto3" json:"spec" yaml:"spec"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListTbSpecInfoResponse) Reset()         { *m = ListTbSpecInfoResponse{} }
func (m *ListTbSpecInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListTbSpecInfoResponse) ProtoMessage()    {}
func (*ListTbSpecInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{29}
}
func (m *ListTbSpecInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTbSpecInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTbSpecInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTbSpecInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTbSpecInfoResponse.Merge(m, src)
}
func (m *ListTbSpecInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTbSpecInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTbSpecInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTbSpecInfoResponse proto.InternalMessageInfo

func (m *ListTbSpecInfoResponse) GetItems() []*TbSpecInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type TbSpecInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string   `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspSpecName          string   `protobuf:"bytes,4,opt,name=csp_spec_name,json=cspSpecName,proto3" json:"cspSpecName" yaml:"cspSpecName"`
	OsType               string   `protobuf:"bytes,5,opt,name=os_type,proto3" json:"os_type" yaml:"os_type"`
	NumVcpu              string   `protobuf:"bytes,6,opt,name=num_vcpu,json=num_vCPU,proto3" json:"num_vCPU" yaml:"num_vCPU"`
	NumCore              string   `protobuf:"bytes,7,opt,name=num_core,proto3" json:"num_core" yaml:"num_core"`
	MemGib               string   `protobuf:"bytes,8,opt,name=mem_gib,json=mem_GiB,proto3" json:"mem_GiB" yaml:"mem_GiB"`
	MemMib               string   `protobuf:"bytes,9,opt,name=mem_mib,json=mem_MiB,proto3" json:"mem_MiB" yaml:"mem_MiB"`
	StorageGib           string   `protobuf:"bytes,10,opt,name=storage_gib,json=storage_GiB,proto3" json:"storage_GiB" yaml:"storage_GiB"`
	Description          string   `protobuf:"bytes,11,opt,name=description,proto3" json:"description" yaml:"description"`
	CostPerHour          string   `protobuf:"bytes,12,opt,name=cost_per_hour,proto3" json:"cost_per_hour" yaml:"cost_per_hour"`
	NumStorage           string   `protobuf:"bytes,13,opt,name=num_storage,proto3" json:"num_storage" yaml:"num_storage"`
	MaxNumStorage        string   `protobuf:"bytes,14,opt,name=max_num_storage,proto3" json:"max_num_storage" yaml:"max_num_storage"`
	MaxTotalStorageTib   string   `protobuf:"bytes,15,opt,name=max_total_storage_tib,json=max_total_storage_TiB,proto3" json:"max_total_storage_TiB" yaml:"max_total_storage_TiB"`
	NetBwGbps            string   `protobuf:"bytes,16,opt,name=net_bw_gbps,json=net_bw_Gbps,proto3" json:"net_bw_Gbps" yaml:"net_bw_Gbps"`
	EbsBwMbps            string   `protobuf:"bytes,17,opt,name=ebs_bw_mbps,json=ebs_bw_Mbps,proto3" json:"ebs_bw_Mbps" yaml:"ebs_bw_Mbps"`
	GpuModel             string   `protobuf:"bytes,18,opt,name=gpu_model,proto3" json:"gpu_model" yaml:"gpu_model"`
	NumGpu               string   `protobuf:"bytes,19,opt,name=num_gpu,proto3" json:"num_gpu" yaml:"num_gpu"`
	GpumemGib            string   `protobuf:"bytes,20,opt,name=gpumem_gib,json=gpumem_GiB,proto3" json:"gpumem_GiB" yaml:"gpumem_GiB"`
	GpuP2P               string   `protobuf:"bytes,21,opt,name=gpu_p2p,proto3" json:"gpu_p2p" yaml:"gpu_p2p"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbSpecInfo) Reset()         { *m = TbSpecInfo{} }
func (m *TbSpecInfo) String() string { return proto.CompactTextString(m) }
func (*TbSpecInfo) ProtoMessage()    {}
func (*TbSpecInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{30}
}
func (m *TbSpecInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSpecInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSpecInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSpecInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSpecInfo.Merge(m, src)
}
func (m *TbSpecInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbSpecInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSpecInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbSpecInfo proto.InternalMessageInfo

func (m *TbSpecInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbSpecInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbSpecInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbSpecInfo) GetCspSpecName() string {
	if m != nil {
		return m.CspSpecName
	}
	return ""
}

func (m *TbSpecInfo) GetOsType() string {
	if m != nil {
		return m.OsType
	}
	return ""
}

func (m *TbSpecInfo) GetNumVcpu() string {
	if m != nil {
		return m.NumVcpu
	}
	return ""
}

func (m *TbSpecInfo) GetNumCore() string {
	if m != nil {
		return m.NumCore
	}
	return ""
}

func (m *TbSpecInfo) GetMemGib() string {
	if m != nil {
		return m.MemGib
	}
	return ""
}

func (m *TbSpecInfo) GetMemMib() string {
	if m != nil {
		return m.MemMib
	}
	return ""
}

func (m *TbSpecInfo) GetStorageGib() string {
	if m != nil {
		return m.StorageGib
	}
	return ""
}

func (m *TbSpecInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbSpecInfo) GetCostPerHour() string {
	if m != nil {
		return m.CostPerHour
	}
	return ""
}

func (m *TbSpecInfo) GetNumStorage() string {
	if m != nil {
		return m.NumStorage
	}
	return ""
}

func (m *TbSpecInfo) GetMaxNumStorage() string {
	if m != nil {
		return m.MaxNumStorage
	}
	return ""
}

func (m *TbSpecInfo) GetMaxTotalStorageTib() string {
	if m != nil {
		return m.MaxTotalStorageTib
	}
	return ""
}

func (m *TbSpecInfo) GetNetBwGbps() string {
	if m != nil {
		return m.NetBwGbps
	}
	return ""
}

func (m *TbSpecInfo) GetEbsBwMbps() string {
	if m != nil {
		return m.EbsBwMbps
	}
	return ""
}

func (m *TbSpecInfo) GetGpuModel() string {
	if m != nil {
		return m.GpuModel
	}
	return ""
}

func (m *TbSpecInfo) GetNumGpu() string {
	if m != nil {
		return m.NumGpu
	}
	return ""
}

func (m *TbSpecInfo) GetGpumemGib() string {
	if m != nil {
		return m.GpumemGib
	}
	return ""
}

func (m *TbSpecInfo) GetGpuP2P() string {
	if m != nil {
		return m.GpuP2P
	}
	return ""
}

type TbSpecCreateRequest struct {
	NsId                 string     `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbSpecReq `protobuf:"bytes,2,opt,name=item,json=spec,proto3" json:"spec" yaml:"spec"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TbSpecCreateRequest) Reset()         { *m = TbSpecCreateRequest{} }
func (m *TbSpecCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbSpecCreateRequest) ProtoMessage()    {}
func (*TbSpecCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{31}
}
func (m *TbSpecCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSpecCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSpecCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSpecCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSpecCreateRequest.Merge(m, src)
}
func (m *TbSpecCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbSpecCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSpecCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbSpecCreateRequest proto.InternalMessageInfo

func (m *TbSpecCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbSpecCreateRequest) GetItem() *TbSpecReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbSpecReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string   `protobuf:"bytes,2,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspSpecName          string   `protobuf:"bytes,3,opt,name=csp_spec_name,json=cspSpecName,proto3" json:"cspSpecName" yaml:"cspSpecName"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbSpecReq) Reset()         { *m = TbSpecReq{} }
func (m *TbSpecReq) String() string { return proto.CompactTextString(m) }
func (*TbSpecReq) ProtoMessage()    {}
func (*TbSpecReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{32}
}
func (m *TbSpecReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSpecReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSpecReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSpecReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSpecReq.Merge(m, src)
}
func (m *TbSpecReq) XXX_Size() int {
	return m.Size()
}
func (m *TbSpecReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSpecReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbSpecReq proto.InternalMessageInfo

func (m *TbSpecReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbSpecReq) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbSpecReq) GetCspSpecName() string {
	if m != nil {
		return m.CspSpecName
	}
	return ""
}

func (m *TbSpecReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type FetchSpecQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchSpecQryRequest) Reset()         { *m = FetchSpecQryRequest{} }
func (m *FetchSpecQryRequest) String() string { return proto.CompactTextString(m) }
func (*FetchSpecQryRequest) ProtoMessage()    {}
func (*FetchSpecQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{33}
}
func (m *FetchSpecQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchSpecQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchSpecQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchSpecQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchSpecQryRequest.Merge(m, src)
}
func (m *FetchSpecQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchSpecQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchSpecQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchSpecQryRequest proto.InternalMessageInfo

func (m *FetchSpecQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

// Look Up Sepc
type SpiderSpecInfoResponse struct {
	Item                 *SpiderSpecInfo `protobuf:"bytes,1,opt,name=item,json=vmspec,proto3" json:"vmspec" yaml:"vmspec"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SpiderSpecInfoResponse) Reset()         { *m = SpiderSpecInfoResponse{} }
func (m *SpiderSpecInfoResponse) String() string { return proto.CompactTextString(m) }
func (*SpiderSpecInfoResponse) ProtoMessage()    {}
func (*SpiderSpecInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{34}
}
func (m *SpiderSpecInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderSpecInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderSpecInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderSpecInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderSpecInfoResponse.Merge(m, src)
}
func (m *SpiderSpecInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *SpiderSpecInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderSpecInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderSpecInfoResponse proto.InternalMessageInfo

func (m *SpiderSpecInfoResponse) GetItem() *SpiderSpecInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListSpiderSpecInfoResponse struct {
	Items                []*SpiderSpecInfo `protobuf:"bytes,1,rep,name=items,json=vmspec,proto3" json:"vmspec" yaml:"vmspec"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListSpiderSpecInfoResponse) Reset()         { *m = ListSpiderSpecInfoResponse{} }
func (m *ListSpiderSpecInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListSpiderSpecInfoResponse) ProtoMessage()    {}
func (*ListSpiderSpecInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{35}
}
func (m *ListSpiderSpecInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSpiderSpecInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSpiderSpecInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSpiderSpecInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSpiderSpecInfoResponse.Merge(m, src)
}
func (m *ListSpiderSpecInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSpiderSpecInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSpiderSpecInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSpiderSpecInfoResponse proto.InternalMessageInfo

func (m *ListSpiderSpecInfoResponse) GetItems() []*SpiderSpecInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type SpiderSpecInfo struct {
	Region               string           `protobuf:"bytes,1,opt,name=region,json=Region,proto3" json:"Region" yaml:"Region"`
	Name                 string           `protobuf:"bytes,2,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	VCpu                 *SpiderVCpuInfo  `protobuf:"bytes,3,opt,name=v_cpu,json=VCpu,proto3" json:"VCpu" yaml:"VCpu"`
	Mem                  string           `protobuf:"bytes,4,opt,name=mem,json=Mem,proto3" json:"Mem" yaml:"Mem"`
	Gpu                  []*SpiderGpuInfo `protobuf:"bytes,5,rep,name=gpu,json=Gpu,proto3" json:"Gpu" yaml:"Gpu"`
	KeyValueList         []*KeyValue      `protobuf:"bytes,6,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SpiderSpecInfo) Reset()         { *m = SpiderSpecInfo{} }
func (m *SpiderSpecInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderSpecInfo) ProtoMessage()    {}
func (*SpiderSpecInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{36}
}
func (m *SpiderSpecInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderSpecInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderSpecInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderSpecInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderSpecInfo.Merge(m, src)
}
func (m *SpiderSpecInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderSpecInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderSpecInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderSpecInfo proto.InternalMessageInfo

func (m *SpiderSpecInfo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *SpiderSpecInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpiderSpecInfo) GetVCpu() *SpiderVCpuInfo {
	if m != nil {
		return m.VCpu
	}
	return nil
}

func (m *SpiderSpecInfo) GetMem() string {
	if m != nil {
		return m.Mem
	}
	return ""
}

func (m *SpiderSpecInfo) GetGpu() []*SpiderGpuInfo {
	if m != nil {
		return m.Gpu
	}
	return nil
}

func (m *SpiderSpecInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type SpiderVCpuInfo struct {
	Count                string   `protobuf:"bytes,1,opt,name=count,json=Count,proto3" json:"Count" yaml:"Count"`
	Clock                string   `protobuf:"bytes,2,opt,name=clock,json=Clock,proto3" json:"Clock" yaml:"Clock"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpiderVCpuInfo) Reset()         { *m = SpiderVCpuInfo{} }
func (m *SpiderVCpuInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderVCpuInfo) ProtoMessage()    {}
func (*SpiderVCpuInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{37}
}
func (m *SpiderVCpuInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderVCpuInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderVCpuInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderVCpuInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderVCpuInfo.Merge(m, src)
}
func (m *SpiderVCpuInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderVCpuInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderVCpuInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderVCpuInfo proto.InternalMessageInfo

func (m *SpiderVCpuInfo) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

func (m *SpiderVCpuInfo) GetClock() string {
	if m != nil {
		return m.Clock
	}
	return ""
}

type SpiderGpuInfo struct {
	Count                string   `protobuf:"bytes,1,opt,name=count,json=Count,proto3" json:"Count" yaml:"Count"`
	Mfr                  string   `protobuf:"bytes,2,opt,name=mfr,json=Mfr,proto3" json:"Mfr" yaml:"Mfr"`
	Model                string   `protobuf:"bytes,3,opt,name=model,json=Model,proto3" json:"Model" yaml:"Model"`
	Mem                  string   `protobuf:"bytes,4,opt,name=mem,json=Mem,proto3" json:"Mem" yaml:"Mem"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpiderGpuInfo) Reset()         { *m = SpiderGpuInfo{} }
func (m *SpiderGpuInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderGpuInfo) ProtoMessage()    {}
func (*SpiderGpuInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{38}
}
func (m *SpiderGpuInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderGpuInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderGpuInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderGpuInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderGpuInfo.Merge(m, src)
}
func (m *SpiderGpuInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderGpuInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderGpuInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderGpuInfo proto.InternalMessageInfo

func (m *SpiderGpuInfo) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

func (m *SpiderGpuInfo) GetMfr() string {
	if m != nil {
		return m.Mfr
	}
	return ""
}

func (m *SpiderGpuInfo) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *SpiderGpuInfo) GetMem() string {
	if m != nil {
		return m.Mem
	}
	return ""
}

type LookupSpecListQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupSpecListQryRequest) Reset()         { *m = LookupSpecListQryRequest{} }
func (m *LookupSpecListQryRequest) String() string { return proto.CompactTextString(m) }
func (*LookupSpecListQryRequest) ProtoMessage()    {}
func (*LookupSpecListQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{39}
}
func (m *LookupSpecListQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSpecListQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupSpecListQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupSpecListQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSpecListQryRequest.Merge(m, src)
}
func (m *LookupSpecListQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupSpecListQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSpecListQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSpecListQryRequest proto.InternalMessageInfo

func (m *LookupSpecListQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

type LookupSpecQryRequest struct {
	ConnectionName       string   `protobuf:"bytes,1,opt,name=connection_name,json=ConnectionName,proto3" json:"ConnectionName" yaml:"ConnectionName"`
	SpecName             string   `protobuf:"bytes,2,opt,name=spec_name,json=specName,proto3" json:"specName" yaml:"specName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LookupSpecQryRequest) Reset()         { *m = LookupSpecQryRequest{} }
func (m *LookupSpecQryRequest) String() string { return proto.CompactTextString(m) }
func (*LookupSpecQryRequest) ProtoMessage()    {}
func (*LookupSpecQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{40}
}
func (m *LookupSpecQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupSpecQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupSpecQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupSpecQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupSpecQryRequest.Merge(m, src)
}
func (m *LookupSpecQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupSpecQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupSpecQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupSpecQryRequest proto.InternalMessageInfo

func (m *LookupSpecQryRequest) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *LookupSpecQryRequest) GetSpecName() string {
	if m != nil {
		return m.SpecName
	}
	return ""
}

type TbSecurityGroupInfoResponse struct {
	Item                 *TbSecurityGroupInfo `protobuf:"bytes,1,opt,name=item,json=securityGroup,proto3" json:"securityGroup" yaml:"securityGroup"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TbSecurityGroupInfoResponse) Reset()         { *m = TbSecurityGroupInfoResponse{} }
func (m *TbSecurityGroupInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbSecurityGroupInfoResponse) ProtoMessage()    {}
func (*TbSecurityGroupInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{41}
}
func (m *TbSecurityGroupInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSecurityGroupInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSecurityGroupInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSecurityGroupInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSecurityGroupInfoResponse.Merge(m, src)
}
func (m *TbSecurityGroupInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbSecurityGroupInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSecurityGroupInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbSecurityGroupInfoResponse proto.InternalMessageInfo

func (m *TbSecurityGroupInfoResponse) GetItem() *TbSecurityGroupInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListTbSecurityGroupInfoResponse struct {
	Items                []*TbSecurityGroupInfo `protobuf:"bytes,1,rep,name=items,json=securityGroup,proto3" json:"securityGroup" yaml:"securityGroup"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ListTbSecurityGroupInfoResponse) Reset()         { *m = ListTbSecurityGroupInfoResponse{} }
func (m *ListTbSecurityGroupInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListTbSecurityGroupInfoResponse) ProtoMessage()    {}
func (*ListTbSecurityGroupInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{42}
}
func (m *ListTbSecurityGroupInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTbSecurityGroupInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTbSecurityGroupInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTbSecurityGroupInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTbSecurityGroupInfoResponse.Merge(m, src)
}
func (m *ListTbSecurityGroupInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTbSecurityGroupInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTbSecurityGroupInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTbSecurityGroupInfoResponse proto.InternalMessageInfo

func (m *ListTbSecurityGroupInfoResponse) GetItems() []*TbSecurityGroupInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type TbSecurityGroupInfo struct {
	Id                   string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string                    `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	VnetId               string                    `protobuf:"bytes,4,opt,name=vnet_id,json=vNetId,proto3" json:"vNetId" yaml:"vNetId"`
	Description          string                    `protobuf:"bytes,5,opt,name=description,proto3" json:"description" yaml:"description"`
	FirewallRules        []*SpiderSecurityRuleInfo `protobuf:"bytes,6,rep,name=firewall_rules,json=firewallRules,proto3" json:"firewallRules" yaml:"firewallRules"`
	CspSecurityGroupId   string                    `protobuf:"bytes,7,opt,name=csp_security_group_id,json=cspSecurityGroupId,proto3" json:"cspSecurityGroupId" yaml:"cspSecurityGroupId"`
	CspSecurityGroupName string                    `protobuf:"bytes,8,opt,name=csp_security_group_name,json=cspSecurityGroupName,proto3" json:"cspSecurityGroupName" yaml:"cspSecurityGroupName"`
	KeyValueList         []*KeyValue               `protobuf:"bytes,9,rep,name=key_value_list,json=keyValueList,proto3" json:"keyValueList" yaml:"keyValueList"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TbSecurityGroupInfo) Reset()         { *m = TbSecurityGroupInfo{} }
func (m *TbSecurityGroupInfo) String() string { return proto.CompactTextString(m) }
func (*TbSecurityGroupInfo) ProtoMessage()    {}
func (*TbSecurityGroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{43}
}
func (m *TbSecurityGroupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSecurityGroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSecurityGroupInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSecurityGroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSecurityGroupInfo.Merge(m, src)
}
func (m *TbSecurityGroupInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbSecurityGroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSecurityGroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbSecurityGroupInfo proto.InternalMessageInfo

func (m *TbSecurityGroupInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetVnetId() string {
	if m != nil {
		return m.VnetId
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetFirewallRules() []*SpiderSecurityRuleInfo {
	if m != nil {
		return m.FirewallRules
	}
	return nil
}

func (m *TbSecurityGroupInfo) GetCspSecurityGroupId() string {
	if m != nil {
		return m.CspSecurityGroupId
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetCspSecurityGroupName() string {
	if m != nil {
		return m.CspSecurityGroupName
	}
	return ""
}

func (m *TbSecurityGroupInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type SpiderSecurityRuleInfo struct {
	FromPort             string   `protobuf:"bytes,1,opt,name=from_port,json=fromPort,proto3" json:"fromPort" yaml:"fromPort"`
	ToPort               string   `protobuf:"bytes,2,opt,name=to_port,json=toPort,proto3" json:"toPort" yaml:"toPort"`
	IpProtocol           string   `protobuf:"bytes,3,opt,name=ip_protocol,json=ipProtocol,proto3" json:"ipProtocol" yaml:"ipProtocol"`
	Direction            string   `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction" yaml:"direction"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpiderSecurityRuleInfo) Reset()         { *m = SpiderSecurityRuleInfo{} }
func (m *SpiderSecurityRuleInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderSecurityRuleInfo) ProtoMessage()    {}
func (*SpiderSecurityRuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{44}
}
func (m *SpiderSecurityRuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderSecurityRuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderSecurityRuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderSecurityRuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderSecurityRuleInfo.Merge(m, src)
}
func (m *SpiderSecurityRuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderSecurityRuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderSecurityRuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderSecurityRuleInfo proto.InternalMessageInfo

func (m *SpiderSecurityRuleInfo) GetFromPort() string {
	if m != nil {
		return m.FromPort
	}
	return ""
}

func (m *SpiderSecurityRuleInfo) GetToPort() string {
	if m != nil {
		return m.ToPort
	}
	return ""
}

func (m *SpiderSecurityRuleInfo) GetIpProtocol() string {
	if m != nil {
		return m.IpProtocol
	}
	return ""
}

func (m *SpiderSecurityRuleInfo) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

type TbSecurityGroupCreateRequest struct {
	NsId                 string              `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbSecurityGroupReq `protobuf:"bytes,2,opt,name=item,json=securityGroup,proto3" json:"securityGroup" yaml:"securityGroup"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TbSecurityGroupCreateRequest) Reset()         { *m = TbSecurityGroupCreateRequest{} }
func (m *TbSecurityGroupCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbSecurityGroupCreateRequest) ProtoMessage()    {}
func (*TbSecurityGroupCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{45}
}
func (m *TbSecurityGroupCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSecurityGroupCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSecurityGroupCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSecurityGroupCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSecurityGroupCreateRequest.Merge(m, src)
}
func (m *TbSecurityGroupCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbSecurityGroupCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSecurityGroupCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbSecurityGroupCreateRequest proto.InternalMessageInfo

func (m *TbSecurityGroupCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbSecurityGroupCreateRequest) GetItem() *TbSecurityGroupReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbSecurityGroupReq struct {
	Name                 string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string                    `protobuf:"bytes,2,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	VnetId               string                    `protobuf:"bytes,3,opt,name=vnet_id,json=vNetId,proto3" json:"vNetId" yaml:"vNetId"`
	Description          string                    `protobuf:"bytes,4,opt,name=description,proto3" json:"description" yaml:"description"`
	FirewallRules        []*SpiderSecurityRuleInfo `protobuf:"bytes,5,rep,name=firewall_rules,json=firewallRules,proto3" json:"firewallRules" yaml:"firewallRules"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TbSecurityGroupReq) Reset()         { *m = TbSecurityGroupReq{} }
func (m *TbSecurityGroupReq) String() string { return proto.CompactTextString(m) }
func (*TbSecurityGroupReq) ProtoMessage()    {}
func (*TbSecurityGroupReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{46}
}
func (m *TbSecurityGroupReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSecurityGroupReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSecurityGroupReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSecurityGroupReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSecurityGroupReq.Merge(m, src)
}
func (m *TbSecurityGroupReq) XXX_Size() int {
	return m.Size()
}
func (m *TbSecurityGroupReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSecurityGroupReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbSecurityGroupReq proto.InternalMessageInfo

func (m *TbSecurityGroupReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbSecurityGroupReq) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbSecurityGroupReq) GetVnetId() string {
	if m != nil {
		return m.VnetId
	}
	return ""
}

func (m *TbSecurityGroupReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbSecurityGroupReq) GetFirewallRules() []*SpiderSecurityRuleInfo {
	if m != nil {
		return m.FirewallRules
	}
	return nil
}

type TbVNetInfoResponse struct {
	Item                 *TbVNetInfo `protobuf:"bytes,1,opt,name=item,json=vNet,proto3" json:"vNet" yaml:"vNet"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbVNetInfoResponse) Reset()         { *m = TbVNetInfoResponse{} }
func (m *TbVNetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbVNetInfoResponse) ProtoMessage()    {}
func (*TbVNetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{47}
}
func (m *TbVNetInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVNetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVNetInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVNetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVNetInfoResponse.Merge(m, src)
}
func (m *TbVNetInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbVNetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVNetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbVNetInfoResponse proto.InternalMessageInfo

func (m *TbVNetInfoResponse) GetItem() *TbVNetInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListTbVNetInfoResponse struct {
	Items                []*TbVNetInfo `protobuf:"bytes,1,rep,name=items,json=vNet,proto3" json:"vNet" yaml:"vNet"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListTbVNetInfoResponse) Reset()         { *m = ListTbVNetInfoResponse{} }
func (m *ListTbVNetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListTbVNetInfoResponse) ProtoMessage()    {}
func (*ListTbVNetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{48}
}
func (m *ListTbVNetInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTbVNetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTbVNetInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTbVNetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTbVNetInfoResponse.Merge(m, src)
}
func (m *ListTbVNetInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTbVNetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTbVNetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTbVNetInfoResponse proto.InternalMessageInfo

func (m *ListTbVNetInfoResponse) GetItems() []*TbVNetInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type TbVNetInfo struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string              `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CidrBlock            string              `protobuf:"bytes,4,opt,name=cidr_block,json=cidrBlock,proto3" json:"cidrBlock" yaml:"cidrBlock"`
	SubnetInfoList       []*SpiderSubnetInfo `protobuf:"bytes,5,rep,name=subnet_info_list,json=subnetInfoList,proto3" json:"subnetInfoList" yaml:"subnetInfoList"`
	Description          string              `protobuf:"bytes,6,opt,name=description,proto3" json:"description" yaml:"description"`
	CspVnetId            string              `protobuf:"bytes,7,opt,name=csp_vnet_id,json=cspVNetId,proto3" json:"cspVNetId" yaml:"cspVNetId"`
	CspVnetName          string              `protobuf:"bytes,8,opt,name=csp_vnet_name,json=cspVNetName,proto3" json:"cspVNetName" yaml:"cspVNetName"`
	Status               string              `protobuf:"bytes,9,opt,name=status,proto3" json:"status" yaml:"status"`
	KeyValueList         []*KeyValue         `protobuf:"bytes,10,rep,name=key_value_list,json=keyValueList,proto3" json:"keyValueList" yaml:"keyValueList"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TbVNetInfo) Reset()         { *m = TbVNetInfo{} }
func (m *TbVNetInfo) String() string { return proto.CompactTextString(m) }
func (*TbVNetInfo) ProtoMessage()    {}
func (*TbVNetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{49}
}
func (m *TbVNetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVNetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVNetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVNetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVNetInfo.Merge(m, src)
}
func (m *TbVNetInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbVNetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVNetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbVNetInfo proto.InternalMessageInfo

func (m *TbVNetInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbVNetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbVNetInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbVNetInfo) GetCidrBlock() string {
	if m != nil {
		return m.CidrBlock
	}
	return ""
}

func (m *TbVNetInfo) GetSubnetInfoList() []*SpiderSubnetInfo {
	if m != nil {
		return m.SubnetInfoList
	}
	return nil
}

func (m *TbVNetInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbVNetInfo) GetCspVnetId() string {
	if m != nil {
		return m.CspVnetId
	}
	return ""
}

func (m *TbVNetInfo) GetCspVnetName() string {
	if m != nil {
		return m.CspVnetName
	}
	return ""
}

func (m *TbVNetInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TbVNetInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type SpiderSubnetInfo struct {
	Iid                  *IID        `protobuf:"bytes,1,opt,name=iid,json=IId,proto3" json:"IId" yaml:"IId"`
	Ipv4Cidr             string      `protobuf:"bytes,2,opt,name=ipv4_cidr,json=IPv4_CIDR,proto3" json:"IPv4_CIDR" yaml:"IPv4_CIDR"`
	KeyValueList         []*KeyValue `protobuf:"bytes,3,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SpiderSubnetInfo) Reset()         { *m = SpiderSubnetInfo{} }
func (m *SpiderSubnetInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderSubnetInfo) ProtoMessage()    {}
func (*SpiderSubnetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{50}
}
func (m *SpiderSubnetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderSubnetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderSubnetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderSubnetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderSubnetInfo.Merge(m, src)
}
func (m *SpiderSubnetInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderSubnetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderSubnetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderSubnetInfo proto.InternalMessageInfo

func (m *SpiderSubnetInfo) GetIid() *IID {
	if m != nil {
		return m.Iid
	}
	return nil
}

func (m *SpiderSubnetInfo) GetIpv4Cidr() string {
	if m != nil {
		return m.Ipv4Cidr
	}
	return ""
}

func (m *SpiderSubnetInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type TbVNetCreateRequest struct {
	NsId                 string     `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbVNetReq `protobuf:"bytes,2,opt,name=item,json=vNet,proto3" json:"vNet" yaml:"vNet"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TbVNetCreateRequest) Reset()         { *m = TbVNetCreateRequest{} }
func (m *TbVNetCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbVNetCreateRequest) ProtoMessage()    {}
func (*TbVNetCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{51}
}
func (m *TbVNetCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVNetCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVNetCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVNetCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVNetCreateRequest.Merge(m, src)
}
func (m *TbVNetCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbVNetCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVNetCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbVNetCreateRequest proto.InternalMessageInfo

func (m *TbVNetCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbVNetCreateRequest) GetItem() *TbVNetReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbVNetReq struct {
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string                 `protobuf:"bytes,2,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CidrBlock            string                 `protobuf:"bytes,3,opt,name=cidr_block,json=cidrBlock,proto3" json:"cidrBlock" yaml:"cidrBlock"`
	SubnetInfoList       []*SpiderSubnetReqInfo `protobuf:"bytes,4,rep,name=subnet_info_list,json=subnetInfoList,proto3" json:"subnetInfoList" yaml:"subnetInfoList"`
	Description          string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TbVNetReq) Reset()         { *m = TbVNetReq{} }
func (m *TbVNetReq) String() string { return proto.CompactTextString(m) }
func (*TbVNetReq) ProtoMessage()    {}
func (*TbVNetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{52}
}
func (m *TbVNetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVNetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVNetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVNetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVNetReq.Merge(m, src)
}
func (m *TbVNetReq) XXX_Size() int {
	return m.Size()
}
func (m *TbVNetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVNetReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbVNetReq proto.InternalMessageInfo

func (m *TbVNetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbVNetReq) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbVNetReq) GetCidrBlock() string {
	if m != nil {
		return m.CidrBlock
	}
	return ""
}

func (m *TbVNetReq) GetSubnetInfoList() []*SpiderSubnetReqInfo {
	if m != nil {
		return m.SubnetInfoList
	}
	return nil
}

func (m *TbVNetReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type SpiderSubnetReqInfo struct {
	Name                 string      `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	Ipv4Cidr             string      `protobuf:"bytes,2,opt,name=ipv4_cidr,json=IPv4_CIDR,proto3" json:"IPv4_CIDR" yaml:"IPv4_CIDR"`
	KeyValueList         []*KeyValue `protobuf:"bytes,3,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SpiderSubnetReqInfo) Reset()         { *m = SpiderSubnetReqInfo{} }
func (m *SpiderSubnetReqInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderSubnetReqInfo) ProtoMessage()    {}
func (*SpiderSubnetReqInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{53}
}
func (m *SpiderSubnetReqInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderSubnetReqInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderSubnetReqInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderSubnetReqInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderSubnetReqInfo.Merge(m, src)
}
func (m *SpiderSubnetReqInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderSubnetReqInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderSubnetReqInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderSubnetReqInfo proto.InternalMessageInfo

func (m *SpiderSubnetReqInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpiderSubnetReqInfo) GetIpv4Cidr() string {
	if m != nil {
		return m.Ipv4Cidr
	}
	return ""
}

func (m *SpiderSubnetReqInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type TbMcisInfoResponse struct {
	Item                 *TbMcisInfo `protobuf:"bytes,1,opt,name=item,json=mcis,proto3" json:"mcis" yaml:"mcis"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbMcisInfoResponse) Reset()         { *m = TbMcisInfoResponse{} }
func (m *TbMcisInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbMcisInfoResponse) ProtoMessage()    {}
func (*TbMcisInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{54}
}
func (m *TbMcisInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisInfoResponse.Merge(m, src)
}
func (m *TbMcisInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisInfoResponse proto.InternalMessageInfo

func (m *TbMcisInfoResponse) GetItem() *TbMcisInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListTbMcisInfoResponse struct {
	Items                []*TbMcisInfo `protobuf:"bytes,1,rep,name=items,json=mcis,proto3" json:"mcis" yaml:"mcis"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListTbMcisInfoResponse) Reset()         { *m = ListTbMcisInfoResponse{} }
func (m *ListTbMcisInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListTbMcisInfoResponse) ProtoMessage()    {}
func (*ListTbMcisInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{55}
}
func (m *ListTbMcisInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTbMcisInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTbMcisInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTbMcisInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTbMcisInfoResponse.Merge(m, src)
}
func (m *ListTbMcisInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTbMcisInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTbMcisInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTbMcisInfoResponse proto.InternalMessageInfo

func (m *ListTbMcisInfoResponse) GetItems() []*TbMcisInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type TbMcisInfo struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	Vm                   []*TbVmInfo `protobuf:"bytes,3,rep,name=vm,proto3" json:"vm" yaml:"vm"`
	PlacementAlgo        string      `protobuf:"bytes,4,opt,name=placement_algo,proto3" json:"placement_algo" yaml:"placement_algo"`
	Description          string      `protobuf:"bytes,5,opt,name=description,proto3" json:"description" yaml:"description"`
	Status               string      `protobuf:"bytes,6,opt,name=status,proto3" json:"status" yaml:"status"`
	TargetStatus         string      `protobuf:"bytes,7,opt,name=target_status,json=targetStatus,proto3" json:"targetStatus" yaml:"targetStatus"`
	TargetAction         string      `protobuf:"bytes,8,opt,name=target_action,json=targetAction,proto3" json:"targetAction" yaml:"targetAction"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbMcisInfo) Reset()         { *m = TbMcisInfo{} }
func (m *TbMcisInfo) String() string { return proto.CompactTextString(m) }
func (*TbMcisInfo) ProtoMessage()    {}
func (*TbMcisInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{56}
}
func (m *TbMcisInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisInfo.Merge(m, src)
}
func (m *TbMcisInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisInfo proto.InternalMessageInfo

func (m *TbMcisInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbMcisInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbMcisInfo) GetVm() []*TbVmInfo {
	if m != nil {
		return m.Vm
	}
	return nil
}

func (m *TbMcisInfo) GetPlacementAlgo() string {
	if m != nil {
		return m.PlacementAlgo
	}
	return ""
}

func (m *TbMcisInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbMcisInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TbMcisInfo) GetTargetStatus() string {
	if m != nil {
		return m.TargetStatus
	}
	return ""
}

func (m *TbMcisInfo) GetTargetAction() string {
	if m != nil {
		return m.TargetAction
	}
	return ""
}

type TbVmInfo struct {
	Id               string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name             string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName   string       `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	SpecId           string       `protobuf:"bytes,4,opt,name=spec_id,json=specId,proto3" json:"specId" yaml:"specId"`
	ImageId          string       `protobuf:"bytes,5,opt,name=image_id,json=imageId,proto3" json:"imageId" yaml:"imageId"`
	VnetId           string       `protobuf:"bytes,6,opt,name=vnet_id,json=vNetId,proto3" json:"vNetId" yaml:"vNetId"`
	SubnetId         string       `protobuf:"bytes,7,opt,name=subnet_id,json=subnetId,proto3" json:"subnetId" yaml:"subnetId"`
	SecurityGroupIds []string     `protobuf:"bytes,8,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"securityGroupIds" yaml:"securityGroupIds"`
	SshKeyId         string       `protobuf:"bytes,9,opt,name=ssh_key_id,json=sshKeyId,proto3" json:"sshKeyId" yaml:"sshKeyId"`
	VmUserAccount    string       `protobuf:"bytes,10,opt,name=vm_user_account,json=vmUserAccount,proto3" json:"vmUserAccount" yaml:"vmUserAccount"`
	VmUserPassword   string       `protobuf:"bytes,11,opt,name=vm_user_password,json=vmUserPassword,proto3" json:"vmUserPassword" yaml:"vmUserPassword"`
	Description      string       `protobuf:"bytes,12,opt,name=description,proto3" json:"description" yaml:"description"`
	Location         *GeoLocation `protobuf:"bytes,13,opt,name=location,proto3" json:"location" yaml:"location"`
	// 2. Provided by CB-Spider
	Region      *RegionInfo `protobuf:"bytes,14,opt,name=region,proto3" json:"region" yaml:"region"`
	PublicIp    string      `protobuf:"bytes,15,opt,name=public_ip,json=publicIP,proto3" json:"publicIP" yaml:"publicIP"`
	PublicDns   string      `protobuf:"bytes,16,opt,name=public_dns,json=publicDNS,proto3" json:"publicDNS" yaml:"publicDNS"`
	PrivateIp   string      `protobuf:"bytes,17,opt,name=private_ip,json=privateIP,proto3" json:"privateIP" yaml:"privateIP"`
	PrivateDns  string      `protobuf:"bytes,18,opt,name=private_dns,json=privateDNS,proto3" json:"privateDNS" yaml:"privateDNS"`
	VmBootDisk  string      `protobuf:"bytes,19,opt,name=vm_boot_disk,json=vmBootDisk,proto3" json:"vmBootDisk" yaml:"vmBootDisk"`
	VmBlockDisk string      `protobuf:"bytes,20,opt,name=vm_block_disk,json=vmBlockDisk,proto3" json:"vmBlockDisk" yaml:"vmBlockDisk"`
	// 3. Required by CB-Tumblebug
	Status               string        `protobuf:"bytes,21,opt,name=status,proto3" json:"status" yaml:"status"`
	TargetStatus         string        `protobuf:"bytes,22,opt,name=target_status,json=targetStatus,proto3" json:"targetStatus" yaml:"targetStatus"`
	TargetAction         string        `protobuf:"bytes,23,opt,name=target_action,json=targetAction,proto3" json:"targetAction" yaml:"targetAction"`
	CspViewVmDetail      *SpiderVMInfo `protobuf:"bytes,24,opt,name=csp_view_vm_detail,json=cspViewVmDetail,proto3" json:"cspViewVmDetail" yaml:"cspViewVmDetail"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TbVmInfo) Reset()         { *m = TbVmInfo{} }
func (m *TbVmInfo) String() string { return proto.CompactTextString(m) }
func (*TbVmInfo) ProtoMessage()    {}
func (*TbVmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{57}
}
func (m *TbVmInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmInfo.Merge(m, src)
}
func (m *TbVmInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbVmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmInfo proto.InternalMessageInfo

func (m *TbVmInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbVmInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbVmInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbVmInfo) GetSpecId() string {
	if m != nil {
		return m.SpecId
	}
	return ""
}

func (m *TbVmInfo) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *TbVmInfo) GetVnetId() string {
	if m != nil {
		return m.VnetId
	}
	return ""
}

func (m *TbVmInfo) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func (m *TbVmInfo) GetSecurityGroupIds() []string {
	if m != nil {
		return m.SecurityGroupIds
	}
	return nil
}

func (m *TbVmInfo) GetSshKeyId() string {
	if m != nil {
		return m.SshKeyId
	}
	return ""
}

func (m *TbVmInfo) GetVmUserAccount() string {
	if m != nil {
		return m.VmUserAccount
	}
	return ""
}

func (m *TbVmInfo) GetVmUserPassword() string {
	if m != nil {
		return m.VmUserPassword
	}
	return ""
}

func (m *TbVmInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbVmInfo) GetLocation() *GeoLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TbVmInfo) GetRegion() *RegionInfo {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *TbVmInfo) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *TbVmInfo) GetPublicDns() string {
	if m != nil {
		return m.PublicDns
	}
	return ""
}

func (m *TbVmInfo) GetPrivateIp() string {
	if m != nil {
		return m.PrivateIp
	}
	return ""
}

func (m *TbVmInfo) GetPrivateDns() string {
	if m != nil {
		return m.PrivateDns
	}
	return ""
}

func (m *TbVmInfo) GetVmBootDisk() string {
	if m != nil {
		return m.VmBootDisk
	}
	return ""
}

func (m *TbVmInfo) GetVmBlockDisk() string {
	if m != nil {
		return m.VmBlockDisk
	}
	return ""
}

func (m *TbVmInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TbVmInfo) GetTargetStatus() string {
	if m != nil {
		return m.TargetStatus
	}
	return ""
}

func (m *TbVmInfo) GetTargetAction() string {
	if m != nil {
		return m.TargetAction
	}
	return ""
}

func (m *TbVmInfo) GetCspViewVmDetail() *SpiderVMInfo {
	if m != nil {
		return m.CspViewVmDetail
	}
	return nil
}

type GeoLocation struct {
	Latitude             string   `protobuf:"bytes,1,opt,name=latitude,proto3" json:"latitude" yaml:"latitude"`
	Longitude            string   `protobuf:"bytes,2,opt,name=longitude,proto3" json:"longitude" yaml:"longitude"`
	BriefAddr            string   `protobuf:"bytes,3,opt,name=brief_addr,json=briefAddr,proto3" json:"briefAddr" yaml:"briefAddr"`
	CloudType            string   `protobuf:"bytes,4,opt,name=cloud_type,json=cloudType,proto3" json:"cloudType" yaml:"cloudType"`
	NativeRegion         string   `protobuf:"bytes,5,opt,name=native_region,json=nativeRegion,proto3" json:"nativeRegion" yaml:"nativeRegion"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoLocation) Reset()         { *m = GeoLocation{} }
func (m *GeoLocation) String() string { return proto.CompactTextString(m) }
func (*GeoLocation) ProtoMessage()    {}
func (*GeoLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{58}
}
func (m *GeoLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeoLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeoLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeoLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoLocation.Merge(m, src)
}
func (m *GeoLocation) XXX_Size() int {
	return m.Size()
}
func (m *GeoLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoLocation.DiscardUnknown(m)
}

var xxx_messageInfo_GeoLocation proto.InternalMessageInfo

func (m *GeoLocation) GetLatitude() string {
	if m != nil {
		return m.Latitude
	}
	return ""
}

func (m *GeoLocation) GetLongitude() string {
	if m != nil {
		return m.Longitude
	}
	return ""
}

func (m *GeoLocation) GetBriefAddr() string {
	if m != nil {
		return m.BriefAddr
	}
	return ""
}

func (m *GeoLocation) GetCloudType() string {
	if m != nil {
		return m.CloudType
	}
	return ""
}

func (m *GeoLocation) GetNativeRegion() string {
	if m != nil {
		return m.NativeRegion
	}
	return ""
}

type RegionInfo struct {
	Region               string   `protobuf:"bytes,1,opt,name=region,json=Region,proto3" json:"Region" yaml:"Region"`
	Zone                 string   `protobuf:"bytes,2,opt,name=zone,json=Zone,proto3" json:"Zone" yaml:"Zone"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionInfo) Reset()         { *m = RegionInfo{} }
func (m *RegionInfo) String() string { return proto.CompactTextString(m) }
func (*RegionInfo) ProtoMessage()    {}
func (*RegionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{59}
}
func (m *RegionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionInfo.Merge(m, src)
}
func (m *RegionInfo) XXX_Size() int {
	return m.Size()
}
func (m *RegionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RegionInfo proto.InternalMessageInfo

func (m *RegionInfo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *RegionInfo) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

type SpiderVMInfo struct {
	// Fields for request
	Name               string   `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"Name" yaml:"Name"`
	ImageName          string   `protobuf:"bytes,2,opt,name=image_name,json=ImageName,proto3" json:"ImageName" yaml:"ImageName"`
	VpcName            string   `protobuf:"bytes,3,opt,name=vpc_name,json=VPCName,proto3" json:"VPCName" yaml:"VPCName"`
	SubnetName         string   `protobuf:"bytes,4,opt,name=subnet_name,json=SubnetName,proto3" json:"SubnetName" yaml:"SubnetName"`
	SecurityGroupNames []string `protobuf:"bytes,5,rep,name=security_group_names,json=SecurityGroupNames,proto3" json:"SecurityGroupNames" yaml:"SecurityGroupNames"`
	KeyPairName        string   `protobuf:"bytes,6,opt,name=key_pair_name,json=KeyPairName,proto3" json:"KeyPairName" yaml:"KeyPairName"`
	// Fields for both request and response
	VmSpecName   string `protobuf:"bytes,7,opt,name=vm_spec_name,json=VMSpecName,proto3" json:"VMSpecName" yaml:"VMSpecName"`
	VmUserId     string `protobuf:"bytes,8,opt,name=vm_user_id,json=VMUserId,proto3" json:"VMUserId" yaml:"VMUserId"`
	VmUserPasswd string `protobuf:"bytes,9,opt,name=vm_user_passwd,json=VMUserPasswd,proto3" json:"VMUserPasswd" yaml:"VMUserPasswd"`
	// Fields for response
	Iid                  *IID        `protobuf:"bytes,10,opt,name=iid,json=IId,proto3" json:"IId" yaml:"IId"`
	ImageIid             *IID        `protobuf:"bytes,11,opt,name=image_iid,json=ImageIId,proto3" json:"ImageIId" yaml:"ImageIId"`
	VpcIid               *IID        `protobuf:"bytes,12,opt,name=vpc_iid,json=VpcIID,proto3" json:"VpcIID" yaml:"VpcIID"`
	SubnetIid            *IID        `protobuf:"bytes,13,opt,name=subnet_iid,json=SubnetIID,proto3" json:"SubnetIID" yaml:"SubnetIID"`
	SecurityGroupIids    []*IID      `protobuf:"bytes,14,rep,name=security_group_iids,json=SecurityGroupIIds,proto3" json:"SecurityGroupIIds" yaml:"SecurityGroupIIds"`
	KeyPairIid           *IID        `protobuf:"bytes,15,opt,name=key_pair_iid,json=KeyPairIId,proto3" json:"KeyPairIId" yaml:"KeyPairIId"`
	StartTime            string      `protobuf:"bytes,16,opt,name=start_time,json=StartTime,proto3" json:"StartTime" yaml:"StartTime"`
	Region               *RegionInfo `protobuf:"bytes,17,opt,name=region,json=Region,proto3" json:"Region" yaml:"Region"`
	NetworkInterface     string      `protobuf:"bytes,18,opt,name=network_interface,json=NetworkInterface,proto3" json:"NetworkInterface" yaml:"NetworkInterface"`
	PublicIp             string      `protobuf:"bytes,19,opt,name=public_ip,json=PublicIP,proto3" json:"PublicIP" yaml:"PublicIP"`
	PublicDns            string      `protobuf:"bytes,20,opt,name=public_dns,json=PublicDNS,proto3" json:"PublicDNS" yaml:"PublicDNS"`
	PrivateIp            string      `protobuf:"bytes,21,opt,name=private_ip,json=PrivateIP,proto3" json:"PrivateIP" yaml:"PrivateIP"`
	PrivateDns           string      `protobuf:"bytes,22,opt,name=private_dns,json=PrivateDNS,proto3" json:"PrivateDNS" yaml:"PrivateDNS"`
	VmBootDisk           string      `protobuf:"bytes,23,opt,name=vm_boot_disk,json=VMBootDisk,proto3" json:"VMBootDisk" yaml:"VMBootDisk"`
	VmBlockDisk          string      `protobuf:"bytes,24,opt,name=vm_block_disk,json=VMBlockDisk,proto3" json:"VMBlockDisk" yaml:"VMBlockDisk"`
	KeyValueList         []*KeyValue `protobuf:"bytes,25,rep,name=key_value_list,json=KeyValueList,proto3" json:"KeyValueList" yaml:"KeyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SpiderVMInfo) Reset()         { *m = SpiderVMInfo{} }
func (m *SpiderVMInfo) String() string { return proto.CompactTextString(m) }
func (*SpiderVMInfo) ProtoMessage()    {}
func (*SpiderVMInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{60}
}
func (m *SpiderVMInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpiderVMInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpiderVMInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpiderVMInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiderVMInfo.Merge(m, src)
}
func (m *SpiderVMInfo) XXX_Size() int {
	return m.Size()
}
func (m *SpiderVMInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiderVMInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpiderVMInfo proto.InternalMessageInfo

func (m *SpiderVMInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpiderVMInfo) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *SpiderVMInfo) GetVpcName() string {
	if m != nil {
		return m.VpcName
	}
	return ""
}

func (m *SpiderVMInfo) GetSubnetName() string {
	if m != nil {
		return m.SubnetName
	}
	return ""
}

func (m *SpiderVMInfo) GetSecurityGroupNames() []string {
	if m != nil {
		return m.SecurityGroupNames
	}
	return nil
}

func (m *SpiderVMInfo) GetKeyPairName() string {
	if m != nil {
		return m.KeyPairName
	}
	return ""
}

func (m *SpiderVMInfo) GetVmSpecName() string {
	if m != nil {
		return m.VmSpecName
	}
	return ""
}

func (m *SpiderVMInfo) GetVmUserId() string {
	if m != nil {
		return m.VmUserId
	}
	return ""
}

func (m *SpiderVMInfo) GetVmUserPasswd() string {
	if m != nil {
		return m.VmUserPasswd
	}
	return ""
}

func (m *SpiderVMInfo) GetIid() *IID {
	if m != nil {
		return m.Iid
	}
	return nil
}

func (m *SpiderVMInfo) GetImageIid() *IID {
	if m != nil {
		return m.ImageIid
	}
	return nil
}

func (m *SpiderVMInfo) GetVpcIid() *IID {
	if m != nil {
		return m.VpcIid
	}
	return nil
}

func (m *SpiderVMInfo) GetSubnetIid() *IID {
	if m != nil {
		return m.SubnetIid
	}
	return nil
}

func (m *SpiderVMInfo) GetSecurityGroupIids() []*IID {
	if m != nil {
		return m.SecurityGroupIids
	}
	return nil
}

func (m *SpiderVMInfo) GetKeyPairIid() *IID {
	if m != nil {
		return m.KeyPairIid
	}
	return nil
}

func (m *SpiderVMInfo) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *SpiderVMInfo) GetRegion() *RegionInfo {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *SpiderVMInfo) GetNetworkInterface() string {
	if m != nil {
		return m.NetworkInterface
	}
	return ""
}

func (m *SpiderVMInfo) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *SpiderVMInfo) GetPublicDns() string {
	if m != nil {
		return m.PublicDns
	}
	return ""
}

func (m *SpiderVMInfo) GetPrivateIp() string {
	if m != nil {
		return m.PrivateIp
	}
	return ""
}

func (m *SpiderVMInfo) GetPrivateDns() string {
	if m != nil {
		return m.PrivateDns
	}
	return ""
}

func (m *SpiderVMInfo) GetVmBootDisk() string {
	if m != nil {
		return m.VmBootDisk
	}
	return ""
}

func (m *SpiderVMInfo) GetVmBlockDisk() string {
	if m != nil {
		return m.VmBlockDisk
	}
	return ""
}

func (m *SpiderVMInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type TbMcisCreateRequest struct {
	NsId                 string     `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *TbMcisReq `protobuf:"bytes,2,opt,name=item,json=mcis,proto3" json:"mcis" yaml:"mcis"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TbMcisCreateRequest) Reset()         { *m = TbMcisCreateRequest{} }
func (m *TbMcisCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbMcisCreateRequest) ProtoMessage()    {}
func (*TbMcisCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{61}
}
func (m *TbMcisCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisCreateRequest.Merge(m, src)
}
func (m *TbMcisCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisCreateRequest proto.InternalMessageInfo

func (m *TbMcisCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbMcisCreateRequest) GetItem() *TbMcisReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbMcisReq struct {
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	Vm                   []*TbVmReq `protobuf:"bytes,2,rep,name=vm,proto3" json:"vm" yaml:"vm"`
	PlacementAlgo        string     `protobuf:"bytes,3,opt,name=placement_algo,proto3" json:"placement_algo" yaml:"placement_algo"`
	Description          string     `protobuf:"bytes,4,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TbMcisReq) Reset()         { *m = TbMcisReq{} }
func (m *TbMcisReq) String() string { return proto.CompactTextString(m) }
func (*TbMcisReq) ProtoMessage()    {}
func (*TbMcisReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{62}
}
func (m *TbMcisReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisReq.Merge(m, src)
}
func (m *TbMcisReq) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisReq proto.InternalMessageInfo

func (m *TbMcisReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbMcisReq) GetVm() []*TbVmReq {
	if m != nil {
		return m.Vm
	}
	return nil
}

func (m *TbMcisReq) GetPlacementAlgo() string {
	if m != nil {
		return m.PlacementAlgo
	}
	return ""
}

func (m *TbMcisReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type TbVmReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string   `protobuf:"bytes,2,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	SpecId               string   `protobuf:"bytes,3,opt,name=spec_id,json=specId,proto3" json:"specId" yaml:"specId"`
	ImageId              string   `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3" json:"imageId" yaml:"imageId"`
	VnetId               string   `protobuf:"bytes,5,opt,name=vnet_id,json=vNetId,proto3" json:"vNetId" yaml:"vNetId"`
	SubnetId             string   `protobuf:"bytes,6,opt,name=subnet_id,json=subnetId,proto3" json:"subnetId" yaml:"subnetId"`
	SecurityGroupIds     []string `protobuf:"bytes,7,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"securityGroupIds" yaml:"securityGroupIds"`
	SshKeyId             string   `protobuf:"bytes,8,opt,name=ssh_key_id,json=sshKeyId,proto3" json:"sshKeyId" yaml:"sshKeyId"`
	VmUserAccount        string   `protobuf:"bytes,9,opt,name=vm_user_account,json=vmUserAccount,proto3" json:"vmUserAccount" yaml:"vmUserAccount"`
	VmUserPassword       string   `protobuf:"bytes,10,opt,name=vm_user_password,json=vmUserPassword,proto3" json:"vmUserPassword" yaml:"vmUserPassword"`
	Description          string   `protobuf:"bytes,11,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbVmReq) Reset()         { *m = TbVmReq{} }
func (m *TbVmReq) String() string { return proto.CompactTextString(m) }
func (*TbVmReq) ProtoMessage()    {}
func (*TbVmReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{63}
}
func (m *TbVmReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmReq.Merge(m, src)
}
func (m *TbVmReq) XXX_Size() int {
	return m.Size()
}
func (m *TbVmReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmReq proto.InternalMessageInfo

func (m *TbVmReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbVmReq) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbVmReq) GetSpecId() string {
	if m != nil {
		return m.SpecId
	}
	return ""
}

func (m *TbVmReq) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *TbVmReq) GetVnetId() string {
	if m != nil {
		return m.VnetId
	}
	return ""
}

func (m *TbVmReq) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func (m *TbVmReq) GetSecurityGroupIds() []string {
	if m != nil {
		return m.SecurityGroupIds
	}
	return nil
}

func (m *TbVmReq) GetSshKeyId() string {
	if m != nil {
		return m.SshKeyId
	}
	return ""
}

func (m *TbVmReq) GetVmUserAccount() string {
	if m != nil {
		return m.VmUserAccount
	}
	return ""
}

func (m *TbVmReq) GetVmUserPassword() string {
	if m != nil {
		return m.VmUserPassword
	}
	return ""
}

func (m *TbVmReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type TbMcisStatusInfoResponse struct {
	Item                 *McisStatusInfo `protobuf:"bytes,1,opt,name=item,json=status,proto3" json:"status" yaml:"status"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TbMcisStatusInfoResponse) Reset()         { *m = TbMcisStatusInfoResponse{} }
func (m *TbMcisStatusInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbMcisStatusInfoResponse) ProtoMessage()    {}
func (*TbMcisStatusInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{64}
}
func (m *TbMcisStatusInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisStatusInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisStatusInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisStatusInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisStatusInfoResponse.Merge(m, src)
}
func (m *TbMcisStatusInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisStatusInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisStatusInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisStatusInfoResponse proto.InternalMessageInfo

func (m *TbMcisStatusInfoResponse) GetItem() *McisStatusInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type McisStatusInfo struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	//Vm_num string         `json:"vm_num"`
	Status               string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status" yaml:"status"`
	TargetStatus         string            `protobuf:"bytes,4,opt,name=target_status,json=targetStatus,proto3" json:"targetStatus" yaml:"targetStatus"`
	TargetAction         string            `protobuf:"bytes,5,opt,name=target_action,json=targetAction,proto3" json:"targetAction" yaml:"targetAction"`
	Vm                   []*TbVmStatusInfo `protobuf:"bytes,6,rep,name=vm,proto3" json:"vm" yaml:"vm"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *McisStatusInfo) Reset()         { *m = McisStatusInfo{} }
func (m *McisStatusInfo) String() string { return proto.CompactTextString(m) }
func (*McisStatusInfo) ProtoMessage()    {}
func (*McisStatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{65}
}
func (m *McisStatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisStatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisStatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisStatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisStatusInfo.Merge(m, src)
}
func (m *McisStatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *McisStatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_McisStatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_McisStatusInfo proto.InternalMessageInfo

func (m *McisStatusInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *McisStatusInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *McisStatusInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *McisStatusInfo) GetTargetStatus() string {
	if m != nil {
		return m.TargetStatus
	}
	return ""
}

func (m *McisStatusInfo) GetTargetAction() string {
	if m != nil {
		return m.TargetAction
	}
	return ""
}

func (m *McisStatusInfo) GetVm() []*TbVmStatusInfo {
	if m != nil {
		return m.Vm
	}
	return nil
}

type TbVmStatusInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	CspVmId              string   `protobuf:"bytes,2,opt,name=csp_vm_id,proto3" json:"csp_vm_id" yaml:"csp_vm_id"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name" yaml:"name"`
	Status               string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status" yaml:"status"`
	TargetStatus         string   `protobuf:"bytes,5,opt,name=target_status,json=targetStatus,proto3" json:"targetStatus" yaml:"targetStatus"`
	TargetAction         string   `protobuf:"bytes,6,opt,name=target_action,json=targetAction,proto3" json:"targetAction" yaml:"targetAction"`
	NativeStatus         string   `protobuf:"bytes,7,opt,name=native_status,proto3" json:"native_status" yaml:"native_status"`
	PublicIp             string   `protobuf:"bytes,8,opt,name=public_ip,proto3" json:"public_ip" yaml:"public_ip"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbVmStatusInfo) Reset()         { *m = TbVmStatusInfo{} }
func (m *TbVmStatusInfo) String() string { return proto.CompactTextString(m) }
func (*TbVmStatusInfo) ProtoMessage()    {}
func (*TbVmStatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{66}
}
func (m *TbVmStatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmStatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmStatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmStatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmStatusInfo.Merge(m, src)
}
func (m *TbVmStatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbVmStatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmStatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmStatusInfo proto.InternalMessageInfo

func (m *TbVmStatusInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbVmStatusInfo) GetCspVmId() string {
	if m != nil {
		return m.CspVmId
	}
	return ""
}

func (m *TbVmStatusInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbVmStatusInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TbVmStatusInfo) GetTargetStatus() string {
	if m != nil {
		return m.TargetStatus
	}
	return ""
}

func (m *TbVmStatusInfo) GetTargetAction() string {
	if m != nil {
		return m.TargetAction
	}
	return ""
}

func (m *TbVmStatusInfo) GetNativeStatus() string {
	if m != nil {
		return m.NativeStatus
	}
	return ""
}

func (m *TbVmStatusInfo) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

type TbMcisAllQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Option               string   `protobuf:"bytes,2,opt,name=option,proto3" json:"option" yaml:"option"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbMcisAllQryRequest) Reset()         { *m = TbMcisAllQryRequest{} }
func (m *TbMcisAllQryRequest) String() string { return proto.CompactTextString(m) }
func (*TbMcisAllQryRequest) ProtoMessage()    {}
func (*TbMcisAllQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{67}
}
func (m *TbMcisAllQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisAllQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisAllQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisAllQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisAllQryRequest.Merge(m, src)
}
func (m *TbMcisAllQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisAllQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisAllQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisAllQryRequest proto.InternalMessageInfo

func (m *TbMcisAllQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbMcisAllQryRequest) GetOption() string {
	if m != nil {
		return m.Option
	}
	return ""
}

type TbMcisActionRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Action               string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action" yaml:"action"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbMcisActionRequest) Reset()         { *m = TbMcisActionRequest{} }
func (m *TbMcisActionRequest) String() string { return proto.CompactTextString(m) }
func (*TbMcisActionRequest) ProtoMessage()    {}
func (*TbMcisActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{68}
}
func (m *TbMcisActionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisActionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisActionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisActionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisActionRequest.Merge(m, src)
}
func (m *TbMcisActionRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisActionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisActionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisActionRequest proto.InternalMessageInfo

func (m *TbMcisActionRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbMcisActionRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *TbMcisActionRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type TbMcisQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbMcisQryRequest) Reset()         { *m = TbMcisQryRequest{} }
func (m *TbMcisQryRequest) String() string { return proto.CompactTextString(m) }
func (*TbMcisQryRequest) ProtoMessage()    {}
func (*TbMcisQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{69}
}
func (m *TbMcisQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbMcisQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbMcisQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbMcisQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbMcisQryRequest.Merge(m, src)
}
func (m *TbMcisQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbMcisQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbMcisQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbMcisQryRequest proto.InternalMessageInfo

func (m *TbMcisQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbMcisQryRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

type TbVmInfoResponse struct {
	Item                 *TbVmInfo `protobuf:"bytes,1,opt,name=item,json=mcisvm,proto3" json:"mcisvm" yaml:"mcisvm"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TbVmInfoResponse) Reset()         { *m = TbVmInfoResponse{} }
func (m *TbVmInfoResponse) String() string { return proto.CompactTextString(m) }
func (*TbVmInfoResponse) ProtoMessage()    {}
func (*TbVmInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{70}
}
func (m *TbVmInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmInfoResponse.Merge(m, src)
}
func (m *TbVmInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *TbVmInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmInfoResponse proto.InternalMessageInfo

func (m *TbVmInfoResponse) GetItem() *TbVmInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbVmCreateRequest struct {
	NsId                 string    `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string    `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Item                 *TbVmInfo `protobuf:"bytes,3,opt,name=item,json=mcisvm,proto3" json:"mcisvm" yaml:"mcisvm"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TbVmCreateRequest) Reset()         { *m = TbVmCreateRequest{} }
func (m *TbVmCreateRequest) String() string { return proto.CompactTextString(m) }
func (*TbVmCreateRequest) ProtoMessage()    {}
func (*TbVmCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{71}
}
func (m *TbVmCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmCreateRequest.Merge(m, src)
}
func (m *TbVmCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbVmCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmCreateRequest proto.InternalMessageInfo

func (m *TbVmCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbVmCreateRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *TbVmCreateRequest) GetItem() *TbVmInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbVmStatusInfoesponse struct {
	Item                 *TbVmStatusInfo `protobuf:"bytes,1,opt,name=item,json=statusvm,proto3" json:"statusvm" yaml:"statusvm"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TbVmStatusInfoesponse) Reset()         { *m = TbVmStatusInfoesponse{} }
func (m *TbVmStatusInfoesponse) String() string { return proto.CompactTextString(m) }
func (*TbVmStatusInfoesponse) ProtoMessage()    {}
func (*TbVmStatusInfoesponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{72}
}
func (m *TbVmStatusInfoesponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmStatusInfoesponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmStatusInfoesponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmStatusInfoesponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmStatusInfoesponse.Merge(m, src)
}
func (m *TbVmStatusInfoesponse) XXX_Size() int {
	return m.Size()
}
func (m *TbVmStatusInfoesponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmStatusInfoesponse.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmStatusInfoesponse proto.InternalMessageInfo

func (m *TbVmStatusInfoesponse) GetItem() *TbVmStatusInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type TbVmQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	VmId                 string   `protobuf:"bytes,3,opt,name=vm_id,json=vmId,proto3" json:"vmId" yaml:"vmId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbVmQryRequest) Reset()         { *m = TbVmQryRequest{} }
func (m *TbVmQryRequest) String() string { return proto.CompactTextString(m) }
func (*TbVmQryRequest) ProtoMessage()    {}
func (*TbVmQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{73}
}
func (m *TbVmQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmQryRequest.Merge(m, src)
}
func (m *TbVmQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbVmQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmQryRequest proto.InternalMessageInfo

func (m *TbVmQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbVmQryRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *TbVmQryRequest) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

type TbVmActionRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	VmId                 string   `protobuf:"bytes,3,opt,name=vm_id,json=vmId,proto3" json:"vmId" yaml:"vmId"`
	Action               string   `protobuf:"bytes,4,opt,name=action,proto3" json:"action" yaml:"action"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbVmActionRequest) Reset()         { *m = TbVmActionRequest{} }
func (m *TbVmActionRequest) String() string { return proto.CompactTextString(m) }
func (*TbVmActionRequest) ProtoMessage()    {}
func (*TbVmActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{74}
}
func (m *TbVmActionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmActionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmActionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmActionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmActionRequest.Merge(m, src)
}
func (m *TbVmActionRequest) XXX_Size() int {
	return m.Size()
}
func (m *TbVmActionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmActionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmActionRequest proto.InternalMessageInfo

func (m *TbVmActionRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *TbVmActionRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *TbVmActionRequest) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

func (m *TbVmActionRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type McisRecommendInfoResponse struct {
	Item                 *McisRecommendInfo `protobuf:"bytes,1,opt,name=item,json=recommend,proto3" json:"recommend" yaml:"recommend"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *McisRecommendInfoResponse) Reset()         { *m = McisRecommendInfoResponse{} }
func (m *McisRecommendInfoResponse) String() string { return proto.CompactTextString(m) }
func (*McisRecommendInfoResponse) ProtoMessage()    {}
func (*McisRecommendInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{75}
}
func (m *McisRecommendInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisRecommendInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisRecommendInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisRecommendInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisRecommendInfoResponse.Merge(m, src)
}
func (m *McisRecommendInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *McisRecommendInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_McisRecommendInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_McisRecommendInfoResponse proto.InternalMessageInfo

func (m *McisRecommendInfoResponse) GetItem() *McisRecommendInfo {
	if m != nil {
		return m.Item
	}
	return nil
}

type McisRecommendInfo struct {
	VmRecommend          []*TbVmRecommendInfo `protobuf:"bytes,1,rep,name=vm_recommend,proto3" json:"vm_recommend" yaml:"vm_recommend"`
	PlacementAlgo        string               `protobuf:"bytes,2,opt,name=placement_algo,proto3" json:"placement_algo" yaml:"placement_algo"`
	PlacementParam       []*KeyValue          `protobuf:"bytes,3,rep,name=placement_param,proto3" json:"placement_param" yaml:"placement_param"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *McisRecommendInfo) Reset()         { *m = McisRecommendInfo{} }
func (m *McisRecommendInfo) String() string { return proto.CompactTextString(m) }
func (*McisRecommendInfo) ProtoMessage()    {}
func (*McisRecommendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{76}
}
func (m *McisRecommendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisRecommendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisRecommendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisRecommendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisRecommendInfo.Merge(m, src)
}
func (m *McisRecommendInfo) XXX_Size() int {
	return m.Size()
}
func (m *McisRecommendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_McisRecommendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_McisRecommendInfo proto.InternalMessageInfo

func (m *McisRecommendInfo) GetVmRecommend() []*TbVmRecommendInfo {
	if m != nil {
		return m.VmRecommend
	}
	return nil
}

func (m *McisRecommendInfo) GetPlacementAlgo() string {
	if m != nil {
		return m.PlacementAlgo
	}
	return ""
}

func (m *McisRecommendInfo) GetPlacementParam() []*KeyValue {
	if m != nil {
		return m.PlacementParam
	}
	return nil
}

type TbVmRecommendInfo struct {
	VmReq                *TbVmRecommendReq `protobuf:"bytes,1,opt,name=vm_req,proto3" json:"vm_req" yaml:"vm_req"`
	VmPriority           []*TbVmPriority   `protobuf:"bytes,2,rep,name=vm_priority,proto3" json:"vm_priority" yaml:"vm_priority"`
	PlacementAlgo        string            `protobuf:"bytes,3,opt,name=placement_algo,proto3" json:"placement_algo" yaml:"placement_algo"`
	PlacementParam       []*KeyValue       `protobuf:"bytes,4,rep,name=placement_param,proto3" json:"placement_param" yaml:"placement_param"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TbVmRecommendInfo) Reset()         { *m = TbVmRecommendInfo{} }
func (m *TbVmRecommendInfo) String() string { return proto.CompactTextString(m) }
func (*TbVmRecommendInfo) ProtoMessage()    {}
func (*TbVmRecommendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{77}
}
func (m *TbVmRecommendInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmRecommendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmRecommendInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmRecommendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmRecommendInfo.Merge(m, src)
}
func (m *TbVmRecommendInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbVmRecommendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmRecommendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmRecommendInfo proto.InternalMessageInfo

func (m *TbVmRecommendInfo) GetVmReq() *TbVmRecommendReq {
	if m != nil {
		return m.VmReq
	}
	return nil
}

func (m *TbVmRecommendInfo) GetVmPriority() []*TbVmPriority {
	if m != nil {
		return m.VmPriority
	}
	return nil
}

func (m *TbVmRecommendInfo) GetPlacementAlgo() string {
	if m != nil {
		return m.PlacementAlgo
	}
	return ""
}

func (m *TbVmRecommendInfo) GetPlacementParam() []*KeyValue {
	if m != nil {
		return m.PlacementParam
	}
	return nil
}

type TbVmPriority struct {
	Priority             string      `protobuf:"bytes,1,opt,name=priority,proto3" json:"priority" yaml:"priority"`
	VmSpec               *TbSpecInfo `protobuf:"bytes,2,opt,name=vm_spec,proto3" json:"vm_spec" yaml:"vm_spec"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbVmPriority) Reset()         { *m = TbVmPriority{} }
func (m *TbVmPriority) String() string { return proto.CompactTextString(m) }
func (*TbVmPriority) ProtoMessage()    {}
func (*TbVmPriority) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{78}
}
func (m *TbVmPriority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmPriority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmPriority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmPriority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmPriority.Merge(m, src)
}
func (m *TbVmPriority) XXX_Size() int {
	return m.Size()
}
func (m *TbVmPriority) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmPriority.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmPriority proto.InternalMessageInfo

func (m *TbVmPriority) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

func (m *TbVmPriority) GetVmSpec() *TbSpecInfo {
	if m != nil {
		return m.VmSpec
	}
	return nil
}

type McisRecommendCreateRequest struct {
	NsId                 string            `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	Item                 *McisRecommendReq `protobuf:"bytes,2,opt,name=item,json=recommend,proto3" json:"recommend" yaml:"recommend"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *McisRecommendCreateRequest) Reset()         { *m = McisRecommendCreateRequest{} }
func (m *McisRecommendCreateRequest) String() string { return proto.CompactTextString(m) }
func (*McisRecommendCreateRequest) ProtoMessage()    {}
func (*McisRecommendCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{79}
}
func (m *McisRecommendCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisRecommendCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisRecommendCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisRecommendCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisRecommendCreateRequest.Merge(m, src)
}
func (m *McisRecommendCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *McisRecommendCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_McisRecommendCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_McisRecommendCreateRequest proto.InternalMessageInfo

func (m *McisRecommendCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *McisRecommendCreateRequest) GetItem() *McisRecommendReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type McisRecommendReq struct {
	VmReq                []*TbVmRecommendReq `protobuf:"bytes,1,rep,name=vm_req,proto3" json:"vm_req" yaml:"vm_req"`
	PlacementAlgo        string              `protobuf:"bytes,2,opt,name=placement_algo,proto3" json:"placement_algo" yaml:"placement_algo"`
	PlacementParam       []*KeyValue         `protobuf:"bytes,3,rep,name=placement_param,proto3" json:"placement_param" yaml:"placement_param"`
	MaxResultNum         string              `protobuf:"bytes,4,opt,name=max_result_num,proto3" json:"max_result_num" yaml:"max_result_num"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *McisRecommendReq) Reset()         { *m = McisRecommendReq{} }
func (m *McisRecommendReq) String() string { return proto.CompactTextString(m) }
func (*McisRecommendReq) ProtoMessage()    {}
func (*McisRecommendReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{80}
}
func (m *McisRecommendReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisRecommendReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisRecommendReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisRecommendReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisRecommendReq.Merge(m, src)
}
func (m *McisRecommendReq) XXX_Size() int {
	return m.Size()
}
func (m *McisRecommendReq) XXX_DiscardUnknown() {
	xxx_messageInfo_McisRecommendReq.DiscardUnknown(m)
}

var xxx_messageInfo_McisRecommendReq proto.InternalMessageInfo

func (m *McisRecommendReq) GetVmReq() []*TbVmRecommendReq {
	if m != nil {
		return m.VmReq
	}
	return nil
}

func (m *McisRecommendReq) GetPlacementAlgo() string {
	if m != nil {
		return m.PlacementAlgo
	}
	return ""
}

func (m *McisRecommendReq) GetPlacementParam() []*KeyValue {
	if m != nil {
		return m.PlacementParam
	}
	return nil
}

func (m *McisRecommendReq) GetMaxResultNum() string {
	if m != nil {
		return m.MaxResultNum
	}
	return ""
}

type TbVmRecommendReq struct {
	RequestName          string      `protobuf:"bytes,1,opt,name=request_name,proto3" json:"request_name" yaml:"request_name"`
	MaxResultNum         string      `protobuf:"bytes,2,opt,name=max_result_num,proto3" json:"max_result_num" yaml:"max_result_num"`
	VcpuSize             string      `protobuf:"bytes,3,opt,name=vcpu_size,proto3" json:"vcpu_size" yaml:"vcpu_size"`
	MemorySize           string      `protobuf:"bytes,4,opt,name=memory_size,proto3" json:"memory_size" yaml:"memory_size"`
	DiskSize             string      `protobuf:"bytes,5,opt,name=disk_size,proto3" json:"disk_size" yaml:"disk_size"`
	PlacementAlgo        string      `protobuf:"bytes,6,opt,name=placement_algo,proto3" json:"placement_algo" yaml:"placement_algo"`
	PlacementParam       []*KeyValue `protobuf:"bytes,7,rep,name=placement_param,proto3" json:"placement_param" yaml:"placement_param"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbVmRecommendReq) Reset()         { *m = TbVmRecommendReq{} }
func (m *TbVmRecommendReq) String() string { return proto.CompactTextString(m) }
func (*TbVmRecommendReq) ProtoMessage()    {}
func (*TbVmRecommendReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{81}
}
func (m *TbVmRecommendReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbVmRecommendReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbVmRecommendReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbVmRecommendReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbVmRecommendReq.Merge(m, src)
}
func (m *TbVmRecommendReq) XXX_Size() int {
	return m.Size()
}
func (m *TbVmRecommendReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbVmRecommendReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbVmRecommendReq proto.InternalMessageInfo

func (m *TbVmRecommendReq) GetRequestName() string {
	if m != nil {
		return m.RequestName
	}
	return ""
}

func (m *TbVmRecommendReq) GetMaxResultNum() string {
	if m != nil {
		return m.MaxResultNum
	}
	return ""
}

func (m *TbVmRecommendReq) GetVcpuSize() string {
	if m != nil {
		return m.VcpuSize
	}
	return ""
}

func (m *TbVmRecommendReq) GetMemorySize() string {
	if m != nil {
		return m.MemorySize
	}
	return ""
}

func (m *TbVmRecommendReq) GetDiskSize() string {
	if m != nil {
		return m.DiskSize
	}
	return ""
}

func (m *TbVmRecommendReq) GetPlacementAlgo() string {
	if m != nil {
		return m.PlacementAlgo
	}
	return ""
}

func (m *TbVmRecommendReq) GetPlacementParam() []*KeyValue {
	if m != nil {
		return m.PlacementParam
	}
	return nil
}

type ListCmdMcisResponse struct {
	Items                []*CmdMcisResult `protobuf:"bytes,1,rep,name=items,json=cmd,proto3" json:"cmd" yaml:"cmd"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListCmdMcisResponse) Reset()         { *m = ListCmdMcisResponse{} }
func (m *ListCmdMcisResponse) String() string { return proto.CompactTextString(m) }
func (*ListCmdMcisResponse) ProtoMessage()    {}
func (*ListCmdMcisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{82}
}
func (m *ListCmdMcisResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCmdMcisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCmdMcisResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCmdMcisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCmdMcisResponse.Merge(m, src)
}
func (m *ListCmdMcisResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCmdMcisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCmdMcisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCmdMcisResponse proto.InternalMessageInfo

func (m *ListCmdMcisResponse) GetItems() []*CmdMcisResult {
	if m != nil {
		return m.Items
	}
	return nil
}

type CmdMcisResult struct {
	McisId               string   `protobuf:"bytes,1,opt,name=mcis_id,proto3" json:"mcis_id" yaml:"mcis_id"`
	VmId                 string   `protobuf:"bytes,2,opt,name=vm_id,proto3" json:"vm_id" yaml:"vm_id"`
	VmIp                 string   `protobuf:"bytes,3,opt,name=vm_ip,proto3" json:"vm_ip" yaml:"vm_ip"`
	Result               string   `protobuf:"bytes,4,opt,name=result,proto3" json:"result" yaml:"result"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmdMcisResult) Reset()         { *m = CmdMcisResult{} }
func (m *CmdMcisResult) String() string { return proto.CompactTextString(m) }
func (*CmdMcisResult) ProtoMessage()    {}
func (*CmdMcisResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{83}
}
func (m *CmdMcisResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmdMcisResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmdMcisResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmdMcisResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdMcisResult.Merge(m, src)
}
func (m *CmdMcisResult) XXX_Size() int {
	return m.Size()
}
func (m *CmdMcisResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdMcisResult.DiscardUnknown(m)
}

var xxx_messageInfo_CmdMcisResult proto.InternalMessageInfo

func (m *CmdMcisResult) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *CmdMcisResult) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

func (m *CmdMcisResult) GetVmIp() string {
	if m != nil {
		return m.VmIp
	}
	return ""
}

func (m *CmdMcisResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type McisCmdCreateRequest struct {
	NsId                 string      `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string      `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Item                 *McisCmdReq `protobuf:"bytes,3,opt,name=item,json=cmd,proto3" json:"cmd" yaml:"cmd"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *McisCmdCreateRequest) Reset()         { *m = McisCmdCreateRequest{} }
func (m *McisCmdCreateRequest) String() string { return proto.CompactTextString(m) }
func (*McisCmdCreateRequest) ProtoMessage()    {}
func (*McisCmdCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{84}
}
func (m *McisCmdCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisCmdCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisCmdCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisCmdCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisCmdCreateRequest.Merge(m, src)
}
func (m *McisCmdCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *McisCmdCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_McisCmdCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_McisCmdCreateRequest proto.InternalMessageInfo

func (m *McisCmdCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *McisCmdCreateRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *McisCmdCreateRequest) GetItem() *McisCmdReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type McisCmdVmCreateRequest struct {
	NsId                 string      `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string      `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	VmId                 string      `protobuf:"bytes,3,opt,name=vm_id,json=vmId,proto3" json:"vmId" yaml:"vmId"`
	Item                 *McisCmdReq `protobuf:"bytes,4,opt,name=item,json=cmd,proto3" json:"cmd" yaml:"cmd"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *McisCmdVmCreateRequest) Reset()         { *m = McisCmdVmCreateRequest{} }
func (m *McisCmdVmCreateRequest) String() string { return proto.CompactTextString(m) }
func (*McisCmdVmCreateRequest) ProtoMessage()    {}
func (*McisCmdVmCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{85}
}
func (m *McisCmdVmCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisCmdVmCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisCmdVmCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisCmdVmCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisCmdVmCreateRequest.Merge(m, src)
}
func (m *McisCmdVmCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *McisCmdVmCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_McisCmdVmCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_McisCmdVmCreateRequest proto.InternalMessageInfo

func (m *McisCmdVmCreateRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *McisCmdVmCreateRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *McisCmdVmCreateRequest) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

func (m *McisCmdVmCreateRequest) GetItem() *McisCmdReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type McisCmdReq struct {
	McisId               string   `protobuf:"bytes,1,opt,name=mcis_id,proto3" json:"mcis_id" yaml:"mcis_id"`
	VmId                 string   `protobuf:"bytes,2,opt,name=vm_id,proto3" json:"vm_id" yaml:"vm_id"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip" yaml:"ip"`
	UserName             string   `protobuf:"bytes,4,opt,name=user_name,proto3" json:"user_name" yaml:"user_name"`
	SshKey               string   `protobuf:"bytes,5,opt,name=ssh_key,proto3" json:"ssh_key" yaml:"ssh_key"`
	Command              string   `protobuf:"bytes,6,opt,name=command,proto3" json:"command" yaml:"command"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *McisCmdReq) Reset()         { *m = McisCmdReq{} }
func (m *McisCmdReq) String() string { return proto.CompactTextString(m) }
func (*McisCmdReq) ProtoMessage()    {}
func (*McisCmdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{86}
}
func (m *McisCmdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *McisCmdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_McisCmdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *McisCmdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_McisCmdReq.Merge(m, src)
}
func (m *McisCmdReq) XXX_Size() int {
	return m.Size()
}
func (m *McisCmdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_McisCmdReq.DiscardUnknown(m)
}

var xxx_messageInfo_McisCmdReq proto.InternalMessageInfo

func (m *McisCmdReq) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *McisCmdReq) GetVmId() string {
	if m != nil {
		return m.VmId
	}
	return ""
}

func (m *McisCmdReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *McisCmdReq) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *McisCmdReq) GetSshKey() string {
	if m != nil {
		return m.SshKey
	}
	return ""
}

func (m *McisCmdReq) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type ListAgentInstallResponse struct {
	Items                []*CmdMcisResult `protobuf:"bytes,1,rep,name=items,json=result_array,proto3" json:"result_array" yaml:"result_array"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListAgentInstallResponse) Reset()         { *m = ListAgentInstallResponse{} }
func (m *ListAgentInstallResponse) String() string { return proto.CompactTextString(m) }
func (*ListAgentInstallResponse) ProtoMessage()    {}
func (*ListAgentInstallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{87}
}
func (m *ListAgentInstallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAgentInstallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAgentInstallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAgentInstallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAgentInstallResponse.Merge(m, src)
}
func (m *ListAgentInstallResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAgentInstallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAgentInstallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAgentInstallResponse proto.InternalMessageInfo

func (m *ListAgentInstallResponse) GetItems() []*CmdMcisResult {
	if m != nil {
		return m.Items
	}
	return nil
}

type MonitorQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Metric               string   `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric" yaml:"metric"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitorQryRequest) Reset()         { *m = MonitorQryRequest{} }
func (m *MonitorQryRequest) String() string { return proto.CompactTextString(m) }
func (*MonitorQryRequest) ProtoMessage()    {}
func (*MonitorQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{88}
}
func (m *MonitorQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonitorQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonitorQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonitorQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitorQryRequest.Merge(m, src)
}
func (m *MonitorQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *MonitorQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitorQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MonitorQryRequest proto.InternalMessageInfo

func (m *MonitorQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *MonitorQryRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *MonitorQryRequest) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

type ListBenchmarkInfoResponse struct {
	Items                []*BenchmarkInfo `protobuf:"bytes,1,rep,name=items,json=resultarray,proto3" json:"resultarray" yaml:"resultarray"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ListBenchmarkInfoResponse) Reset()         { *m = ListBenchmarkInfoResponse{} }
func (m *ListBenchmarkInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ListBenchmarkInfoResponse) ProtoMessage()    {}
func (*ListBenchmarkInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{89}
}
func (m *ListBenchmarkInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBenchmarkInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBenchmarkInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBenchmarkInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBenchmarkInfoResponse.Merge(m, src)
}
func (m *ListBenchmarkInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListBenchmarkInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBenchmarkInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBenchmarkInfoResponse proto.InternalMessageInfo

func (m *ListBenchmarkInfoResponse) GetItems() []*BenchmarkInfo {
	if m != nil {
		return m.Items
	}
	return nil
}

type BenchmarkInfo struct {
	Result               string           `protobuf:"bytes,1,opt,name=result,proto3" json:"result" yaml:"result"`
	Unit                 string           `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit" yaml:"unit"`
	Desc                 string           `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc" yaml:"desc"`
	Elapsed              string           `protobuf:"bytes,4,opt,name=elapsed,proto3" json:"elapsed" yaml:"elapsed"`
	SpecId               string           `protobuf:"bytes,5,opt,name=spec_id,json=specid,proto3" json:"specid" yaml:"specid"`
	ResultArray          []*BenchmarkInfo `protobuf:"bytes,6,rep,name=result_array,json=resultarray,proto3" json:"resultarray" yaml:"resultarray"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BenchmarkInfo) Reset()         { *m = BenchmarkInfo{} }
func (m *BenchmarkInfo) String() string { return proto.CompactTextString(m) }
func (*BenchmarkInfo) ProtoMessage()    {}
func (*BenchmarkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{90}
}
func (m *BenchmarkInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BenchmarkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BenchmarkInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BenchmarkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BenchmarkInfo.Merge(m, src)
}
func (m *BenchmarkInfo) XXX_Size() int {
	return m.Size()
}
func (m *BenchmarkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BenchmarkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BenchmarkInfo proto.InternalMessageInfo

func (m *BenchmarkInfo) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *BenchmarkInfo) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *BenchmarkInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *BenchmarkInfo) GetElapsed() string {
	if m != nil {
		return m.Elapsed
	}
	return ""
}

func (m *BenchmarkInfo) GetSpecId() string {
	if m != nil {
		return m.SpecId
	}
	return ""
}

func (m *BenchmarkInfo) GetResultArray() []*BenchmarkInfo {
	if m != nil {
		return m.ResultArray
	}
	return nil
}

type BmQryAllRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Item                 *BmReq   `protobuf:"bytes,3,opt,name=item,json=bm,proto3" json:"bm" yaml:"bm"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BmQryAllRequest) Reset()         { *m = BmQryAllRequest{} }
func (m *BmQryAllRequest) String() string { return proto.CompactTextString(m) }
func (*BmQryAllRequest) ProtoMessage()    {}
func (*BmQryAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{91}
}
func (m *BmQryAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BmQryAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BmQryAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BmQryAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BmQryAllRequest.Merge(m, src)
}
func (m *BmQryAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *BmQryAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BmQryAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BmQryAllRequest proto.InternalMessageInfo

func (m *BmQryAllRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *BmQryAllRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *BmQryAllRequest) GetItem() *BmReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type BmQryRequest struct {
	NsId                 string   `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	McisId               string   `protobuf:"bytes,2,opt,name=mcis_id,json=mcisId,proto3" json:"mcisId" yaml:"mcisId"`
	Action               string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action" yaml:"action"`
	Item                 *BmReq   `protobuf:"bytes,4,opt,name=item,json=bm,proto3" json:"bm" yaml:"bm"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BmQryRequest) Reset()         { *m = BmQryRequest{} }
func (m *BmQryRequest) String() string { return proto.CompactTextString(m) }
func (*BmQryRequest) ProtoMessage()    {}
func (*BmQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{92}
}
func (m *BmQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BmQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BmQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BmQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BmQryRequest.Merge(m, src)
}
func (m *BmQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *BmQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BmQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BmQryRequest proto.InternalMessageInfo

func (m *BmQryRequest) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *BmQryRequest) GetMcisId() string {
	if m != nil {
		return m.McisId
	}
	return ""
}

func (m *BmQryRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *BmQryRequest) GetItem() *BmReq {
	if m != nil {
		return m.Item
	}
	return nil
}

type BmReq struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host" yaml:"host"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BmReq) Reset()         { *m = BmReq{} }
func (m *BmReq) String() string { return proto.CompactTextString(m) }
func (*BmReq) ProtoMessage()    {}
func (*BmReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{93}
}
func (m *BmReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BmReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BmReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BmReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BmReq.Merge(m, src)
}
func (m *BmReq) XXX_Size() int {
	return m.Size()
}
func (m *BmReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BmReq.DiscardUnknown(m)
}

var xxx_messageInfo_BmReq proto.InternalMessageInfo

func (m *BmReq) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type ConnConfigResponse struct {
	Item                 *ConnConfig `protobuf:"bytes,1,opt,name=item,json=connectionconfig,proto3" json:"connectionconfig" yaml:"connectionconfig"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ConnConfigResponse) Reset()         { *m = ConnConfigResponse{} }
func (m *ConnConfigResponse) String() string { return proto.CompactTextString(m) }
func (*ConnConfigResponse) ProtoMessage()    {}
func (*ConnConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{94}
}
func (m *ConnConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnConfigResponse.Merge(m, src)
}
func (m *ConnConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConnConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnConfigResponse proto.InternalMessageInfo

func (m *ConnConfigResponse) GetItem() *ConnConfig {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListConnConfigResponse struct {
	Items                []*ConnConfig `protobuf:"bytes,1,rep,name=items,json=connectionconfig,proto3" json:"connectionconfig" yaml:"connectionconfig"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListConnConfigResponse) Reset()         { *m = ListConnConfigResponse{} }
func (m *ListConnConfigResponse) String() string { return proto.CompactTextString(m) }
func (*ListConnConfigResponse) ProtoMessage()    {}
func (*ListConnConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{95}
}
func (m *ListConnConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListConnConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListConnConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListConnConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListConnConfigResponse.Merge(m, src)
}
func (m *ListConnConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListConnConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListConnConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListConnConfigResponse proto.InternalMessageInfo

func (m *ListConnConfigResponse) GetItems() []*ConnConfig {
	if m != nil {
		return m.Items
	}
	return nil
}

type ConnConfig struct {
	ConfigName           string   `protobuf:"bytes,1,opt,name=config_name,json=ConfigName,proto3" json:"ConfigName" yaml:"ConfigName"`
	ProviderName         string   `protobuf:"bytes,2,opt,name=provider_name,json=ProviderName,proto3" json:"ProviderName" yaml:"ProviderName"`
	DriverName           string   `protobuf:"bytes,3,opt,name=driver_name,json=DriverName,proto3" json:"DriverName" yaml:"DriverName"`
	CredentialName       string   `protobuf:"bytes,4,opt,name=credential_name,json=CredentialName,proto3" json:"CredentialName" yaml:"CredentialName"`
	RegionName           string   `protobuf:"bytes,5,opt,name=region_name,json=RegionName,proto3" json:"RegionName" yaml:"RegionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnConfig) Reset()         { *m = ConnConfig{} }
func (m *ConnConfig) String() string { return proto.CompactTextString(m) }
func (*ConnConfig) ProtoMessage()    {}
func (*ConnConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{96}
}
func (m *ConnConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnConfig.Merge(m, src)
}
func (m *ConnConfig) XXX_Size() int {
	return m.Size()
}
func (m *ConnConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ConnConfig proto.InternalMessageInfo

func (m *ConnConfig) GetConfigName() string {
	if m != nil {
		return m.ConfigName
	}
	return ""
}

func (m *ConnConfig) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *ConnConfig) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *ConnConfig) GetCredentialName() string {
	if m != nil {
		return m.CredentialName
	}
	return ""
}

func (m *ConnConfig) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

type ConnConfigQryRequest struct {
	ConnConfigName       string   `protobuf:"bytes,1,opt,name=conn_config_name,json=connConfigName,proto3" json:"connConfigName" yaml:"connConfigName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnConfigQryRequest) Reset()         { *m = ConnConfigQryRequest{} }
func (m *ConnConfigQryRequest) String() string { return proto.CompactTextString(m) }
func (*ConnConfigQryRequest) ProtoMessage()    {}
func (*ConnConfigQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{97}
}
func (m *ConnConfigQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnConfigQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnConfigQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnConfigQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnConfigQryRequest.Merge(m, src)
}
func (m *ConnConfigQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnConfigQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnConfigQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnConfigQryRequest proto.InternalMessageInfo

func (m *ConnConfigQryRequest) GetConnConfigName() string {
	if m != nil {
		return m.ConnConfigName
	}
	return ""
}

type RegionResponse struct {
	Item                 *Region  `protobuf:"bytes,1,opt,name=item,json=region,proto3" json:"region" yaml:"region"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionResponse) Reset()         { *m = RegionResponse{} }
func (m *RegionResponse) String() string { return proto.CompactTextString(m) }
func (*RegionResponse) ProtoMessage()    {}
func (*RegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{98}
}
func (m *RegionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionResponse.Merge(m, src)
}
func (m *RegionResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegionResponse proto.InternalMessageInfo

func (m *RegionResponse) GetItem() *Region {
	if m != nil {
		return m.Item
	}
	return nil
}

type ListRegionResponse struct {
	Items                []*Region `protobuf:"bytes,1,rep,name=items,json=region,proto3" json:"region" yaml:"region"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListRegionResponse) Reset()         { *m = ListRegionResponse{} }
func (m *ListRegionResponse) String() string { return proto.CompactTextString(m) }
func (*ListRegionResponse) ProtoMessage()    {}
func (*ListRegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{99}
}
func (m *ListRegionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRegionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRegionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRegionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRegionResponse.Merge(m, src)
}
func (m *ListRegionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRegionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRegionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRegionResponse proto.InternalMessageInfo

func (m *ListRegionResponse) GetItems() []*Region {
	if m != nil {
		return m.Items
	}
	return nil
}

type Region struct {
	RegionName           string      `protobuf:"bytes,1,opt,name=region_name,json=RegionName,proto3" json:"RegionName" yaml:"RegionName"`
	ProviderName         string      `protobuf:"bytes,2,opt,name=provider_name,json=ProviderName,proto3" json:"ProviderName" yaml:"ProviderName"`
	KeyValueInfoList     []*KeyValue `protobuf:"bytes,3,rep,name=key_value_info_list,json=KeyValueInfoList,proto3" json:"KeyValueInfoList" yaml:"KeyValueInfoList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Region) Reset()         { *m = Region{} }
func (m *Region) String() string { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()    {}
func (*Region) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{100}
}
func (m *Region) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Region) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Region.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Region) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Region.Merge(m, src)
}
func (m *Region) XXX_Size() int {
	return m.Size()
}
func (m *Region) XXX_DiscardUnknown() {
	xxx_messageInfo_Region.DiscardUnknown(m)
}

var xxx_messageInfo_Region proto.InternalMessageInfo

func (m *Region) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

func (m *Region) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *Region) GetKeyValueInfoList() []*KeyValue {
	if m != nil {
		return m.KeyValueInfoList
	}
	return nil
}

type RegionQryRequest struct {
	RegionName           string   `protobuf:"bytes,1,opt,name=region_name,json=regionName,proto3" json:"regionName" yaml:"regionName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegionQryRequest) Reset()         { *m = RegionQryRequest{} }
func (m *RegionQryRequest) String() string { return proto.CompactTextString(m) }
func (*RegionQryRequest) ProtoMessage()    {}
func (*RegionQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7122b45d641d698, []int{101}
}
func (m *RegionQryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionQryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionQryRequest.Merge(m, src)
}
func (m *RegionQryRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegionQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegionQryRequest proto.InternalMessageInfo

func (m *RegionQryRequest) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "cbtumblebug.Empty")
	proto.RegisterType((*KeyValue)(nil), "cbtumblebug.KeyValue")
	proto.RegisterType((*IID)(nil), "cbtumblebug.IID")
	proto.RegisterType((*BooleanResponse)(nil), "cbtumblebug.BooleanResponse")
	proto.RegisterType((*ExistsResponse)(nil), "cbtumblebug.ExistsResponse")
	proto.RegisterType((*StringResponse)(nil), "cbtumblebug.StringResponse")
	proto.RegisterType((*MessageResponse)(nil), "cbtumblebug.MessageResponse")
	proto.RegisterType((*StatusResponse)(nil), "cbtumblebug.StatusResponse")
	proto.RegisterType((*NSInfoResponse)(nil), "cbtumblebug.NSInfoResponse")
	proto.RegisterType((*ListNSInfoResponse)(nil), "cbtumblebug.ListNSInfoResponse")
	proto.RegisterType((*NSInfo)(nil), "cbtumblebug.NSInfo")
	proto.RegisterType((*NSCreateRequest)(nil), "cbtumblebug.NSCreateRequest")
	proto.RegisterType((*NsReq)(nil), "cbtumblebug.NsReq")
	proto.RegisterType((*NSQryRequest)(nil), "cbtumblebug.NSQryRequest")
	proto.RegisterType((*ResourceQryRequest)(nil), "cbtumblebug.ResourceQryRequest")
	proto.RegisterType((*ResourceAllQryRequest)(nil), "cbtumblebug.ResourceAllQryRequest")
	proto.RegisterType((*TbImageInfoRequest)(nil), "cbtumblebug.TbImageInfoRequest")
	proto.RegisterType((*TbImageInfoResponse)(nil), "cbtumblebug.TbImageInfoResponse")
	proto.RegisterType((*ListTbImageInfoResponse)(nil), "cbtumblebug.ListTbImageInfoResponse")
	proto.RegisterType((*TbImageInfo)(nil), "cbtumblebug.TbImageInfo")
	proto.RegisterType((*TbImageCreateRequest)(nil), "cbtumblebug.TbImageCreateRequest")
	proto.RegisterType((*TbImageReq)(nil), "cbtumblebug.TbImageReq")
	proto.RegisterType((*TbSshKeyInfoResponse)(nil), "cbtumblebug.TbSshKeyInfoResponse")
	proto.RegisterType((*ListTbSshKeyInfoResponse)(nil), "cbtumblebug.ListTbSshKeyInfoResponse")
	proto.RegisterType((*TbSshKeyInfo)(nil), "cbtumblebug.TbSshKeyInfo")
	proto.RegisterType((*TbSshKeyCreateRequest)(nil), "cbtumblebug.TbSshKeyCreateRequest")
	proto.RegisterType((*TbSshKeyReq)(nil), "cbtumblebug.TbSshKeyReq")
	proto.RegisterType((*TbSpecInfoRequest)(nil), "cbtumblebug.TbSpecInfoRequest")
	proto.RegisterType((*TbSpecInfoResponse)(nil), "cbtumblebug.TbSpecInfoResponse")
	proto.RegisterType((*ListTbSpecInfoResponse)(nil), "cbtumblebug.ListTbSpecInfoResponse")
	proto.RegisterType((*TbSpecInfo)(nil), "cbtumblebug.TbSpecInfo")
	proto.RegisterType((*TbSpecCreateRequest)(nil), "cbtumblebug.TbSpecCreateRequest")
	proto.RegisterType((*TbSpecReq)(nil), "cbtumblebug.TbSpecReq")
	proto.RegisterType((*FetchSpecQryRequest)(nil), "cbtumblebug.FetchSpecQryRequest")
	proto.RegisterType((*SpiderSpecInfoResponse)(nil), "cbtumblebug.SpiderSpecInfoResponse")
	proto.RegisterType((*ListSpiderSpecInfoResponse)(nil), "cbtumblebug.ListSpiderSpecInfoResponse")
	proto.RegisterType((*SpiderSpecInfo)(nil), "cbtumblebug.SpiderSpecInfo")
	proto.RegisterType((*SpiderVCpuInfo)(nil), "cbtumblebug.SpiderVCpuInfo")
	proto.RegisterType((*SpiderGpuInfo)(nil), "cbtumblebug.SpiderGpuInfo")
	proto.RegisterType((*LookupSpecListQryRequest)(nil), "cbtumblebug.LookupSpecListQryRequest")
	proto.RegisterType((*LookupSpecQryRequest)(nil), "cbtumblebug.LookupSpecQryRequest")
	proto.RegisterType((*TbSecurityGroupInfoResponse)(nil), "cbtumblebug.TbSecurityGroupInfoResponse")
	proto.RegisterType((*ListTbSecurityGroupInfoResponse)(nil), "cbtumblebug.ListTbSecurityGroupInfoResponse")
	proto.RegisterType((*TbSecurityGroupInfo)(nil), "cbtumblebug.TbSecurityGroupInfo")
	proto.RegisterType((*SpiderSecurityRuleInfo)(nil), "cbtumblebug.SpiderSecurityRuleInfo")
	proto.RegisterType((*TbSecurityGroupCreateRequest)(nil), "cbtumblebug.TbSecurityGroupCreateRequest")
	proto.RegisterType((*TbSecurityGroupReq)(nil), "cbtumblebug.TbSecurityGroupReq")
	proto.RegisterType((*TbVNetInfoResponse)(nil), "cbtumblebug.TbVNetInfoResponse")
	proto.RegisterType((*ListTbVNetInfoResponse)(nil), "cbtumblebug.ListTbVNetInfoResponse")
	proto.RegisterType((*TbVNetInfo)(nil), "cbtumblebug.TbVNetInfo")
	proto.RegisterType((*SpiderSubnetInfo)(nil), "cbtumblebug.SpiderSubnetInfo")
	proto.RegisterType((*TbVNetCreateRequest)(nil), "cbtumblebug.TbVNetCreateRequest")
	proto.RegisterType((*TbVNetReq)(nil), "cbtumblebug.TbVNetReq")
	proto.RegisterType((*SpiderSubnetReqInfo)(nil), "cbtumblebug.SpiderSubnetReqInfo")
	proto.RegisterType((*TbMcisInfoResponse)(nil), "cbtumblebug.TbMcisInfoResponse")
	proto.RegisterType((*ListTbMcisInfoResponse)(nil), "cbtumblebug.ListTbMcisInfoResponse")
	proto.RegisterType((*TbMcisInfo)(nil), "cbtumblebug.TbMcisInfo")
	proto.RegisterType((*TbVmInfo)(nil), "cbtumblebug.TbVmInfo")
	proto.RegisterType((*GeoLocation)(nil), "cbtumblebug.GeoLocation")
	proto.RegisterType((*RegionInfo)(nil), "cbtumblebug.RegionInfo")
	proto.RegisterType((*SpiderVMInfo)(nil), "cbtumblebug.SpiderVMInfo")
	proto.RegisterType((*TbMcisCreateRequest)(nil), "cbtumblebug.TbMcisCreateRequest")
	proto.RegisterType((*TbMcisReq)(nil), "cbtumblebug.TbMcisReq")
	proto.RegisterType((*TbVmReq)(nil), "cbtumblebug.TbVmReq")
	proto.RegisterType((*TbMcisStatusInfoResponse)(nil), "cbtumblebug.TbMcisStatusInfoResponse")
	proto.RegisterType((*McisStatusInfo)(nil), "cbtumblebug.McisStatusInfo")
	proto.RegisterType((*TbVmStatusInfo)(nil), "cbtumblebug.TbVmStatusInfo")
	proto.RegisterType((*TbMcisAllQryRequest)(nil), "cbtumblebug.TbMcisAllQryRequest")
	proto.RegisterType((*TbMcisActionRequest)(nil), "cbtumblebug.TbMcisActionRequest")
	proto.RegisterType((*TbMcisQryRequest)(nil), "cbtumblebug.TbMcisQryRequest")
	proto.RegisterType((*TbVmInfoResponse)(nil), "cbtumblebug.TbVmInfoResponse")
	proto.RegisterType((*TbVmCreateRequest)(nil), "cbtumblebug.TbVmCreateRequest")
	proto.RegisterType((*TbVmStatusInfoesponse)(nil), "cbtumblebug.TbVmStatusInfoesponse")
	proto.RegisterType((*TbVmQryRequest)(nil), "cbtumblebug.TbVmQryRequest")
	proto.RegisterType((*TbVmActionRequest)(nil), "cbtumblebug.TbVmActionRequest")
	proto.RegisterType((*McisRecommendInfoResponse)(nil), "cbtumblebug.McisRecommendInfoResponse")
	proto.RegisterType((*McisRecommendInfo)(nil), "cbtumblebug.McisRecommendInfo")
	proto.RegisterType((*TbVmRecommendInfo)(nil), "cbtumblebug.TbVmRecommendInfo")
	proto.RegisterType((*TbVmPriority)(nil), "cbtumblebug.TbVmPriority")
	proto.RegisterType((*McisRecommendCreateRequest)(nil), "cbtumblebug.McisRecommendCreateRequest")
	proto.RegisterType((*McisRecommendReq)(nil), "cbtumblebug.McisRecommendReq")
	proto.RegisterType((*TbVmRecommendReq)(nil), "cbtumblebug.TbVmRecommendReq")
	proto.RegisterType((*ListCmdMcisResponse)(nil), "cbtumblebug.ListCmdMcisResponse")
	proto.RegisterType((*CmdMcisResult)(nil), "cbtumblebug.CmdMcisResult")
	proto.RegisterType((*McisCmdCreateRequest)(nil), "cbtumblebug.McisCmdCreateRequest")
	proto.RegisterType((*McisCmdVmCreateRequest)(nil), "cbtumblebug.McisCmdVmCreateRequest")
	proto.RegisterType((*McisCmdReq)(nil), "cbtumblebug.McisCmdReq")
	proto.RegisterType((*ListAgentInstallResponse)(nil), "cbtumblebug.ListAgentInstallResponse")
	proto.RegisterType((*MonitorQryRequest)(nil), "cbtumblebug.MonitorQryRequest")
	proto.RegisterType((*ListBenchmarkInfoResponse)(nil), "cbtumblebug.ListBenchmarkInfoResponse")
	proto.RegisterType((*BenchmarkInfo)(nil), "cbtumblebug.BenchmarkInfo")
	proto.RegisterType((*BmQryAllRequest)(nil), "cbtumblebug.BmQryAllRequest")
	proto.RegisterType((*BmQryRequest)(nil), "cbtumblebug.BmQryRequest")
	proto.RegisterType((*BmReq)(nil), "cbtumblebug.BmReq")
	proto.RegisterType((*ConnConfigResponse)(nil), "cbtumblebug.ConnConfigResponse")
	proto.RegisterType((*ListConnConfigResponse)(nil), "cbtumblebug.ListConnConfigResponse")
	proto.RegisterType((*ConnConfig)(nil), "cbtumblebug.ConnConfig")
	proto.RegisterType((*ConnConfigQryRequest)(nil), "cbtumblebug.ConnConfigQryRequest")
	proto.RegisterType((*RegionResponse)(nil), "cbtumblebug.RegionResponse")
	proto.RegisterType((*ListRegionResponse)(nil), "cbtumblebug.ListRegionResponse")
	proto.RegisterType((*Region)(nil), "cbtumblebug.Region")
	proto.RegisterType((*RegionQryRequest)(nil), "cbtumblebug.RegionQryRequest")
}

func init() { proto.RegisterFile("cbtumblebug/cbtumblebug.proto", fileDescriptor_d7122b45d641d698) }

var fileDescriptor_d7122b45d641d698 = []byte{
	// 6428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x7d, 0x4d, 0x6c, 0x24, 0x49,
	0x56, 0xff, 0x54, 0x95, 0xcb, 0x1f, 0xcf, 0x9f, 0x9d, 0x6e, 0x77, 0xbb, 0x7b, 0xa6, 0xbb, 0x66,
	0x62, 0xfe, 0xfb, 0x9f, 0x5d, 0xed, 0xb2, 0x23, 0x66, 0x46, 0xda, 0x9d, 0x9d, 0x45, 0x3b, 0xfe,
	0xe8, 0xf1, 0x16, 0x76, 0xb9, 0x3d, 0x61, 0xb7, 0x67, 0x67, 0x34, 0xa3, 0xdc, 0xfa, 0x48, 0x57,
	0x27, 0xae, 0xac, 0xcc, 0xc9, 0xcc, 0xaa, 0x1e, 0xaf, 0x00, 0xf1, 0x21, 0xb1, 0x20, 0xed, 0x4a,
	0xec, 0xee, 0x85, 0x0b, 0x02, 0x2d, 0x70, 0x00, 0xa1, 0x15, 0x17, 0xc4, 0x69, 0x0f, 0x88, 0x45,
	0x70, 0x40, 0x88, 0x2b, 0x48, 0x14, 0x68, 0x38, 0x20, 0x2c, 0x71, 0xa0, 0x81, 0x3b, 0x8a, 0xaf,
	0x8c, 0x17, 0x59, 0x59, 0xae, 0x72, 0xd9, 0x6e, 0xba, 0x39, 0xb9, 0xe2, 0x17, 0x2f, 0x5e, 0x7c,
	0xbc, 0x17, 0x2f, 0x5e, 0xbc, 0x88, 0x0c, 0xc3, 0x9d, 0x7a, 0x2d, 0xee, 0x78, 0xb5, 0x96, 0x53,
	0xeb, 0x34, 0x5f, 0x45, 0xbf, 0xbf, 0x18, 0x84, 0x7e, 0xec, 0x5b, 0xb3, 0x08, 0xba, 0x7d, 0xbd,
	0xe9, 0x37, 0x7d, 0x8e, 0xbf, 0xca, 0x7e, 0x09, 0x12, 0x32, 0x05, 0xc5, 0x7b, 0x5e, 0x10, 0x9f,
	0x90, 0x06, 0x4c, 0x6f, 0x3b, 0x27, 0x87, 0xd5, 0x56, 0xc7, 0xb1, 0x5e, 0x81, 0xc2, 0xb1, 0x73,
	0xb2, 0x9a, 0x7b, 0x31, 0xf7, 0xd9, 0x99, 0xf5, 0x95, 0xd3, 0x5e, 0xa9, 0xb0, 0xed, 0x9c, 0x3c,
	0xee, 0x95, 0xe0, 0xa4, 0xea, 0xb5, 0xbe, 0x42, 0xb6, 0x9d, 0x13, 0x42, 0x19, 0x64, 0xbd, 0x0a,
	0xc5, 0x2e, 0x2b, 0xb1, 0x9a, 0xe7, 0xa4, 0xb7, 0x4e, 0x7b, 0xa5, 0x22, 0x67, 0xf1, 0xb8, 0x57,
	0x9a, 0x13, 0xc4, 0x3c, 0x49, 0xa8, 0x80, 0xc9, 0x09, 0x14, 0xca, 0xe5, 0x4d, 0xeb, 0x0d, 0x98,
	0x6a, 0x57, 0x3d, 0xc7, 0x76, 0x1b, 0xb2, 0x92, 0xe7, 0x4f, 0x7b, 0xa5, 0xc9, 0xdd, 0xaa, 0xe7,
	0x94, 0x1b, 0x8f, 0x7b, 0xa5, 0x79, 0x51, 0x54, 0xa4, 0x09, 0x95, 0x19, 0xd6, 0x57, 0x61, 0x26,
	0x3a, 0x89, 0x62, 0xc7, 0x63, 0xe5, 0x44, 0x8d, 0xa5, 0xd3, 0x5e, 0x69, 0x7a, 0x9f, 0x83, 0xbc,
	0xe4, 0xa2, 0x28, 0xa9, 0x10, 0x42, 0x93, 0x4c, 0xf2, 0x0e, 0x2c, 0xae, 0xfb, 0x7e, 0xcb, 0xa9,
	0xb6, 0xa9, 0x13, 0x05, 0x7e, 0x3b, 0x72, 0xac, 0xd7, 0x61, 0x32, 0x74, 0xa2, 0x4e, 0x2b, 0xe6,
	0xad, 0x98, 0x16, 0xad, 0xa0, 0x1c, 0xd1, 0xad, 0x10, 0x69, 0x42, 0x65, 0x06, 0xb9, 0x07, 0x0b,
	0xf7, 0x3e, 0x71, 0xa3, 0x38, 0xc2, 0x6c, 0x1c, 0x8e, 0x60, 0x36, 0x02, 0xd1, 0x6c, 0x44, 0x9a,
	0x50, 0x99, 0xc1, 0xd8, 0xec, 0xc7, 0xa1, 0xdb, 0x6e, 0x0e, 0x68, 0xcd, 0xcc, 0x68, 0xad, 0xf9,
	0x59, 0x58, 0xac, 0x38, 0x51, 0x54, 0x6d, 0x3a, 0x09, 0x9f, 0x2f, 0xc1, 0x94, 0x27, 0x20, 0xc9,
	0xe8, 0xce, 0x69, 0xaf, 0xa4, 0xa0, 0xc7, 0xbd, 0xd2, 0x82, 0xe0, 0x24, 0x01, 0x42, 0x55, 0x96,
	0x68, 0x52, 0x35, 0xee, 0x18, 0x3d, 0x8b, 0x38, 0x82, 0x9b, 0x24, 0x68, 0x74, 0x93, 0x44, 0x9a,
	0x50, 0x99, 0x41, 0x76, 0x60, 0x61, 0x77, 0xbf, 0xdc, 0x3e, 0xf2, 0x13, 0x36, 0x5f, 0x81, 0x09,
	0x37, 0x76, 0x3c, 0xce, 0x64, 0xf6, 0xb5, 0xe5, 0x2f, 0x62, 0x4d, 0x15, 0xa4, 0xeb, 0xcb, 0xa7,
	0xbd, 0x52, 0xbe, 0xcd, 0xb8, 0xce, 0x08, 0xae, 0xed, 0x88, 0xd0, 0x7c, 0x3b, 0x22, 0xef, 0x82,
	0xb5, 0xe3, 0x46, 0x71, 0x8a, 0xe3, 0x5b, 0x50, 0x64, 0x1c, 0x59, 0xbb, 0x0a, 0xe7, 0x66, 0xf9,
	0x7b, 0x39, 0x98, 0x14, 0x34, 0xd6, 0xcb, 0x90, 0x4f, 0x74, 0x90, 0xd3, 0xbb, 0x0d, 0x4d, 0xef,
	0x36, 0x08, 0xcd, 0xbb, 0x0d, 0xeb, 0xf3, 0x30, 0xc1, 0xb4, 0x55, 0xaa, 0xdc, 0xcd, 0xd3, 0x5e,
	0x89, 0xa7, 0x1f, 0xf7, 0x4a, 0xb3, 0x92, 0x71, 0xd5, 0x73, 0x08, 0xe5, 0xa0, 0xb5, 0x05, 0xb3,
	0x0d, 0x27, 0xaa, 0x87, 0x6e, 0x10, 0xbb, 0x7e, 0x7b, 0xb5, 0xc0, 0xcb, 0x7c, 0xe6, 0xb4, 0x57,
	0xc2, 0xf0, 0xe3, 0x5e, 0xc9, 0x12, 0x45, 0x11, 0x48, 0x28, 0x26, 0x21, 0x3b, 0xb0, 0xb8, 0xbb,
	0xbf, 0x11, 0x3a, 0xd5, 0xd8, 0xa1, 0xce, 0xc7, 0x1d, 0x27, 0x8a, 0xad, 0x37, 0x8d, 0x71, 0xb4,
	0xcc, 0x4e, 0x47, 0xd4, 0xf9, 0x78, 0x70, 0x9f, 0x7f, 0x01, 0x8a, 0x9c, 0x22, 0xe9, 0x4c, 0x6e,
	0x8c, 0xce, 0xe4, 0xc7, 0xee, 0xcc, 0x57, 0x61, 0x6e, 0x77, 0xff, 0xdd, 0xf0, 0x44, 0xf5, 0xe4,
	0x0b, 0x50, 0x6c, 0x47, 0x7a, 0xfa, 0x8b, 0x66, 0x44, 0x7c, 0x0a, 0xab, 0x66, 0x44, 0x6c, 0xfa,
	0x72, 0x90, 0x7c, 0x3b, 0x0f, 0x16, 0x75, 0x22, 0xbf, 0x13, 0xd6, 0x9d, 0x71, 0x99, 0x58, 0x3b,
	0x30, 0x1f, 0x4a, 0x1e, 0x76, 0x7c, 0x12, 0x28, 0x71, 0xbe, 0x72, 0xda, 0x2b, 0xcd, 0xa9, 0x8c,
	0x83, 0x93, 0x80, 0x8d, 0xc4, 0xb2, 0x28, 0x8d, 0x51, 0x42, 0x0d, 0x22, 0x6b, 0x13, 0x66, 0x13,
	0x6e, 0x6e, 0x43, 0x8a, 0xf9, 0xe5, 0xd3, 0x5e, 0x09, 0x14, 0xcc, 0xdb, 0x71, 0xcd, 0xe4, 0xc4,
	0x5a, 0x83, 0x08, 0x98, 0xfd, 0x3c, 0xf2, 0xc3, 0xba, 0xb3, 0x3a, 0xa1, 0xed, 0x27, 0x07, 0xb4,
	0xfd, 0xe4, 0x49, 0x42, 0x05, 0x4c, 0x7e, 0x92, 0x83, 0x15, 0x35, 0x12, 0x6b, 0xad, 0xd6, 0x53,
	0x32, 0x18, 0x49, 0x37, 0x0a, 0x23, 0x76, 0xe3, 0x3b, 0x39, 0xb0, 0x0e, 0x6a, 0x65, 0xaf, 0xda,
	0x74, 0xc4, 0xb4, 0x1e, 0xa7, 0x0f, 0x5f, 0x97, 0xb3, 0x21, 0xcf, 0x67, 0xc3, 0xaa, 0x31, 0x1b,
	0x10, 0x73, 0xd1, 0x1c, 0xd7, 0x13, 0xc6, 0x4f, 0x36, 0x87, 0x27, 0x09, 0x15, 0x30, 0xb1, 0x61,
	0xd9, 0x68, 0x8d, 0x34, 0x32, 0x5f, 0x37, 0xa6, 0xdb, 0x45, 0x2a, 0x68, 0xc0, 0x4d, 0x66, 0xc4,
	0xb2, 0x2a, 0x29, 0x9b, 0x96, 0xec, 0x22, 0xb5, 0xfc, 0x59, 0x11, 0x66, 0x51, 0x89, 0x2b, 0x30,
	0x6e, 0x07, 0xb0, 0x58, 0xf7, 0xdb, 0x6d, 0xa7, 0xce, 0x26, 0xb5, 0xcd, 0xcb, 0x09, 0x91, 0x7f,
	0xfe, 0xb4, 0x57, 0x5a, 0xd0, 0x59, 0xbb, 0x82, 0xc3, 0x8a, 0xe0, 0x60, 0xe2, 0x84, 0xa6, 0x08,
	0xad, 0x7b, 0x30, 0x57, 0x8f, 0x02, 0x9b, 0x77, 0x82, 0x49, 0x7f, 0x42, 0x4f, 0xa6, 0x7a, 0x14,
	0x88, 0xfe, 0xa0, 0xc9, 0xa4, 0x31, 0x42, 0x11, 0x81, 0x55, 0x81, 0x05, 0xcd, 0x86, 0xb7, 0xad,
	0xa8, 0x95, 0x5a, 0xd1, 0xc9, 0x96, 0x2d, 0x9b, 0xac, 0x44, 0xbb, 0x0c, 0xa2, 0xb4, 0xed, 0x9b,
	0x1c, 0xd7, 0xf6, 0xb1, 0xb9, 0x56, 0x67, 0x66, 0x9c, 0x0d, 0x59, 0xa3, 0x1a, 0x3b, 0xab, 0x53,
	0xa8, 0x59, 0x32, 0x63, 0xb3, 0x1a, 0xe3, 0x66, 0x21, 0x94, 0x35, 0x0b, 0x25, 0xad, 0x2f, 0xc3,
	0x74, 0x93, 0x4d, 0x16, 0xdb, 0x8f, 0x56, 0xa7, 0xf5, 0xf2, 0xce, 0xb1, 0xfb, 0xfb, 0x7a, 0x79,
	0x97, 0x00, 0xa1, 0x2a, 0x0b, 0x2d, 0xe6, 0x33, 0x7a, 0x31, 0x8f, 0x52, 0x8b, 0x79, 0xa4, 0x16,
	0x73, 0xf1, 0xc3, 0x6a, 0xc0, 0xc2, 0xb1, 0x73, 0x62, 0x73, 0x2f, 0xcf, 0x6e, 0xb9, 0x51, 0xbc,
	0x0a, 0x5c, 0x4f, 0x57, 0x0c, 0x3d, 0x55, 0x9e, 0xa3, 0xe8, 0xd4, 0xb1, 0x4c, 0x31, 0x95, 0xd7,
	0x9d, 0xc2, 0x28, 0xa1, 0x06, 0x11, 0xf9, 0x6e, 0x0e, 0xae, 0x4b, 0xcd, 0x35, 0x57, 0xbc, 0xf3,
	0x59, 0x84, 0x2d, 0xc3, 0x22, 0xdc, 0xcc, 0x9a, 0x4a, 0x6c, 0x91, 0x1c, 0x3e, 0x93, 0x7e, 0x27,
	0x0f, 0xa0, 0x0b, 0x9c, 0x6f, 0xcd, 0xcc, 0x98, 0x23, 0xf9, 0xcb, 0x9f, 0x23, 0x85, 0xf1, 0xe6,
	0x48, 0x4a, 0xa9, 0x27, 0xc6, 0x5e, 0xd0, 0x1b, 0x4c, 0x60, 0xfb, 0xd1, 0xc3, 0x6d, 0xe7, 0xc4,
	0x30, 0x67, 0x3b, 0x86, 0xcd, 0xbc, 0x95, 0x12, 0x81, 0x2e, 0x20, 0xb5, 0x8f, 0xa7, 0x91, 0xf6,
	0xf1, 0x34, 0xd3, 0x3e, 0xf1, 0xc3, 0x85, 0x55, 0x61, 0x37, 0x33, 0x6a, 0xaa, 0x98, 0x86, 0xf3,
	0xa2, 0x55, 0xfd, 0x55, 0x11, 0xe6, 0x70, 0xa9, 0x67, 0xc6, 0x7a, 0x5e, 0x96, 0x48, 0x2d, 0x0a,
	0x4b, 0x4c, 0xc5, 0xa2, 0xe8, 0xa1, 0xcd, 0xa6, 0x3c, 0xb2, 0xa0, 0x9f, 0x3b, 0xed, 0x95, 0xe6,
	0xeb, 0x51, 0x20, 0x46, 0x47, 0x36, 0xef, 0x7a, 0xa2, 0x69, 0x1a, 0x26, 0xd4, 0x24, 0x63, 0x8d,
	0x3b, 0x72, 0xdb, 0x4d, 0x27, 0x0c, 0x42, 0xb7, 0x1d, 0x63, 0x23, 0x8a, 0x60, 0xdd, 0x38, 0x04,
	0x12, 0x8a, 0x49, 0xac, 0xb7, 0x60, 0xba, 0x13, 0x39, 0x21, 0x6f, 0xd4, 0x94, 0xde, 0xfa, 0x29,
	0x4c, 0x6f, 0xfd, 0x14, 0x42, 0x68, 0x92, 0x69, 0xbd, 0x0d, 0x10, 0x74, 0x6a, 0x2d, 0xb7, 0xce,
	0x3a, 0x26, 0xad, 0xe6, 0x4b, 0xa7, 0xbd, 0xd2, 0x8c, 0x40, 0x85, 0x5e, 0x2c, 0x89, 0xf2, 0x09,
	0x44, 0xa8, 0xce, 0x66, 0xee, 0x5e, 0x10, 0xba, 0xdd, 0x6a, 0xec, 0x70, 0x16, 0x33, 0x7a, 0xf6,
	0x49, 0x58, 0xf0, 0x90, 0xb3, 0x4f, 0x63, 0x84, 0x22, 0x82, 0x27, 0x64, 0x4c, 0xbf, 0x9f, 0x83,
	0x15, 0xa5, 0xc9, 0x17, 0xb1, 0xa6, 0xdb, 0x67, 0xfa, 0x57, 0x82, 0x3f, 0x33, 0xa7, 0x23, 0x4d,
	0xaf, 0xbf, 0xcf, 0x31, 0xdf, 0x24, 0x29, 0xf4, 0x34, 0x98, 0xd4, 0x4b, 0xdb, 0xa9, 0x7d, 0x3b,
	0x07, 0xd7, 0x0e, 0x6a, 0xfb, 0x81, 0x53, 0x1f, 0xdf, 0x99, 0xdd, 0x3c, 0x73, 0xe9, 0x52, 0xbc,
	0x05, 0x97, 0x28, 0x70, 0xea, 0x9a, 0x0b, 0x4b, 0x11, 0xca, 0x41, 0xf2, 0x01, 0x73, 0xab, 0x75,
	0x43, 0xa4, 0xa5, 0xdc, 0x34, 0x6c, 0xf2, 0xb8, 0xbc, 0x6d, 0xb8, 0x21, 0x6d, 0x71, 0x9a, 0xff,
	0x3d, 0xd3, 0x12, 0x8f, 0x5b, 0xc1, 0xef, 0xcf, 0xb2, 0x45, 0x57, 0x51, 0x3f, 0x33, 0xf6, 0xb7,
	0x0c, 0xf3, 0xdc, 0x6c, 0x06, 0x4e, 0x5d, 0xf0, 0x44, 0x16, 0x98, 0x19, 0xc3, 0xc0, 0xa9, 0x4b,
	0x86, 0x96, 0xb6, 0x98, 0x12, 0x24, 0x14, 0x93, 0x58, 0x5f, 0x82, 0x29, 0x3f, 0x12, 0xfb, 0xb1,
	0xa2, 0x76, 0xed, 0x24, 0xa4, 0x5d, 0x3b, 0x09, 0x10, 0xaa, 0xb2, 0x98, 0x75, 0x6c, 0x77, 0x3c,
	0xbb, 0x5b, 0x0f, 0x3a, 0xd2, 0xc6, 0x72, 0xeb, 0xc8, 0xb1, 0x8d, 0xbd, 0x07, 0xda, 0x3a, 0x2a,
	0x84, 0xd0, 0x24, 0x53, 0x15, 0xae, 0xfb, 0xa1, 0x61, 0x5a, 0x15, 0x66, 0x16, 0x66, 0x88, 0x2c,
	0xcc, 0x7e, 0x8a, 0x60, 0x93, 0x67, 0x37, 0xdd, 0x1a, 0xf6, 0x46, 0x19, 0xb4, 0xe5, 0xae, 0xe3,
	0x60, 0x13, 0x07, 0x78, 0xb0, 0x89, 0xff, 0x52, 0x05, 0x3d, 0xb7, 0x26, 0xad, 0x69, 0x52, 0xb0,
	0x92, 0x2e, 0x58, 0x49, 0x0a, 0x56, 0xdc, 0x75, 0x36, 0x6d, 0xa3, 0xd8, 0x0f, 0x99, 0x1f, 0xc4,
	0x6a, 0x05, 0x3d, 0xda, 0x0a, 0x16, 0x35, 0x5b, 0xca, 0xa1, 0x4d, 0x40, 0x42, 0x31, 0x49, 0x7a,
	0xfe, 0xcf, 0x8e, 0xbd, 0x70, 0xde, 0x87, 0xf9, 0xba, 0x1f, 0xc5, 0x76, 0xe0, 0x84, 0xf6, 0x43,
	0xbf, 0x13, 0xae, 0xce, 0xa1, 0x55, 0x13, 0x67, 0xa0, 0x55, 0x13, 0xc3, 0x6c, 0xd5, 0xc4, 0x69,
	0xd6, 0x32, 0x36, 0xc0, 0xb2, 0xb1, 0xab, 0xf3, 0xba, 0x65, 0x08, 0xd6, 0x2d, 0x43, 0x20, 0xa1,
	0x98, 0xc4, 0x7a, 0x0f, 0x16, 0xbd, 0xea, 0x27, 0x36, 0x66, 0xb6, 0xc0, 0x99, 0xfd, 0xd4, 0x69,
	0xaf, 0x94, 0xce, 0x7a, 0xdc, 0x2b, 0xdd, 0x90, 0x83, 0x6e, 0x66, 0x10, 0x9a, 0x26, 0xb5, 0x7c,
	0x58, 0x61, 0x50, 0xec, 0xc7, 0xd5, 0x96, 0x02, 0xed, 0xd8, 0xad, 0xad, 0x2e, 0x72, 0xf6, 0x6f,
	0x9e, 0xf6, 0x4a, 0x19, 0x04, 0x07, 0x5c, 0x30, 0x2f, 0xe8, 0x4a, 0xfa, 0xb2, 0x09, 0xcd, 0x2e,
	0xc6, 0x87, 0xc4, 0x89, 0xed, 0xda, 0x23, 0xbb, 0x59, 0x0b, 0xa2, 0xd5, 0x25, 0x34, 0x24, 0x02,
	0xde, 0xaa, 0x05, 0x11, 0x1a, 0x12, 0x0d, 0xb2, 0x21, 0xd1, 0x29, 0xc6, 0xc8, 0xa9, 0x45, 0x2c,
	0xe9, 0x31, 0x46, 0xd7, 0x34, 0x23, 0x09, 0x57, 0x0c, 0x46, 0x08, 0x24, 0x14, 0x93, 0x58, 0x5f,
	0x83, 0x99, 0x66, 0xd0, 0xb1, 0x3d, 0xbf, 0xe1, 0xb4, 0x56, 0x2d, 0xed, 0x53, 0x24, 0xa0, 0xf6,
	0x29, 0x12, 0x88, 0x50, 0x9d, 0xcd, 0x66, 0x00, 0x1b, 0xd2, 0x66, 0xd0, 0x59, 0x5d, 0xd6, 0x33,
	0x40, 0x42, 0x7a, 0x06, 0x48, 0x80, 0x50, 0x95, 0x65, 0x6d, 0x00, 0x34, 0x83, 0x8e, 0x9a, 0x76,
	0xd7, 0xb5, 0x2f, 0x22, 0x51, 0xa1, 0xff, 0xd7, 0x92, 0xba, 0x93, 0xc9, 0x87, 0x08, 0x58, 0xed,
	0xac, 0x29, 0xc1, 0x6b, 0xc1, 0xea, 0x0a, 0xda, 0x46, 0x0a, 0x08, 0x6d, 0x23, 0x05, 0xc0, 0xb6,
	0x91, 0xf2, 0xd7, 0xaf, 0xe7, 0x60, 0x59, 0x98, 0xe9, 0x8b, 0x38, 0x17, 0x1b, 0xc6, 0x7a, 0x77,
	0x23, 0x63, 0xc9, 0x60, 0xae, 0xc5, 0x90, 0x15, 0xe3, 0x87, 0x79, 0x98, 0x49, 0x88, 0x9f, 0x06,
	0x97, 0xa2, 0x6f, 0x2d, 0x28, 0x8c, 0xbd, 0x16, 0x5c, 0xda, 0x4e, 0x6d, 0x03, 0x96, 0xdf, 0x71,
	0xe2, 0xfa, 0x43, 0xc6, 0x79, 0xec, 0x08, 0xec, 0x43, 0xb8, 0xb1, 0x1f, 0xb8, 0x0d, 0x27, 0xec,
	0x5b, 0xfc, 0x77, 0x0d, 0xe7, 0xe2, 0x79, 0x43, 0x90, 0x66, 0x11, 0xe1, 0x28, 0x76, 0x3d, 0x29,
	0x4f, 0xe9, 0x28, 0x8a, 0x34, 0xa1, 0x32, 0x83, 0x78, 0x70, 0x9b, 0xb9, 0x19, 0x03, 0x6a, 0xbb,
	0x6f, 0xba, 0x1a, 0x17, 0xaf, 0xee, 0x7b, 0x05, 0x58, 0x30, 0xcb, 0x89, 0x73, 0x98, 0x26, 0x1b,
	0x74, 0xe3, 0x1c, 0xa6, 0x29, 0xc6, 0x3b, 0x39, 0x87, 0x69, 0xf2, 0xa1, 0x96, 0x19, 0x59, 0x8e,
	0xc8, 0xae, 0xa1, 0x7c, 0x42, 0xc4, 0x13, 0x52, 0x4d, 0x8a, 0x5d, 0x9b, 0xad, 0xd5, 0x85, 0x81,
	0x83, 0x76, 0xb8, 0x11, 0x74, 0xb4, 0xd3, 0xc4, 0x52, 0x9a, 0x15, 0x4b, 0x11, 0xca, 0x41, 0xeb,
	0x15, 0x28, 0x78, 0x8e, 0x27, 0xd5, 0x83, 0x1f, 0xd5, 0x55, 0x1c, 0x4f, 0x1f, 0xd5, 0x55, 0x1c,
	0x8f, 0x50, 0x06, 0x59, 0x1b, 0x50, 0x60, 0x96, 0xa6, 0xc8, 0xc7, 0xed, 0x76, 0x46, 0x8d, 0x5b,
	0xb2, 0x42, 0xce, 0x64, 0x8b, 0xd7, 0x27, 0x99, 0x6c, 0xb1, 0xea, 0x18, 0x94, 0xb1, 0x81, 0x99,
	0x1c, 0xba, 0x81, 0xd9, 0xce, 0xdc, 0xc0, 0x6c, 0x9b, 0x1b, 0x18, 0x23, 0x19, 0x2a, 0x91, 0xa8,
	0x41, 0xb0, 0x5e, 0x85, 0x62, 0xdd, 0xef, 0xb4, 0xd5, 0xc9, 0x18, 0x0f, 0xe0, 0x6c, 0x30, 0x40,
	0x07, 0x70, 0x78, 0x92, 0x50, 0x01, 0xf3, 0x02, 0x2d, 0xbf, 0x7e, 0x8c, 0x0f, 0x26, 0x37, 0x18,
	0x80, 0x0a, 0xb0, 0x24, 0x2b, 0xc0, 0xff, 0xfe, 0x45, 0x0e, 0xe6, 0x8d, 0x71, 0x38, 0x7f, 0x9d,
	0x4c, 0x14, 0x47, 0xa1, 0xac, 0x51, 0x88, 0xe2, 0x28, 0x44, 0xa2, 0x38, 0x0a, 0x99, 0x28, 0x8e,
	0x42, 0xc6, 0x59, 0xac, 0x1a, 0x28, 0x5c, 0x5e, 0x91, 0x2b, 0x86, 0xe4, 0x5c, 0x11, 0xab, 0x85,
	0x80, 0x47, 0x16, 0x32, 0x09, 0x60, 0x75, 0xc7, 0xf7, 0x8f, 0x3b, 0xdc, 0x8c, 0xb0, 0xb1, 0x44,
	0x13, 0x3e, 0xc3, 0xe2, 0xe5, 0xb4, 0xc5, 0xdb, 0x18, 0x60, 0xf1, 0x36, 0xd2, 0x16, 0x2f, 0x05,
	0xfc, 0x51, 0x0e, 0xae, 0xeb, 0x2a, 0xaf, 0xba, 0x3a, 0x7e, 0x04, 0x9c, 0x18, 0x57, 0x74, 0x04,
	0x1c, 0x69, 0xcb, 0xba, 0xa8, 0xd7, 0x09, 0xc1, 0x23, 0xc9, 0x64, 0x1b, 0xb5, 0xe7, 0x0f, 0x6a,
	0xfb, 0x4e, 0xbd, 0x13, 0xba, 0xf1, 0xc9, 0x56, 0xe8, 0x77, 0x02, 0xc3, 0xba, 0x3c, 0x34, 0x6c,
	0xd9, 0x8b, 0xe9, 0x45, 0x29, 0x5d, 0x4e, 0x78, 0x78, 0x11, 0x86, 0xb5, 0x87, 0x67, 0xc0, 0x84,
	0x9a, 0x64, 0xe4, 0x3b, 0x39, 0x28, 0xc9, 0xdd, 0xd4, 0xc0, 0xd6, 0xb8, 0xa6, 0xad, 0xbb, 0xca,
	0xe6, 0xfc, 0x47, 0x91, 0xaf, 0xe9, 0x69, 0x8e, 0xcf, 0xcc, 0x1e, 0xec, 0x0d, 0x98, 0xea, 0x32,
	0x27, 0x2f, 0x39, 0x3c, 0x10, 0xb6, 0x7f, 0xd7, 0x89, 0xf1, 0x7d, 0x02, 0x91, 0x66, 0xb6, 0x9f,
	0xff, 0x48, 0x2f, 0xb1, 0xc5, 0xb1, 0x37, 0x00, 0x1d, 0x58, 0x38, 0x72, 0x43, 0xe7, 0x51, 0xb5,
	0xd5, 0xb2, 0xc3, 0x4e, 0xcb, 0x89, 0xa4, 0x59, 0x7c, 0x39, 0x6b, 0x79, 0x92, 0x83, 0x4c, 0x3b,
	0x2d, 0x47, 0x4b, 0x4d, 0x15, 0x67, 0x68, 0xa4, 0xa5, 0x66, 0xc0, 0x84, 0x9a, 0x64, 0xd6, 0x11,
	0xac, 0x70, 0x6f, 0x43, 0x72, 0xb4, 0x9b, 0x4c, 0x6e, 0x6c, 0x0c, 0xc4, 0x2e, 0xee, 0xf5, 0xd3,
	0x5e, 0xc9, 0x62, 0x2e, 0x85, 0x21, 0x56, 0x36, 0x1e, 0xb7, 0xb4, 0xf3, 0x61, 0xe6, 0x11, 0x9a,
	0x51, 0xc0, 0x6a, 0xc3, 0xcd, 0x8c, 0x7a, 0xb8, 0xec, 0xc4, 0x9e, 0xef, 0x4b, 0xa7, 0xbd, 0xd2,
	0xf5, 0x74, 0x41, 0x29, 0xc1, 0xe7, 0xb3, 0xeb, 0x12, 0x72, 0xcc, 0x2c, 0x94, 0xb1, 0xca, 0xcc,
	0x5c, 0x41, 0x98, 0xec, 0x07, 0xf9, 0xc4, 0xa7, 0x49, 0x89, 0x84, 0x59, 0x99, 0xa3, 0xd0, 0xf7,
	0xec, 0xc0, 0x0f, 0x95, 0xf9, 0xe7, 0x56, 0x86, 0x81, 0x7b, 0x7e, 0x18, 0x6b, 0x2b, 0xa3, 0x10,
	0x42, 0x93, 0x4c, 0xa6, 0x8c, 0xb1, 0x2f, 0xca, 0xe6, 0xb5, 0x32, 0xc6, 0xbe, 0x2c, 0x29, 0x95,
	0x51, 0xa4, 0x09, 0x95, 0x19, 0xd6, 0x26, 0xcc, 0xba, 0x81, 0xcd, 0x2f, 0xe5, 0xd4, 0xfd, 0x16,
	0x8e, 0xef, 0xbb, 0xc1, 0x9e, 0x44, 0xb5, 0x57, 0xaf, 0x31, 0x42, 0x11, 0x01, 0xdb, 0x94, 0x34,
	0xdc, 0x50, 0xcc, 0x0c, 0x39, 0x15, 0xf8, 0xa6, 0x24, 0x01, 0xf5, 0xa6, 0x24, 0x81, 0x08, 0xd5,
	0xd9, 0xe4, 0x4f, 0x73, 0xf0, 0x42, 0xca, 0x12, 0x5c, 0xc4, 0xcd, 0x6f, 0x1a, 0x6e, 0x7e, 0xe9,
	0x2c, 0x13, 0xc6, 0xfc, 0xfd, 0xf1, 0x2d, 0xd8, 0x77, 0x0b, 0x3c, 0xf4, 0x95, 0x62, 0xf8, 0x34,
	0xec, 0x09, 0x90, 0x6d, 0x2a, 0x8c, 0x6d, 0x9b, 0x26, 0x2e, 0xd1, 0x36, 0x15, 0x9f, 0x80, 0x6d,
	0x12, 0x91, 0xc8, 0x43, 0xd6, 0x97, 0xd1, 0x23, 0x91, 0x8a, 0x5c, 0xc8, 0x89, 0x0d, 0x84, 0x96,
	0x13, 0x4b, 0x11, 0xca, 0x41, 0x1d, 0x89, 0xec, 0xe3, 0x3f, 0x24, 0x12, 0x39, 0x6a, 0x05, 0xbd,
	0x22, 0x80, 0xa6, 0x7e, 0x66, 0x56, 0xc1, 0xb7, 0x01, 0xea, 0x6e, 0x23, 0xb4, 0x6b, 0xdc, 0xf3,
	0x45, 0xb3, 0x9f, 0xa1, 0xeb, 0xd2, 0xfb, 0x95, 0xb3, 0x3f, 0x81, 0x08, 0xd5, 0xd9, 0x56, 0x0c,
	0x4b, 0x51, 0xa7, 0xc6, 0xb5, 0xb5, 0x7d, 0xe4, 0x0b, 0xdb, 0x2b, 0xd4, 0xe5, 0x4e, 0x96, 0xba,
	0x70, 0x52, 0x3e, 0xa0, 0xbc, 0xdd, 0x51, 0x92, 0x96, 0x56, 0x58, 0xb6, 0xdb, 0xc4, 0x09, 0x4d,
	0x11, 0x5e, 0xde, 0x49, 0xfb, 0x1a, 0xb0, 0x2d, 0xb4, 0xad, 0xa6, 0xdb, 0x14, 0x1a, 0x81, 0x28,
	0x38, 0x54, 0x33, 0x6e, 0x29, 0x59, 0x91, 0x0e, 0xe5, 0xa4, 0xd3, 0xd9, 0x6a, 0x07, 0xcf, 0x59,
	0xa0, 0x15, 0x4e, 0xed, 0xe0, 0x19, 0x55, 0xdf, 0x0e, 0x5e, 0x81, 0x62, 0x07, 0xaf, 0x52, 0x4f,
	0xf3, 0x79, 0xfb, 0x7f, 0xe5, 0x60, 0x29, 0x2d, 0x43, 0xeb, 0x4d, 0x28, 0xb8, 0x52, 0xcf, 0x67,
	0x5f, 0x5b, 0x32, 0xea, 0x2b, 0x97, 0x37, 0xc5, 0xbe, 0xa3, 0xcc, 0x47, 0x50, 0xee, 0x3b, 0xca,
	0x6c, 0xec, 0x18, 0xc4, 0x96, 0x1d, 0x37, 0xe8, 0xbe, 0x61, 0x33, 0x4d, 0x92, 0x33, 0x80, 0x0f,
	0x7b, 0x79, 0xaf, 0xfb, 0x86, 0xbd, 0x51, 0xde, 0xa4, 0x7a, 0xd8, 0x13, 0x88, 0x50, 0x9d, 0x9d,
	0xd1, 0xed, 0xc2, 0x15, 0x6c, 0x2c, 0x45, 0xe8, 0x8a, 0x09, 0xe8, 0xea, 0x42, 0x57, 0x8c, 0x7b,
	0x12, 0xba, 0x1a, 0x6c, 0x62, 0xbe, 0x5f, 0x80, 0x99, 0x84, 0xf8, 0x69, 0x58, 0xa6, 0x4c, 0xe3,
	0x51, 0x18, 0xc3, 0x78, 0x3c, 0xca, 0x30, 0x1e, 0x13, 0x19, 0x5b, 0x17, 0xac, 0x78, 0xd4, 0xf9,
	0xf8, 0xd2, 0xed, 0xc7, 0xd8, 0x7e, 0x3c, 0xf9, 0xb7, 0x1c, 0x2c, 0x67, 0xb4, 0x2e, 0x4b, 0x3c,
	0x83, 0x83, 0x3b, 0xcf, 0xc8, 0x5c, 0xe0, 0x0b, 0x74, 0xa5, 0xee, 0x46, 0xe7, 0x58, 0xa0, 0x15,
	0xb9, 0x18, 0x02, 0xaf, 0xee, 0x46, 0x7a, 0x08, 0x58, 0x8a, 0x50, 0x0e, 0xea, 0x05, 0xba, 0x8f,
	0xff, 0x90, 0x05, 0x7a, 0xd4, 0x0a, 0x7e, 0x63, 0x82, 0x2d, 0xd0, 0x8a, 0xfa, 0x0a, 0x16, 0xe8,
	0xaf, 0x40, 0xbe, 0xeb, 0x65, 0x8e, 0xfb, 0x41, 0xed, 0xd0, 0xd3, 0xd7, 0x8b, 0xbb, 0x9e, 0xae,
	0xa8, 0xeb, 0x11, 0x9a, 0xef, 0x7a, 0xd6, 0x3e, 0x2c, 0x04, 0xad, 0x6a, 0xdd, 0xf1, 0x9c, 0x76,
	0x6c, 0x57, 0x5b, 0x4d, 0x5f, 0x2e, 0xc5, 0x5c, 0xc7, 0xcd, 0x1c, 0xad, 0xe3, 0x26, 0x4e, 0x68,
	0x8a, 0xf0, 0xf2, 0xf6, 0xaa, 0x7a, 0x55, 0x9a, 0x1c, 0x7d, 0x55, 0xda, 0x81, 0xf9, 0xb8, 0x1a,
	0x36, 0x9d, 0xd8, 0x96, 0x65, 0xd1, 0x15, 0x36, 0x91, 0x91, 0x5c, 0x0a, 0x97, 0xaa, 0x87, 0x51,
	0x42, 0x0d, 0x22, 0xc4, 0xad, 0x2a, 0x36, 0x2a, 0xd3, 0x69, 0x6e, 0x6b, 0x6a, 0xaf, 0x62, 0x70,
	0x5b, 0x93, 0xdb, 0x15, 0x83, 0x88, 0xfc, 0x68, 0x1e, 0xa6, 0x95, 0x50, 0x9e, 0xa5, 0x80, 0x05,
	0x8f, 0x63, 0x99, 0x01, 0x0b, 0x06, 0xe1, 0x4d, 0x81, 0x48, 0x33, 0x31, 0xf0, 0x1f, 0xd6, 0x97,
	0x61, 0x3a, 0xb9, 0x00, 0x86, 0x0e, 0x88, 0xdd, 0xe4, 0xf6, 0xd7, 0x02, 0xba, 0xcc, 0xc6, 0x0a,
	0xaa, 0x2c, 0xbc, 0x09, 0x99, 0x1c, 0x7d, 0x13, 0xf2, 0x55, 0x98, 0x51, 0x16, 0xbd, 0x81, 0x8f,
	0x86, 0xa5, 0xfd, 0x45, 0x1f, 0x5c, 0x28, 0x84, 0xd0, 0x24, 0xd3, 0xfa, 0x08, 0xac, 0xbe, 0xd0,
	0x44, 0xb4, 0x3a, 0xfd, 0x62, 0xe1, 0xb3, 0x33, 0xeb, 0xaf, 0x9e, 0xf6, 0x4a, 0x4b, 0x91, 0x19,
	0x67, 0x60, 0xda, 0x73, 0x33, 0x63, 0xaf, 0x57, 0x6e, 0x44, 0x84, 0xf6, 0x11, 0x5b, 0x3f, 0x03,
	0xa0, 0xae, 0x2a, 0xb9, 0x0d, 0xe9, 0x62, 0x89, 0xd6, 0x89, 0x3b, 0x5c, 0xb8, 0x75, 0x12, 0x61,
	0xad, 0x93, 0x3f, 0xad, 0x77, 0x61, 0xb1, 0xeb, 0xd9, 0x9d, 0xc8, 0x09, 0xed, 0x6a, 0x5d, 0x04,
	0x7a, 0x41, 0x1f, 0xdb, 0x76, 0xbd, 0x07, 0x91, 0x13, 0xae, 0x89, 0x0c, 0xbd, 0xe7, 0x31, 0x60,
	0x42, 0x4d, 0x32, 0xeb, 0x01, 0x2c, 0x29, 0x96, 0x41, 0x35, 0x8a, 0x1e, 0xf9, 0x61, 0x43, 0x9e,
	0x2a, 0x73, 0x5d, 0x11, 0xc4, 0x7b, 0x32, 0x47, 0xeb, 0x8a, 0x89, 0x13, 0x9a, 0x22, 0x4c, 0x4f,
	0xfd, 0xb9, 0xb1, 0xa7, 0xfe, 0x03, 0x98, 0x6e, 0xf9, 0x75, 0x7e, 0x95, 0x94, 0x9f, 0x29, 0xa7,
	0x2f, 0xf5, 0x6c, 0x39, 0xfe, 0x8e, 0xcc, 0x17, 0x23, 0xa9, 0xa8, 0xf5, 0x48, 0x2a, 0x84, 0xd0,
	0x24, 0xd3, 0xda, 0x49, 0xce, 0x4b, 0x16, 0x32, 0x56, 0x0d, 0x71, 0x3e, 0xa2, 0x0f, 0x64, 0xc2,
	0xd4, 0x41, 0x4a, 0xa8, 0x0e, 0x52, 0xc4, 0x0f, 0xa6, 0x73, 0xf2, 0xae, 0x96, 0x1b, 0xc8, 0xd3,
	0x64, 0xde, 0x16, 0x01, 0x96, 0xf7, 0x74, 0x5b, 0x14, 0x42, 0x68, 0x92, 0x89, 0x6e, 0x7a, 0x35,
	0xda, 0xea, 0x94, 0x18, 0xdd, 0xf4, 0xda, 0xdc, 0xdd, 0x4f, 0xdf, 0xf4, 0xda, 0xdc, 0xdd, 0x4f,
	0x6e, 0x7a, 0x6d, 0xee, 0xee, 0x73, 0x0e, 0xf2, 0xa6, 0x97, 0x1b, 0xc8, 0xe3, 0x61, 0xc1, 0x41,
	0xa0, 0xbc, 0x05, 0x4b, 0xc6, 0x3d, 0x2f, 0xd6, 0x04, 0x9d, 0x8d, 0xef, 0x8a, 0xb1, 0x46, 0x58,
	0x7d, 0x77, 0xc5, 0x44, 0x2b, 0xcc, 0xbb, 0x62, 0xbc, 0x19, 0x88, 0xc0, 0xba, 0x07, 0x73, 0x5d,
	0xcf, 0xae, 0xf9, 0x7e, 0x6c, 0x37, 0xdc, 0xe8, 0x58, 0x1e, 0x11, 0x73, 0x36, 0x5d, 0x6f, 0xdd,
	0xf7, 0xe3, 0x4d, 0x37, 0x3a, 0xd6, 0x6c, 0x34, 0x46, 0x28, 0x22, 0x60, 0xfb, 0x19, 0xc6, 0x86,
	0x39, 0x68, 0x82, 0xcf, 0x75, 0xad, 0x3e, 0x5d, 0x8f, 0x3b, 0x6e, 0x92, 0x91, 0x95, 0x30, 0x52,
	0x20, 0xa1, 0x98, 0x04, 0xad, 0x1c, 0x2b, 0x17, 0x58, 0x39, 0x6e, 0x5c, 0xea, 0xca, 0x71, 0xf3,
	0x02, 0x2b, 0x87, 0xd5, 0x01, 0x8b, 0xef, 0xf5, 0x5c, 0xe7, 0x91, 0xdd, 0xf5, 0xec, 0x86, 0x13,
	0x57, 0xdd, 0xd6, 0xea, 0x6a, 0xc6, 0xcd, 0x55, 0x79, 0x1c, 0x55, 0xe1, 0x6a, 0xcc, 0xef, 0x4e,
	0xb0, 0x8d, 0x9e, 0xeb, 0x3c, 0x3a, 0xf4, 0x36, 0x79, 0x29, 0x7d, 0x77, 0x22, 0x95, 0x41, 0x68,
	0x9a, 0x94, 0xfc, 0x63, 0x1e, 0x66, 0xd1, 0x54, 0xb3, 0xde, 0x82, 0xe9, 0x56, 0x35, 0x76, 0xe3,
	0x4e, 0xc3, 0xc1, 0xc1, 0x46, 0x85, 0xa1, 0xc9, 0x27, 0x11, 0x36, 0xf9, 0xe4, 0x4f, 0xe6, 0x6d,
	0xb6, 0xfc, 0x76, 0x53, 0x94, 0x46, 0xde, 0x66, 0x02, 0x6a, 0x6d, 0x4d, 0x20, 0x42, 0x75, 0x36,
	0xd3, 0xf7, 0x5a, 0xe8, 0x3a, 0x47, 0x76, 0xb5, 0xd1, 0x08, 0xb1, 0xdf, 0xcf, 0xd1, 0xb5, 0x46,
	0x23, 0xd4, 0x1c, 0x12, 0x88, 0x50, 0x9d, 0xcd, 0x77, 0x0e, 0x2d, 0xbf, 0xd3, 0x10, 0x17, 0x97,
	0x70, 0xd8, 0x81, 0xa1, 0xf2, 0x2b, 0x12, 0xb5, 0x73, 0x50, 0x10, 0xdb, 0x39, 0xa8, 0xdf, 0x4c,
	0xac, 0xed, 0x6a, 0xec, 0x76, 0x1d, 0x5b, 0x1a, 0x12, 0x74, 0x71, 0x5f, 0x64, 0x24, 0xc7, 0xaf,
	0xcb, 0x6a, 0x85, 0xd6, 0x28, 0xa1, 0x06, 0x11, 0x69, 0x03, 0x68, 0xa3, 0x33, 0xf6, 0x69, 0xee,
	0xb7, 0xfc, 0xb6, 0xe1, 0x21, 0x7c, 0xe0, 0xb7, 0x91, 0x87, 0xc0, 0x52, 0x84, 0x72, 0x90, 0xfc,
	0xeb, 0x02, 0xcc, 0x61, 0x05, 0x39, 0xdf, 0x76, 0xe1, 0x6d, 0x00, 0xf4, 0xc5, 0x02, 0xde, 0x2f,
	0xa0, 0xcf, 0x15, 0xd4, 0x7e, 0x41, 0x7f, 0xab, 0xa0, 0xb3, 0x99, 0x57, 0xd0, 0x0d, 0x8c, 0xfb,
	0x06, 0xdc, 0x2b, 0x38, 0xdc, 0xdb, 0x90, 0xa5, 0xa5, 0x57, 0x20, 0x01, 0x42, 0x55, 0x16, 0xb3,
	0x54, 0x72, 0x7d, 0x47, 0x17, 0xd7, 0xb8, 0x89, 0x11, 0xfb, 0x1f, 0x59, 0x5e, 0x9a, 0x18, 0x8d,
	0x11, 0x8a, 0x08, 0x2c, 0x07, 0xae, 0x67, 0x1c, 0x0d, 0x88, 0x38, 0xa3, 0x3c, 0x85, 0xe8, 0x8b,
	0xf1, 0x47, 0xfa, 0x14, 0xa2, 0x3f, 0x8f, 0xd0, 0x8c, 0x02, 0xcc, 0x92, 0xb1, 0xb5, 0x3e, 0xa8,
	0xba, 0xa1, 0x68, 0x2e, 0x8a, 0x13, 0x6d, 0x3b, 0x27, 0x7b, 0x55, 0x37, 0x34, 0x23, 0x33, 0x08,
	0x24, 0x14, 0x93, 0x48, 0xdb, 0xaa, 0x0f, 0x12, 0xa7, 0x74, 0xc7, 0x0f, 0x2b, 0xe8, 0x92, 0x86,
	0xec, 0xb8, 0xc6, 0x08, 0x45, 0x04, 0xcc, 0x03, 0x51, 0xeb, 0xbd, 0xdb, 0x90, 0x4e, 0x2c, 0x9f,
	0xba, 0x87, 0x15, 0xb6, 0x80, 0x63, 0x0f, 0x44, 0x21, 0x84, 0x26, 0x99, 0x56, 0x05, 0x16, 0x0c,
	0x77, 0x41, 0x39, 0x31, 0x5c, 0xed, 0x05, 0x15, 0xf7, 0x01, 0x1a, 0x5a, 0xed, 0x31, 0x4a, 0xa8,
	0x41, 0xa4, 0xc2, 0x37, 0x30, 0x46, 0xf8, 0x66, 0x17, 0x66, 0xa4, 0x5f, 0xe9, 0x0a, 0x8f, 0x25,
	0x8b, 0x01, 0xef, 0x99, 0xf8, 0x8e, 0x00, 0xf7, 0x4c, 0x21, 0x84, 0x26, 0x99, 0xd6, 0x3b, 0x30,
	0xc5, 0x34, 0x92, 0x71, 0x9b, 0x1b, 0xc0, 0x8d, 0x4f, 0xc3, 0xc3, 0xa0, 0x5e, 0x2e, 0x6f, 0xea,
	0x69, 0x28, 0xd2, 0x84, 0xca, 0x0c, 0x8b, 0x02, 0x28, 0xff, 0xd3, 0x6d, 0x48, 0x97, 0xa5, 0x9f,
	0x15, 0x9f, 0x2d, 0x32, 0x8e, 0xc5, 0xb9, 0x2d, 0x61, 0x7d, 0xe5, 0x0c, 0x75, 0xb6, 0x15, 0xc1,
	0x72, 0xda, 0x2b, 0x65, 0x6e, 0xe9, 0x02, 0xdf, 0xea, 0xf5, 0x33, 0xff, 0xe9, 0xd3, 0x5e, 0xe9,
	0x9a, 0x79, 0x20, 0x26, 0x3c, 0xd5, 0xd5, 0x0c, 0xed, 0x2d, 0x73, 0x57, 0xb5, 0x9f, 0xdc, 0x7a,
	0x0f, 0xe6, 0x12, 0xdd, 0x65, 0x5d, 0x59, 0x1c, 0xd0, 0x15, 0xae, 0x82, 0x52, 0x53, 0xcb, 0xf8,
	0x7b, 0x0e, 0x8d, 0x11, 0x8a, 0x08, 0x98, 0xf5, 0x88, 0xe2, 0x6a, 0x18, 0xdb, 0xb1, 0xeb, 0x39,
	0xd8, 0xdf, 0xd9, 0x67, 0xe8, 0x81, 0x8b, 0xad, 0x47, 0x02, 0xb1, 0xf1, 0x50, 0xbf, 0x91, 0xf7,
	0x76, 0x6d, 0x04, 0xef, 0x6d, 0x98, 0xe1, 0xfc, 0x10, 0xae, 0xb5, 0x9d, 0xf8, 0x91, 0x1f, 0x1e,
	0xdb, 0x6e, 0x3b, 0x76, 0xc2, 0xa3, 0x6a, 0xdd, 0x91, 0x1e, 0x10, 0x77, 0xf9, 0x77, 0x45, 0x66,
	0x59, 0xe5, 0x69, 0x97, 0x3f, 0x9d, 0x43, 0x68, 0x1f, 0xb1, 0xe9, 0x1b, 0x2e, 0xeb, 0xf9, 0xb6,
	0xd7, 0xe7, 0x1b, 0xee, 0x69, 0xdf, 0x70, 0x2f, 0xdb, 0x37, 0xbc, 0xae, 0xc7, 0x6a, 0xaf, 0xdf,
	0x37, 0xdc, 0x43, 0xbe, 0xe1, 0xde, 0x00, 0xdf, 0x70, 0x05, 0x71, 0xe8, 0xf7, 0x0d, 0xf7, 0x90,
	0x6f, 0xb8, 0x37, 0xc8, 0x37, 0xbc, 0xa1, 0x0d, 0xcf, 0x5e, 0x86, 0x6f, 0xb8, 0x87, 0x7d, 0xc3,
	0xbd, 0xc1, 0xbe, 0xe1, 0x4d, 0x6c, 0xbf, 0xfa, 0x7d, 0x43, 0x8d, 0x71, 0xfb, 0x35, 0xd8, 0x37,
	0x5c, 0xd5, 0x16, 0xf5, 0xb0, 0x92, 0xe1, 0x1b, 0x22, 0x90, 0x50, 0x4c, 0x92, 0x11, 0xb3, 0xba,
	0x75, 0x65, 0xf1, 0xdb, 0x4a, 0xdd, 0x8d, 0xae, 0x2e, 0x7e, 0xcb, 0xb8, 0x27, 0xf1, 0xdb, 0xc1,
	0x11, 0xa8, 0xef, 0xf1, 0xab, 0x87, 0x92, 0xf8, 0x7c, 0xf1, 0xdb, 0x37, 0x79, 0x6c, 0x29, 0xcf,
	0xc7, 0xe7, 0x7a, 0x5f, 0x6c, 0x29, 0xf9, 0x8a, 0x7b, 0xb4, 0xd0, 0x52, 0xe1, 0xd2, 0x43, 0x4b,
	0xe3, 0xdf, 0x34, 0xfc, 0xe5, 0x49, 0x98, 0x92, 0x5d, 0x78, 0x4a, 0x0e, 0x5e, 0x55, 0x8c, 0xa5,
	0x30, 0x5e, 0x8c, 0x65, 0x62, 0xdc, 0x18, 0x4b, 0x71, 0xcc, 0x18, 0xcb, 0xe4, 0xe5, 0xc4, 0x58,
	0xa6, 0xae, 0x26, 0xc6, 0x32, 0x7d, 0x09, 0x31, 0x96, 0x99, 0x2b, 0x88, 0xb1, 0xc0, 0xa5, 0xc7,
	0x58, 0xc6, 0xfe, 0x16, 0x80, 0xfc, 0x1c, 0xac, 0x0a, 0xb3, 0x20, 0x76, 0xac, 0x23, 0x5f, 0x95,
	0x35, 0x8b, 0x8c, 0xb4, 0xb7, 0x26, 0xff, 0x9d, 0x87, 0x05, 0xb3, 0xdc, 0x15, 0xc4, 0x3f, 0xf5,
	0xae, 0xbf, 0x70, 0x81, 0x5d, 0xff, 0xc4, 0xa5, 0xee, 0xfa, 0x8b, 0x17, 0xd9, 0xf5, 0xbf, 0xcd,
	0xcd, 0xef, 0x64, 0xc6, 0xfd, 0x61, 0x66, 0xbb, 0x90, 0x0c, 0x06, 0x59, 0x61, 0xf2, 0x6b, 0x13,
	0xb0, 0x60, 0xd2, 0x8e, 0x36, 0xee, 0x5f, 0x83, 0x19, 0x1e, 0x6f, 0x40, 0xef, 0xd7, 0xa8, 0xc3,
	0x69, 0x01, 0x1a, 0x87, 0xd3, 0x02, 0x12, 0x87, 0xd3, 0xe2, 0x77, 0x22, 0xb8, 0xc2, 0xf9, 0x04,
	0x37, 0x71, 0x01, 0xc1, 0x15, 0x2f, 0x55, 0x70, 0x93, 0x17, 0x11, 0xdc, 0xfd, 0x24, 0x4a, 0x60,
	0x1c, 0x42, 0x70, 0x5b, 0x62, 0x64, 0x68, 0x5b, 0x62, 0xc0, 0x84, 0x9a, 0x64, 0x4c, 0x1e, 0xda,
	0x9d, 0xec, 0xfb, 0x2a, 0xd4, 0x76, 0x83, 0x74, 0xac, 0xd0, 0x76, 0x83, 0x24, 0x56, 0xc8, 0x7e,
	0x7f, 0xa2, 0xdc, 0x91, 0x8b, 0x3c, 0xc5, 0xf1, 0x3a, 0x4c, 0xfa, 0xf8, 0x79, 0x15, 0x2e, 0x27,
	0x5f, 0x19, 0x1c, 0x29, 0x27, 0x5f, 0xda, 0x1a, 0x99, 0x41, 0x7e, 0x94, 0x78, 0x42, 0x62, 0x70,
	0xc6, 0xab, 0xfa, 0x0d, 0x98, 0x62, 0xce, 0x8c, 0x56, 0x47, 0x5e, 0x37, 0x83, 0xf0, 0x8a, 0x25,
	0xd2, 0x84, 0xca, 0x0c, 0xd6, 0x60, 0x29, 0x4e, 0x64, 0x11, 0xaa, 0x75, 0xb3, 0xc1, 0x55, 0x29,
	0x42, 0x99, 0x41, 0xba, 0xb0, 0x24, 0xda, 0x3b, 0xf6, 0x38, 0x8d, 0xd5, 0x58, 0xf2, 0x21, 0xab,
	0x57, 0x1c, 0x0e, 0x0d, 0x78, 0xd7, 0x63, 0xc0, 0xf1, 0x5e, 0xc2, 0x9d, 0x5b, 0x00, 0xc4, 0x9d,
	0x59, 0x01, 0x99, 0x41, 0xfe, 0x9c, 0x7f, 0xf9, 0x79, 0xe8, 0x5d, 0xc4, 0x1d, 0x1d, 0x4f, 0x08,
	0xaa, 0x0f, 0x85, 0x0b, 0xf7, 0xc1, 0x83, 0x15, 0xd3, 0x98, 0xa9, 0x61, 0x3a, 0x38, 0x63, 0xb9,
	0x4a, 0x99, 0x4a, 0xe1, 0x13, 0xf0, 0x34, 0xaf, 0x6a, 0x11, 0x5b, 0x17, 0x56, 0x59, 0x92, 0x49,
	0x7e, 0x98, 0x13, 0xc6, 0xf3, 0xc9, 0xea, 0x01, 0xab, 0x43, 0xd8, 0x5d, 0x64, 0x3b, 0xbb, 0x1e,
	0xae, 0xa3, 0xcb, 0xdf, 0x0b, 0xe3, 0x20, 0xf9, 0x07, 0x29, 0xd7, 0x27, 0x3f, 0xb9, 0xce, 0xd5,
	0x4e, 0x34, 0x15, 0x27, 0x46, 0x9f, 0x8a, 0x8f, 0xe0, 0x96, 0xd8, 0xb7, 0xd4, 0x7d, 0xcf, 0x73,
	0xda, 0x0d, 0x63, 0x6e, 0x7c, 0x60, 0x08, 0xfd, 0x6e, 0x9f, 0x8f, 0x62, 0x94, 0x12, 0xe6, 0x32,
	0x54, 0x90, 0x36, 0x97, 0x09, 0x44, 0xa8, 0xce, 0x26, 0x7f, 0x99, 0x87, 0x6b, 0x7d, 0x3c, 0xac,
	0x63, 0xbe, 0x99, 0x4d, 0xa8, 0xe4, 0xcd, 0x80, 0xbb, 0x19, 0x1b, 0x23, 0x5c, 0x33, 0x5f, 0x43,
	0x70, 0x39, 0xbd, 0x86, 0x60, 0x94, 0x50, 0x83, 0x28, 0x63, 0x03, 0x95, 0xbf, 0xf8, 0x06, 0xaa,
	0x0d, 0x8b, 0x1a, 0x09, 0xaa, 0x61, 0xd5, 0x3b, 0xfb, 0xc6, 0x06, 0x3f, 0x40, 0x48, 0x95, 0xd0,
	0x07, 0x08, 0xa9, 0x0c, 0x42, 0xd3, 0xa4, 0xe4, 0x37, 0x0b, 0x42, 0x3b, 0xcd, 0x71, 0xa4, 0x30,
	0xc9, 0xbb, 0xfa, 0xb1, 0x94, 0xdd, 0x9d, 0xc1, 0x23, 0x98, 0x7c, 0xb5, 0x2f, 0x0a, 0xe0, 0xaf,
	0xa3, 0x58, 0x9a, 0x7f, 0x1d, 0xc5, 0x7e, 0x58, 0x35, 0x98, 0xed, 0x7a, 0x76, 0x10, 0xba, 0x3e,
	0xdb, 0x16, 0xc8, 0x3d, 0xeb, 0xad, 0x3e, 0xc6, 0x7b, 0x92, 0x40, 0x1d, 0x2b, 0x25, 0x25, 0xf0,
	0xb1, 0x52, 0x02, 0xf2, 0x63, 0xa5, 0x24, 0x75, 0x35, 0x7b, 0xda, 0x0c, 0x91, 0x4c, 0x5c, 0xa5,
	0x48, 0x7e, 0x3b, 0x07, 0x73, 0x78, 0x24, 0xac, 0xb7, 0x60, 0x3a, 0x19, 0x36, 0x74, 0xa8, 0x83,
	0x06, 0x66, 0x31, 0x39, 0xff, 0x93, 0xa3, 0x92, 0x64, 0x5a, 0x7b, 0x30, 0x25, 0xe3, 0xd3, 0xc3,
	0xde, 0x03, 0xe0, 0x7b, 0x53, 0x49, 0xab, 0xf7, 0xa6, 0x12, 0x20, 0x54, 0x65, 0x91, 0x3f, 0xc8,
	0xc1, 0x6d, 0x63, 0xea, 0x5d, 0x64, 0xc5, 0x7a, 0xdf, 0x08, 0xa0, 0xdc, 0x19, 0x6c, 0x23, 0x98,
	0x9e, 0x9d, 0xcf, 0x44, 0xfc, 0x52, 0x01, 0x96, 0xd2, 0x2c, 0x0c, 0xcd, 0x2e, 0x5c, 0x92, 0x66,
	0xff, 0x5f, 0x30, 0x04, 0xac, 0x13, 0x5e, 0xf5, 0x13, 0x5b, 0xbc, 0x1a, 0x69, 0xb7, 0x3b, 0x1e,
	0xbe, 0x69, 0x64, 0xe6, 0xe8, 0x4e, 0x98, 0x38, 0xa1, 0x29, 0x42, 0xf2, 0x93, 0x09, 0xe1, 0x32,
	0x19, 0x22, 0xd8, 0x86, 0xb9, 0x50, 0xe8, 0x0a, 0xfe, 0x94, 0x4b, 0x3e, 0x17, 0xa7, 0x71, 0xfc,
	0x5c, 0x9c, 0x46, 0xf9, 0x73, 0x71, 0x3a, 0x99, 0xd1, 0xec, 0xfc, 0x85, 0x9b, 0xcd, 0x9c, 0xf9,
	0x6e, 0x3d, 0xe8, 0xd8, 0x91, 0xfb, 0x2d, 0x07, 0x1f, 0x63, 0x26, 0xa0, 0x56, 0xbd, 0x04, 0x22,
	0x54, 0x67, 0x5b, 0x5b, 0x30, 0xeb, 0x39, 0x9e, 0x1f, 0x9e, 0x08, 0x16, 0x28, 0x0c, 0x86, 0x60,
	0x6d, 0xd0, 0x10, 0x48, 0x28, 0x26, 0x11, 0xdf, 0x60, 0x44, 0xc7, 0x82, 0x4d, 0x11, 0x7f, 0x83,
	0x21, 0x41, 0xfc, 0x0d, 0x86, 0x84, 0xf8, 0x37, 0x18, 0xf2, 0x77, 0x86, 0x6e, 0x4e, 0x5e, 0x89,
	0x6e, 0x4e, 0x5d, 0xa5, 0x45, 0xfc, 0x10, 0x96, 0x77, 0xdc, 0x28, 0xde, 0xf0, 0x1a, 0x62, 0x3e,
	0x67, 0x5f, 0x00, 0x34, 0x3f, 0x44, 0xd5, 0xc4, 0x9d, 0x56, 0x2c, 0x4e, 0xac, 0xea, 0x1e, 0x3a,
	0xb1, 0xaa, 0x7b, 0x0d, 0x42, 0x19, 0x44, 0xfe, 0x29, 0x07, 0xf3, 0x06, 0x35, 0x7f, 0x4f, 0x42,
	0xba, 0x5b, 0xf8, 0xd5, 0x53, 0x01, 0xa1, 0xf7, 0x24, 0x04, 0x40, 0xa8, 0xca, 0xe2, 0x6f, 0xd8,
	0xa2, 0x1d, 0x39, 0xff, 0x1a, 0x53, 0xed, 0xc6, 0xe7, 0x12, 0xe3, 0xc1, 0x8a, 0x08, 0x58, 0x15,
	0x08, 0xf0, 0xe7, 0x9b, 0x1c, 0x30, 0x0b, 0x04, 0xb2, 0x40, 0x80, 0x1e, 0x76, 0x45, 0x5e, 0x5a,
	0x98, 0x7a, 0xd8, 0x35, 0x54, 0x0f, 0xbb, 0xca, 0x1f, 0x3f, 0xce, 0xc1, 0x75, 0x1e, 0xe9, 0xf6,
	0x1a, 0x4f, 0x7e, 0x77, 0xb1, 0x66, 0xec, 0x2e, 0x6e, 0xf6, 0x59, 0xf8, 0x0d, 0x8f, 0x5b, 0xda,
	0xb3, 0x24, 0xf4, 0xef, 0x39, 0xb8, 0x21, 0x49, 0xff, 0x37, 0xf6, 0x47, 0xe7, 0xf3, 0xa3, 0x55,
	0x7f, 0x27, 0xc6, 0xef, 0xef, 0xdf, 0xe6, 0x01, 0x34, 0xe9, 0x13, 0x54, 0xc7, 0x97, 0x21, 0x9f,
	0xe8, 0xa2, 0x08, 0x3d, 0x05, 0x28, 0xf4, 0x14, 0x10, 0x9a, 0x77, 0x03, 0x66, 0x93, 0x78, 0xcc,
	0x14, 0x9d, 0xf3, 0x73, 0x9b, 0x94, 0x80, 0xda, 0x26, 0x25, 0x10, 0xa1, 0x3a, 0x9b, 0xf5, 0x47,
	0x46, 0x82, 0xf1, 0xcd, 0x43, 0x09, 0xe9, 0xfe, 0x48, 0x80, 0x50, 0x95, 0xc5, 0x0a, 0xb2, 0x75,
	0xa4, 0xda, 0x56, 0xd1, 0x6d, 0x5e, 0x50, 0x42, 0xba, 0xa0, 0x04, 0x08, 0x55, 0x59, 0xe4, 0xe7,
	0xc5, 0xdb, 0x6f, 0x6b, 0x4d, 0xa7, 0x1d, 0x97, 0xdb, 0x51, 0x5c, 0x6d, 0xb5, 0x12, 0x2b, 0xf2,
	0xcd, 0xd1, 0xad, 0x88, 0x7a, 0xd2, 0x94, 0xad, 0x13, 0xd5, 0x30, 0xac, 0x9e, 0x18, 0x4f, 0x9a,
	0x26, 0xa8, 0x78, 0xd2, 0x54, 0x27, 0xff, 0x38, 0x07, 0xd7, 0x2a, 0x7e, 0xdb, 0x8d, 0xfd, 0xf0,
	0x09, 0xef, 0x54, 0x5f, 0x87, 0x49, 0xcf, 0x89, 0x43, 0xb7, 0x8e, 0xc3, 0x2b, 0x02, 0x41, 0x85,
	0x78, 0x9a, 0x15, 0x12, 0x3f, 0xbe, 0x05, 0xb7, 0xd8, 0x60, 0xad, 0x3b, 0xed, 0xfa, 0x43, 0xaf,
	0x1a, 0x1e, 0x1b, 0x7b, 0xba, 0x8f, 0xce, 0x1a, 0x2d, 0xa3, 0x88, 0x58, 0xef, 0xc4, 0x40, 0xa8,
	0xc1, 0xb2, 0xf0, 0x60, 0xc9, 0xb1, 0xc2, 0x24, 0xe4, 0x3f, 0xf3, 0x30, 0x6f, 0x70, 0xc9, 0x7e,
	0xc9, 0x7a, 0x88, 0xc1, 0xb3, 0x3e, 0x0f, 0x13, 0x9d, 0xb6, 0x1b, 0xe3, 0xa8, 0x34, 0x4b, 0xeb,
	0xa1, 0x65, 0x29, 0x42, 0x39, 0xc8, 0x88, 0x1b, 0x4e, 0x54, 0xc7, 0xb3, 0x9b, 0xa5, 0x35, 0x31,
	0x4b, 0x11, 0xca, 0x41, 0xa6, 0x82, 0x4e, 0xab, 0x1a, 0x44, 0x8e, 0x71, 0xa2, 0x23, 0x21, 0xad,
	0x82, 0x12, 0x20, 0x54, 0x65, 0xe1, 0x13, 0xa4, 0xa2, 0x79, 0x82, 0xe4, 0xa6, 0x4e, 0x90, 0x5c,
	0x75, 0x82, 0xe4, 0x36, 0xac, 0x06, 0x18, 0xaa, 0x24, 0x43, 0xcd, 0x97, 0x3d, 0xea, 0x7f, 0x92,
	0x83, 0xc5, 0x75, 0xef, 0xdd, 0xf0, 0x64, 0x8d, 0xcd, 0x8b, 0x27, 0xa7, 0x9e, 0x6f, 0x1a, 0x4b,
	0x83, 0xf9, 0x06, 0xf5, 0xba, 0x3e, 0xbd, 0xac, 0xa1, 0xb8, 0x79, 0xcd, 0x23, 0x34, 0x5f, 0xf3,
	0xc8, 0xa7, 0x39, 0x98, 0x5b, 0xf7, 0x9e, 0xfc, 0x74, 0x3a, 0x77, 0xb4, 0x32, 0xe9, 0xe4, 0xc4,
	0xf9, 0x3b, 0xf9, 0x06, 0x14, 0xd7, 0xd5, 0x09, 0xe8, 0x43, 0x3f, 0x8a, 0x71, 0xdf, 0x58, 0x5a,
	0xf7, 0x8d, 0xa5, 0x08, 0xe5, 0x20, 0xf9, 0x45, 0xb0, 0x36, 0xfc, 0x76, 0x7b, 0xc3, 0x6f, 0x1f,
	0xb9, 0xcd, 0x01, 0xef, 0x11, 0x98, 0xcb, 0x92, 0x26, 0x17, 0x07, 0x7d, 0xfa, 0xf0, 0xb3, 0xce,
	0x51, 0x7d, 0xd0, 0x97, 0xce, 0x21, 0xb4, 0x8f, 0x98, 0xfc, 0x6a, 0x4e, 0x7c, 0xb2, 0x91, 0xd1,
	0x08, 0xf7, 0xac, 0x4f, 0x36, 0x2e, 0xb7, 0x15, 0xbf, 0x52, 0x00, 0xd0, 0x1c, 0xad, 0x4d, 0x98,
	0x15, 0x19, 0x78, 0xcf, 0xc1, 0x6f, 0x39, 0x08, 0x02, 0xf3, 0x96, 0x96, 0xc6, 0x08, 0x45, 0x04,
	0xd6, 0x0e, 0xcc, 0x07, 0xa1, 0xdf, 0x75, 0x1b, 0x6a, 0xf9, 0x43, 0x4f, 0x5d, 0xef, 0xc9, 0x0c,
	0xf3, 0x55, 0x60, 0x8c, 0x12, 0x6a, 0x10, 0xb1, 0x36, 0x35, 0x42, 0xb7, 0xab, 0x78, 0xa1, 0xcf,
	0xb4, 0x37, 0x39, 0x6c, 0xb6, 0x49, 0x63, 0x84, 0x22, 0x02, 0x7e, 0xe0, 0x1d, 0x3a, 0x0d, 0xa7,
	0x1d, 0xbb, 0xd5, 0x16, 0x5e, 0x94, 0xc5, 0xe3, 0x18, 0x49, 0x56, 0xea, 0x71, 0x0c, 0x03, 0x27,
	0x34, 0x45, 0x28, 0xde, 0x24, 0x6f, 0x26, 0x47, 0xe8, 0x45, 0xdd, 0x36, 0x71, 0x3b, 0xc7, 0x6c,
	0x9b, 0xc6, 0x08, 0x45, 0x04, 0xc4, 0x83, 0xeb, 0x5a, 0x06, 0x68, 0xb2, 0x3e, 0x00, 0x2e, 0x30,
	0xbb, 0x5f, 0x24, 0xc9, 0x29, 0xbd, 0x21, 0x16, 0x74, 0x4a, 0x8f, 0x45, 0x93, 0x22, 0x24, 0xdf,
	0x80, 0x05, 0x51, 0x79, 0xa2, 0x70, 0xef, 0x9c, 0xf1, 0xdf, 0x02, 0x04, 0xe9, 0x48, 0x37, 0xc9,
	0xc9, 0x47, 0xe2, 0x3f, 0x07, 0xa4, 0xb8, 0x6f, 0x9d, 0xf5, 0x9f, 0x03, 0xce, 0xc3, 0xfe, 0x07,
	0x79, 0x50, 0xb7, 0x9e, 0x52, 0x03, 0x9f, 0x1b, 0x6b, 0xe0, 0x2f, 0x59, 0x51, 0x3b, 0xb0, 0xac,
	0x6f, 0xe4, 0xe8, 0x0f, 0xf2, 0xce, 0x8c, 0x47, 0xf0, 0x29, 0xac, 0x52, 0xe8, 0x3b, 0xbc, 0x9b,
	0xe6, 0xd5, 0x1c, 0xfd, 0x25, 0x5e, 0x1f, 0x31, 0xf9, 0x06, 0x2c, 0x89, 0x2e, 0x21, 0xcd, 0x19,
	0x3c, 0x3c, 0x61, 0xc6, 0xf0, 0x84, 0x78, 0x78, 0x74, 0xe2, 0xb5, 0xdf, 0x2d, 0x40, 0x7e, 0x77,
	0xdf, 0xda, 0x82, 0x69, 0xb1, 0x9b, 0xd8, 0xdd, 0xb7, 0x5e, 0x48, 0xfd, 0xdb, 0x07, 0x63, 0x9b,
	0x71, 0xfb, 0xf9, 0x8c, 0x7f, 0x0a, 0xa1, 0xd4, 0x80, 0x3c, 0x67, 0x7d, 0x0d, 0x26, 0xc5, 0x3f,
	0x96, 0xb0, 0x4c, 0xfb, 0xce, 0xff, 0x1d, 0xca, 0x6d, 0xf3, 0xa9, 0x82, 0xfe, 0xff, 0x40, 0x41,
	0x9e, 0xb3, 0xd6, 0xa0, 0xb8, 0xe5, 0xb0, 0xf2, 0xb7, 0x52, 0x15, 0xe9, 0xae, 0x0f, 0x6b, 0xc3,
	0x3d, 0x98, 0xde, 0x74, 0x5a, 0x0e, 0xef, 0xcc, 0x19, 0x5c, 0xcc, 0x7e, 0xa6, 0xfe, 0xdf, 0x07,
	0x6f, 0xc9, 0xac, 0x60, 0xb3, 0xd6, 0x6a, 0x0d, 0xe8, 0xcf, 0x30, 0x16, 0x1b, 0x30, 0xb5, 0xf1,
	0xd0, 0xa9, 0x1f, 0x9f, 0xa7, 0x3b, 0xe6, 0xbf, 0x41, 0x21, 0xcf, 0xbd, 0xf6, 0x87, 0x2b, 0x30,
	0x51, 0xd9, 0x28, 0x53, 0xeb, 0x03, 0x58, 0x16, 0xb2, 0xe0, 0x57, 0x42, 0xdf, 0x73, 0xe3, 0x87,
	0xdc, 0x2f, 0x2c, 0x0d, 0x7a, 0xdc, 0x5e, 0xf1, 0x7f, 0x71, 0x30, 0x41, 0xd2, 0xd2, 0x0f, 0xe0,
	0x5a, 0x9a, 0xf7, 0xa6, 0xf5, 0x52, 0x56, 0x41, 0x53, 0x1d, 0x46, 0xe1, 0xfd, 0x1e, 0xcc, 0x30,
	0x51, 0xf3, 0x2c, 0x8b, 0xa4, 0x4c, 0x43, 0xc6, 0x7f, 0x5d, 0xb8, 0xfd, 0xff, 0xfa, 0xd4, 0x24,
	0x9b, 0xf1, 0x7d, 0x98, 0xde, 0x72, 0x24, 0xdf, 0x52, 0x26, 0x5f, 0xc4, 0x74, 0x94, 0x96, 0xee,
	0x2a, 0x91, 0x8f, 0xc8, 0x73, 0x98, 0xfc, 0x0f, 0x60, 0x21, 0x51, 0xa1, 0xd1, 0xbb, 0x3f, 0x8c,
	0xeb, 0x7b, 0x30, 0x27, 0x84, 0x20, 0x1e, 0xfe, 0x4d, 0xf1, 0xcc, 0x7c, 0xa4, 0xf8, 0xf6, 0x4b,
	0x03, 0x1f, 0xf2, 0x46, 0x8c, 0xdf, 0x07, 0xe0, 0xaf, 0xc4, 0x65, 0xb1, 0xcd, 0x6e, 0xea, 0x67,
	0x32, 0x24, 0x95, 0xc9, 0xfa, 0x5d, 0x98, 0xd9, 0x72, 0x14, 0xe7, 0xa1, 0xe3, 0x3a, 0x52, 0x6b,
	0xef, 0xc3, 0x9c, 0x18, 0xdc, 0x51, 0xb9, 0x0e, 0x1b, 0xd7, 0x07, 0xb0, 0x98, 0x48, 0xeb, 0x1c,
	0x63, 0x30, 0x5c, 0x5c, 0x96, 0x14, 0x57, 0xe0, 0xd4, 0x93, 0x59, 0x7b, 0x77, 0xc0, 0xe1, 0x83,
	0xe2, 0x5a, 0x1a, 0x98, 0x9f, 0x30, 0xfe, 0x08, 0x6e, 0x98, 0x8c, 0x93, 0x3b, 0xf4, 0x2f, 0x66,
	0x14, 0x36, 0xf5, 0x61, 0x04, 0xf6, 0x0f, 0x60, 0x5a, 0xbc, 0x19, 0xe8, 0xd4, 0x47, 0x1a, 0x87,
	0x97, 0xb3, 0x74, 0xa1, 0x9f, 0x6d, 0x05, 0xa6, 0x98, 0x26, 0x30, 0xae, 0x43, 0x25, 0x36, 0x42,
	0x2b, 0x2b, 0x00, 0x52, 0x0b, 0x46, 0xe2, 0x38, 0x4c, 0x58, 0xfb, 0x30, 0xaf, 0x75, 0x60, 0xd4,
	0x9e, 0x0f, 0x63, 0x5a, 0x81, 0x99, 0xe4, 0xb1, 0xc8, 0x94, 0x6c, 0x32, 0x1e, 0x91, 0x1c, 0xca,
	0xae, 0xa5, 0xd6, 0x01, 0xe3, 0x4a, 0xbc, 0xf5, 0xb9, 0xb3, 0xde, 0x01, 0x32, 0xa5, 0xff, 0xd9,
	0x61, 0xaf, 0x9e, 0xa1, 0xda, 0x9a, 0x70, 0x8d, 0xab, 0x81, 0x51, 0xd7, 0x28, 0xa3, 0xf2, 0x85,
	0x2c, 0x7d, 0x38, 0xa3, 0x22, 0x1b, 0x96, 0x98, 0x62, 0x18, 0xf5, 0x0c, 0x95, 0xe7, 0x79, 0x7a,
	0x72, 0x08, 0xcb, 0x52, 0x55, 0xce, 0x57, 0xc7, 0x30, 0x79, 0x7c, 0x08, 0x37, 0xb4, 0xce, 0x9c,
	0x7b, 0x98, 0x86, 0x71, 0x7f, 0x17, 0x40, 0x08, 0xef, 0x70, 0xd7, 0x89, 0xfb, 0x66, 0x76, 0xdf,
	0xb3, 0x1b, 0x7d, 0x73, 0x26, 0xfd, 0x9c, 0x8f, 0x9e, 0xd9, 0x9c, 0xe1, 0xb8, 0x33, 0x3b, 0x83,
	0xad, 0x98, 0xd9, 0x9c, 0xeb, 0xb9, 0x67, 0x76, 0x26, 0x3b, 0x39, 0xb3, 0x47, 0xe3, 0x78, 0x9e,
	0x99, 0x3d, 0x72, 0xcf, 0x87, 0x31, 0xbd, 0x0f, 0xf3, 0xdc, 0xc1, 0x53, 0xa5, 0x87, 0x37, 0xf3,
	0x6c, 0x67, 0xcf, 0xaa, 0xc1, 0x02, 0x1b, 0x5f, 0xfd, 0xf8, 0xa3, 0x95, 0x5a, 0x62, 0x07, 0x3c,
	0x44, 0x79, 0xfb, 0x95, 0x3e, 0x19, 0x65, 0x3f, 0xf6, 0xca, 0x97, 0xf9, 0xf9, 0x2d, 0x07, 0x57,
	0xf1, 0xd2, 0x80, 0x2a, 0x06, 0xaa, 0xc0, 0x20, 0xd6, 0xaf, 0xfd, 0xcd, 0x02, 0xf7, 0x55, 0xf7,
	0xb5, 0xd6, 0x56, 0xea, 0x6e, 0xd4, 0xa7, 0xb5, 0x7d, 0x1f, 0x1b, 0xf4, 0xe9, 0x43, 0xfa, 0x8d,
	0x0b, 0x2e, 0x40, 0xae, 0xb5, 0x03, 0x19, 0x0e, 0xd7, 0xd9, 0x0c, 0xa6, 0xf7, 0x61, 0x76, 0xc3,
	0x6f, 0xc7, 0xa1, 0xdf, 0x1a, 0xcc, 0x17, 0x5f, 0x57, 0x1a, 0x61, 0xb5, 0x67, 0x83, 0xab, 0x2f,
	0x10, 0x5b, 0x77, 0x32, 0x58, 0x0e, 0xf4, 0xa0, 0x06, 0xdd, 0x72, 0x16, 0x2d, 0x95, 0x8c, 0xb9,
	0xff, 0x30, 0x84, 0xed, 0x08, 0xe3, 0xb9, 0xad, 0xe6, 0x17, 0xef, 0xf9, 0x10, 0x7e, 0xc3, 0xad,
	0x94, 0x9e, 0x5d, 0x23, 0x4a, 0x68, 0xf8, 0xdc, 0x9a, 0xd3, 0x2a, 0x74, 0x58, 0xb1, 0xfa, 0x2f,
	0x2f, 0x99, 0x2a, 0x74, 0x27, 0xf3, 0xba, 0x5e, 0x6a, 0xb2, 0x6a, 0x59, 0x67, 0x72, 0x3c, 0x9f,
	0xac, 0x0f, 0x60, 0x51, 0x8a, 0xe4, 0xb0, 0x22, 0xa5, 0xdd, 0x7f, 0xa1, 0x0f, 0xf5, 0x98, 0x9c,
	0x71, 0xdb, 0x0f, 0xdb, 0xbd, 0xf9, 0x84, 0x2b, 0x17, 0xf5, 0x99, 0x3c, 0x87, 0xf6, 0x7a, 0x5b,
	0xb9, 0xc9, 0xb2, 0xd3, 0x67, 0x72, 0x1b, 0xd6, 0xe3, 0x1a, 0xcc, 0x8b, 0x1b, 0x0c, 0xd5, 0x36,
	0x3f, 0x0e, 0xb2, 0x5e, 0x19, 0x7c, 0x4f, 0xc5, 0x94, 0xce, 0xff, 0x3f, 0xfb, 0xd2, 0x1b, 0xaa,
	0x63, 0x0f, 0xa6, 0xe4, 0x61, 0x53, 0xca, 0x30, 0x65, 0x1d, 0xdc, 0xa6, 0xb6, 0x75, 0x19, 0x87,
	0xe3, 0x5c, 0xf0, 0x33, 0x12, 0x3c, 0xf4, 0xac, 0x97, 0xb3, 0x78, 0xa6, 0x75, 0x29, 0xf5, 0x78,
	0xb4, 0xf1, 0x2f, 0x45, 0xc9, 0x73, 0xd6, 0x37, 0xc1, 0x92, 0x87, 0x67, 0xfc, 0x20, 0xed, 0xc0,
	0x1f, 0xb5, 0xb5, 0xfd, 0xfb, 0xa5, 0xac, 0x93, 0x38, 0x6e, 0xec, 0xe6, 0xb6, 0x1c, 0x7d, 0xf2,
	0x94, 0x0a, 0x1f, 0xe0, 0x78, 0x7f, 0x6a, 0x64, 0x07, 0x1e, 0x58, 0x71, 0xc3, 0xcf, 0xf4, 0x75,
	0xad, 0xd5, 0xd2, 0x7c, 0x5f, 0xe8, 0xe7, 0xab, 0x8f, 0x3e, 0xce, 0xc1, 0xba, 0x09, 0xb7, 0x64,
	0x27, 0xe4, 0xf9, 0xde, 0x55, 0x0d, 0xcc, 0xfb, 0xb0, 0xc0, 0x66, 0x87, 0xa8, 0x64, 0xb3, 0x1a,
	0x57, 0x53, 0xb3, 0xb8, 0xef, 0x78, 0x71, 0x74, 0xd6, 0x65, 0x98, 0xe1, 0x8b, 0xf9, 0x28, 0xf6,
	0x70, 0xc8, 0x32, 0x7e, 0x4f, 0x06, 0x7e, 0x0e, 0xbd, 0xb3, 0xe7, 0xdb, 0x90, 0xd0, 0xcf, 0x8f,
	0xf3, 0x30, 0xf5, 0xe0, 0xa0, 0xbc, 0x53, 0x3e, 0x78, 0xdf, 0xda, 0x16, 0x9e, 0x01, 0x8a, 0xe4,
	0x67, 0x45, 0xa4, 0xfa, 0x97, 0xbd, 0xfe, 0xc3, 0x07, 0xee, 0x01, 0x32, 0x1b, 0x83, 0x78, 0xbd,
	0x34, 0xe0, 0x00, 0x62, 0xe0, 0x92, 0x92, 0xc9, 0x76, 0x43, 0x04, 0x10, 0x64, 0x00, 0x77, 0xb4,
	0x08, 0xa0, 0x19, 0x49, 0x16, 0x62, 0xd8, 0x72, 0x14, 0x8f, 0x3b, 0x19, 0x91, 0xe4, 0x81, 0xe3,
	0x97, 0x66, 0xb5, 0xbe, 0xf4, 0xd7, 0x9f, 0xde, 0xcd, 0xfd, 0xdd, 0xa7, 0x77, 0x73, 0xff, 0xfc,
	0xe9, 0xdd, 0xdc, 0x6f, 0xfd, 0xcb, 0xdd, 0xe7, 0x6a, 0x93, 0xfc, 0x2d, 0xd8, 0xd7, 0xff, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x89, 0xc1, 0x61, 0xc8, 0xe4, 0x79, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NSClient is the client API for NS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NSClient interface {
	CreateNS(ctx context.Context, in *NSCreateRequest, opts ...grpc.CallOption) (*NSInfoResponse, error)
	ListNS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListNSInfoResponse, error)
	GetNS(ctx context.Context, in *NSQryRequest, opts ...grpc.CallOption) (*NSInfoResponse, error)
	DeleteNS(ctx context.Context, in *NSQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllNS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageResponse, error)
	CheckNS(ctx context.Context, in *NSQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
}

type nSClient struct {
	cc *grpc.ClientConn
}

func NewNSClient(cc *grpc.ClientConn) NSClient {
	return &nSClient{cc}
}

func (c *nSClient) CreateNS(ctx context.Context, in *NSCreateRequest, opts ...grpc.CallOption) (*NSInfoResponse, error) {
	out := new(NSInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.NS/CreateNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSClient) ListNS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListNSInfoResponse, error) {
	out := new(ListNSInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.NS/ListNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSClient) GetNS(ctx context.Context, in *NSQryRequest, opts ...grpc.CallOption) (*NSInfoResponse, error) {
	out := new(NSInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.NS/GetNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSClient) DeleteNS(ctx context.Context, in *NSQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.NS/DeleteNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSClient) DeleteAllNS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.NS/DeleteAllNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nSClient) CheckNS(ctx context.Context, in *NSQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.NS/CheckNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NSServer is the server API for NS service.
type NSServer interface {
	CreateNS(context.Context, *NSCreateRequest) (*NSInfoResponse, error)
	ListNS(context.Context, *Empty) (*ListNSInfoResponse, error)
	GetNS(context.Context, *NSQryRequest) (*NSInfoResponse, error)
	DeleteNS(context.Context, *NSQryRequest) (*MessageResponse, error)
	DeleteAllNS(context.Context, *Empty) (*MessageResponse, error)
	CheckNS(context.Context, *NSQryRequest) (*ExistsResponse, error)
}

// UnimplementedNSServer can be embedded to have forward compatible implementations.
type UnimplementedNSServer struct {
}

func (*UnimplementedNSServer) CreateNS(ctx context.Context, req *NSCreateRequest) (*NSInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNS not implemented")
}
func (*UnimplementedNSServer) ListNS(ctx context.Context, req *Empty) (*ListNSInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNS not implemented")
}
func (*UnimplementedNSServer) GetNS(ctx context.Context, req *NSQryRequest) (*NSInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNS not implemented")
}
func (*UnimplementedNSServer) DeleteNS(ctx context.Context, req *NSQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNS not implemented")
}
func (*UnimplementedNSServer) DeleteAllNS(ctx context.Context, req *Empty) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllNS not implemented")
}
func (*UnimplementedNSServer) CheckNS(ctx context.Context, req *NSQryRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNS not implemented")
}

func RegisterNSServer(s *grpc.Server, srv NSServer) {
	s.RegisterService(&_NS_serviceDesc, srv)
}

func _NS_CreateNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSServer).CreateNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.NS/CreateNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSServer).CreateNS(ctx, req.(*NSCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NS_ListNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSServer).ListNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.NS/ListNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSServer).ListNS(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NS_GetNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSServer).GetNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.NS/GetNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSServer).GetNS(ctx, req.(*NSQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NS_DeleteNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSServer).DeleteNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.NS/DeleteNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSServer).DeleteNS(ctx, req.(*NSQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NS_DeleteAllNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSServer).DeleteAllNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.NS/DeleteAllNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSServer).DeleteAllNS(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NS_CheckNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSServer).CheckNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.NS/CheckNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSServer).CheckNS(ctx, req.(*NSQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbtumblebug.NS",
	HandlerType: (*NSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNS",
			Handler:    _NS_CreateNS_Handler,
		},
		{
			MethodName: "ListNS",
			Handler:    _NS_ListNS_Handler,
		},
		{
			MethodName: "GetNS",
			Handler:    _NS_GetNS_Handler,
		},
		{
			MethodName: "DeleteNS",
			Handler:    _NS_DeleteNS_Handler,
		},
		{
			MethodName: "DeleteAllNS",
			Handler:    _NS_DeleteAllNS_Handler,
		},
		{
			MethodName: "CheckNS",
			Handler:    _NS_CheckNS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbtumblebug/cbtumblebug.proto",
}

// MCIRClient is the client API for MCIR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MCIRClient interface {
	CreateImageWithInfo(ctx context.Context, in *TbImageInfoRequest, opts ...grpc.CallOption) (*TbImageInfoResponse, error)
	CreateImageWithID(ctx context.Context, in *TbImageCreateRequest, opts ...grpc.CallOption) (*TbImageInfoResponse, error)
	ListImage(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbImageInfoResponse, error)
	GetImage(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbImageInfoResponse, error)
	DeleteImage(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllImage(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	CreateSshKey(ctx context.Context, in *TbSshKeyCreateRequest, opts ...grpc.CallOption) (*TbSshKeyInfoResponse, error)
	ListSshKey(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbSshKeyInfoResponse, error)
	GetSshKey(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbSshKeyInfoResponse, error)
	DeleteSshKey(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllSshKey(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	CreateSpecWithInfo(ctx context.Context, in *TbSpecInfoRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error)
	CreateSpecWithSpecName(ctx context.Context, in *TbSpecCreateRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error)
	ListSpec(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbSpecInfoResponse, error)
	GetSpec(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error)
	DeleteSpec(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllSpec(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	FetchSpec(ctx context.Context, in *FetchSpecQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	CreateSecurityGroup(ctx context.Context, in *TbSecurityGroupCreateRequest, opts ...grpc.CallOption) (*TbSecurityGroupInfoResponse, error)
	ListSecurityGroup(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbSecurityGroupInfoResponse, error)
	GetSecurityGroup(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbSecurityGroupInfoResponse, error)
	DeleteSecurityGroup(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllSecurityGroup(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	CreateVNet(ctx context.Context, in *TbVNetCreateRequest, opts ...grpc.CallOption) (*TbVNetInfoResponse, error)
	ListVNet(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbVNetInfoResponse, error)
	GetVNet(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbVNetInfoResponse, error)
	DeleteVNet(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllVNet(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	CheckResource(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	ListLookupSpec(ctx context.Context, in *LookupSpecListQryRequest, opts ...grpc.CallOption) (*ListSpiderSpecInfoResponse, error)
	GetLookupSpec(ctx context.Context, in *LookupSpecQryRequest, opts ...grpc.CallOption) (*SpiderSpecInfoResponse, error)
}

type mCIRClient struct {
	cc *grpc.ClientConn
}

func NewMCIRClient(cc *grpc.ClientConn) MCIRClient {
	return &mCIRClient{cc}
}

func (c *mCIRClient) CreateImageWithInfo(ctx context.Context, in *TbImageInfoRequest, opts ...grpc.CallOption) (*TbImageInfoResponse, error) {
	out := new(TbImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateImageWithInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CreateImageWithID(ctx context.Context, in *TbImageCreateRequest, opts ...grpc.CallOption) (*TbImageInfoResponse, error) {
	out := new(TbImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateImageWithID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListImage(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbImageInfoResponse, error) {
	out := new(ListTbImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) GetImage(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbImageInfoResponse, error) {
	out := new(TbImageInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteImage(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteAllImage(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteAllImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CreateSshKey(ctx context.Context, in *TbSshKeyCreateRequest, opts ...grpc.CallOption) (*TbSshKeyInfoResponse, error) {
	out := new(TbSshKeyInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListSshKey(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbSshKeyInfoResponse, error) {
	out := new(ListTbSshKeyInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) GetSshKey(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbSshKeyInfoResponse, error) {
	out := new(TbSshKeyInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/GetSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteSshKey(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteAllSshKey(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteAllSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CreateSpecWithInfo(ctx context.Context, in *TbSpecInfoRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error) {
	out := new(TbSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateSpecWithInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CreateSpecWithSpecName(ctx context.Context, in *TbSpecCreateRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error) {
	out := new(TbSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateSpecWithSpecName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListSpec(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbSpecInfoResponse, error) {
	out := new(ListTbSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) GetSpec(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbSpecInfoResponse, error) {
	out := new(TbSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/GetSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteSpec(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteAllSpec(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteAllSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) FetchSpec(ctx context.Context, in *FetchSpecQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/FetchSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CreateSecurityGroup(ctx context.Context, in *TbSecurityGroupCreateRequest, opts ...grpc.CallOption) (*TbSecurityGroupInfoResponse, error) {
	out := new(TbSecurityGroupInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListSecurityGroup(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbSecurityGroupInfoResponse, error) {
	out := new(ListTbSecurityGroupInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) GetSecurityGroup(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbSecurityGroupInfoResponse, error) {
	out := new(TbSecurityGroupInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/GetSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteSecurityGroup(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteAllSecurityGroup(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteAllSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CreateVNet(ctx context.Context, in *TbVNetCreateRequest, opts ...grpc.CallOption) (*TbVNetInfoResponse, error) {
	out := new(TbVNetInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CreateVNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListVNet(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*ListTbVNetInfoResponse, error) {
	out := new(ListTbVNetInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListVNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) GetVNet(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*TbVNetInfoResponse, error) {
	out := new(TbVNetInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/GetVNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteVNet(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteVNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) DeleteAllVNet(ctx context.Context, in *ResourceAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/DeleteAllVNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) CheckResource(ctx context.Context, in *ResourceQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/CheckResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) ListLookupSpec(ctx context.Context, in *LookupSpecListQryRequest, opts ...grpc.CallOption) (*ListSpiderSpecInfoResponse, error) {
	out := new(ListSpiderSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/ListLookupSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCIRClient) GetLookupSpec(ctx context.Context, in *LookupSpecQryRequest, opts ...grpc.CallOption) (*SpiderSpecInfoResponse, error) {
	out := new(SpiderSpecInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIR/GetLookupSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MCIRServer is the server API for MCIR service.
type MCIRServer interface {
	CreateImageWithInfo(context.Context, *TbImageInfoRequest) (*TbImageInfoResponse, error)
	CreateImageWithID(context.Context, *TbImageCreateRequest) (*TbImageInfoResponse, error)
	ListImage(context.Context, *ResourceAllQryRequest) (*ListTbImageInfoResponse, error)
	GetImage(context.Context, *ResourceQryRequest) (*TbImageInfoResponse, error)
	DeleteImage(context.Context, *ResourceQryRequest) (*MessageResponse, error)
	DeleteAllImage(context.Context, *ResourceAllQryRequest) (*MessageResponse, error)
	CreateSshKey(context.Context, *TbSshKeyCreateRequest) (*TbSshKeyInfoResponse, error)
	ListSshKey(context.Context, *ResourceAllQryRequest) (*ListTbSshKeyInfoResponse, error)
	GetSshKey(context.Context, *ResourceQryRequest) (*TbSshKeyInfoResponse, error)
	DeleteSshKey(context.Context, *ResourceQryRequest) (*MessageResponse, error)
	DeleteAllSshKey(context.Context, *ResourceAllQryRequest) (*MessageResponse, error)
	CreateSpecWithInfo(context.Context, *TbSpecInfoRequest) (*TbSpecInfoResponse, error)
	CreateSpecWithSpecName(context.Context, *TbSpecCreateRequest) (*TbSpecInfoResponse, error)
	ListSpec(context.Context, *ResourceAllQryRequest) (*ListTbSpecInfoResponse, error)
	GetSpec(context.Context, *ResourceQryRequest) (*TbSpecInfoResponse, error)
	DeleteSpec(context.Context, *ResourceQryRequest) (*MessageResponse, error)
	DeleteAllSpec(context.Context, *ResourceAllQryRequest) (*MessageResponse, error)
	FetchSpec(context.Context, *FetchSpecQryRequest) (*MessageResponse, error)
	CreateSecurityGroup(context.Context, *TbSecurityGroupCreateRequest) (*TbSecurityGroupInfoResponse, error)
	ListSecurityGroup(context.Context, *ResourceAllQryRequest) (*ListTbSecurityGroupInfoResponse, error)
	GetSecurityGroup(context.Context, *ResourceQryRequest) (*TbSecurityGroupInfoResponse, error)
	DeleteSecurityGroup(context.Context, *ResourceQryRequest) (*MessageResponse, error)
	DeleteAllSecurityGroup(context.Context, *ResourceAllQryRequest) (*MessageResponse, error)
	CreateVNet(context.Context, *TbVNetCreateRequest) (*TbVNetInfoResponse, error)
	ListVNet(context.Context, *ResourceAllQryRequest) (*ListTbVNetInfoResponse, error)
	GetVNet(context.Context, *ResourceQryRequest) (*TbVNetInfoResponse, error)
	DeleteVNet(context.Context, *ResourceQryRequest) (*MessageResponse, error)
	DeleteAllVNet(context.Context, *ResourceAllQryRequest) (*MessageResponse, error)
	CheckResource(context.Context, *ResourceQryRequest) (*ExistsResponse, error)
	ListLookupSpec(context.Context, *LookupSpecListQryRequest) (*ListSpiderSpecInfoResponse, error)
	GetLookupSpec(context.Context, *LookupSpecQryRequest) (*SpiderSpecInfoResponse, error)
}

// UnimplementedMCIRServer can be embedded to have forward compatible implementations.
type UnimplementedMCIRServer struct {
}

func (*UnimplementedMCIRServer) CreateImageWithInfo(ctx context.Context, req *TbImageInfoRequest) (*TbImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImageWithInfo not implemented")
}
func (*UnimplementedMCIRServer) CreateImageWithID(ctx context.Context, req *TbImageCreateRequest) (*TbImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImageWithID not implemented")
}
func (*UnimplementedMCIRServer) ListImage(ctx context.Context, req *ResourceAllQryRequest) (*ListTbImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImage not implemented")
}
func (*UnimplementedMCIRServer) GetImage(ctx context.Context, req *ResourceQryRequest) (*TbImageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (*UnimplementedMCIRServer) DeleteImage(ctx context.Context, req *ResourceQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (*UnimplementedMCIRServer) DeleteAllImage(ctx context.Context, req *ResourceAllQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllImage not implemented")
}
func (*UnimplementedMCIRServer) CreateSshKey(ctx context.Context, req *TbSshKeyCreateRequest) (*TbSshKeyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSshKey not implemented")
}
func (*UnimplementedMCIRServer) ListSshKey(ctx context.Context, req *ResourceAllQryRequest) (*ListTbSshKeyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSshKey not implemented")
}
func (*UnimplementedMCIRServer) GetSshKey(ctx context.Context, req *ResourceQryRequest) (*TbSshKeyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSshKey not implemented")
}
func (*UnimplementedMCIRServer) DeleteSshKey(ctx context.Context, req *ResourceQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSshKey not implemented")
}
func (*UnimplementedMCIRServer) DeleteAllSshKey(ctx context.Context, req *ResourceAllQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSshKey not implemented")
}
func (*UnimplementedMCIRServer) CreateSpecWithInfo(ctx context.Context, req *TbSpecInfoRequest) (*TbSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecWithInfo not implemented")
}
func (*UnimplementedMCIRServer) CreateSpecWithSpecName(ctx context.Context, req *TbSpecCreateRequest) (*TbSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecWithSpecName not implemented")
}
func (*UnimplementedMCIRServer) ListSpec(ctx context.Context, req *ResourceAllQryRequest) (*ListTbSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpec not implemented")
}
func (*UnimplementedMCIRServer) GetSpec(ctx context.Context, req *ResourceQryRequest) (*TbSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpec not implemented")
}
func (*UnimplementedMCIRServer) DeleteSpec(ctx context.Context, req *ResourceQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpec not implemented")
}
func (*UnimplementedMCIRServer) DeleteAllSpec(ctx context.Context, req *ResourceAllQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSpec not implemented")
}
func (*UnimplementedMCIRServer) FetchSpec(ctx context.Context, req *FetchSpecQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSpec not implemented")
}
func (*UnimplementedMCIRServer) CreateSecurityGroup(ctx context.Context, req *TbSecurityGroupCreateRequest) (*TbSecurityGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityGroup not implemented")
}
func (*UnimplementedMCIRServer) ListSecurityGroup(ctx context.Context, req *ResourceAllQryRequest) (*ListTbSecurityGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityGroup not implemented")
}
func (*UnimplementedMCIRServer) GetSecurityGroup(ctx context.Context, req *ResourceQryRequest) (*TbSecurityGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityGroup not implemented")
}
func (*UnimplementedMCIRServer) DeleteSecurityGroup(ctx context.Context, req *ResourceQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityGroup not implemented")
}
func (*UnimplementedMCIRServer) DeleteAllSecurityGroup(ctx context.Context, req *ResourceAllQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSecurityGroup not implemented")
}
func (*UnimplementedMCIRServer) CreateVNet(ctx context.Context, req *TbVNetCreateRequest) (*TbVNetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVNet not implemented")
}
func (*UnimplementedMCIRServer) ListVNet(ctx context.Context, req *ResourceAllQryRequest) (*ListTbVNetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVNet not implemented")
}
func (*UnimplementedMCIRServer) GetVNet(ctx context.Context, req *ResourceQryRequest) (*TbVNetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVNet not implemented")
}
func (*UnimplementedMCIRServer) DeleteVNet(ctx context.Context, req *ResourceQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVNet not implemented")
}
func (*UnimplementedMCIRServer) DeleteAllVNet(ctx context.Context, req *ResourceAllQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllVNet not implemented")
}
func (*UnimplementedMCIRServer) CheckResource(ctx context.Context, req *ResourceQryRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckResource not implemented")
}
func (*UnimplementedMCIRServer) ListLookupSpec(ctx context.Context, req *LookupSpecListQryRequest) (*ListSpiderSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLookupSpec not implemented")
}
func (*UnimplementedMCIRServer) GetLookupSpec(ctx context.Context, req *LookupSpecQryRequest) (*SpiderSpecInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLookupSpec not implemented")
}

func RegisterMCIRServer(s *grpc.Server, srv MCIRServer) {
	s.RegisterService(&_MCIR_serviceDesc, srv)
}

func _MCIR_CreateImageWithInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbImageInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateImageWithInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateImageWithInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateImageWithInfo(ctx, req.(*TbImageInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CreateImageWithID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbImageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateImageWithID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateImageWithID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateImageWithID(ctx, req.(*TbImageCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListImage(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).GetImage(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteImage(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteAllImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteAllImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteAllImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteAllImage(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CreateSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbSshKeyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateSshKey(ctx, req.(*TbSshKeyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListSshKey(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_GetSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).GetSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/GetSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).GetSshKey(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteSshKey(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteAllSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteAllSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteAllSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteAllSshKey(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CreateSpecWithInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbSpecInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateSpecWithInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateSpecWithInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateSpecWithInfo(ctx, req.(*TbSpecInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CreateSpecWithSpecName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbSpecCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateSpecWithSpecName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateSpecWithSpecName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateSpecWithSpecName(ctx, req.(*TbSpecCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListSpec(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_GetSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).GetSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/GetSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).GetSpec(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteSpec(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteAllSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteAllSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteAllSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteAllSpec(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_FetchSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSpecQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).FetchSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/FetchSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).FetchSpec(ctx, req.(*FetchSpecQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CreateSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbSecurityGroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateSecurityGroup(ctx, req.(*TbSecurityGroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListSecurityGroup(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_GetSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).GetSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/GetSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).GetSecurityGroup(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteSecurityGroup(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteAllSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteAllSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteAllSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteAllSecurityGroup(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CreateVNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVNetCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CreateVNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CreateVNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CreateVNet(ctx, req.(*TbVNetCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListVNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListVNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListVNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListVNet(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_GetVNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).GetVNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/GetVNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).GetVNet(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteVNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteVNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteVNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteVNet(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_DeleteAllVNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).DeleteAllVNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/DeleteAllVNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).DeleteAllVNet(ctx, req.(*ResourceAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_CheckResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).CheckResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/CheckResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).CheckResource(ctx, req.(*ResourceQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_ListLookupSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupSpecListQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).ListLookupSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/ListLookupSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).ListLookupSpec(ctx, req.(*LookupSpecListQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIR_GetLookupSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupSpecQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCIRServer).GetLookupSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIR/GetLookupSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCIRServer).GetLookupSpec(ctx, req.(*LookupSpecQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MCIR_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbtumblebug.MCIR",
	HandlerType: (*MCIRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateImageWithInfo",
			Handler:    _MCIR_CreateImageWithInfo_Handler,
		},
		{
			MethodName: "CreateImageWithID",
			Handler:    _MCIR_CreateImageWithID_Handler,
		},
		{
			MethodName: "ListImage",
			Handler:    _MCIR_ListImage_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _MCIR_GetImage_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _MCIR_DeleteImage_Handler,
		},
		{
			MethodName: "DeleteAllImage",
			Handler:    _MCIR_DeleteAllImage_Handler,
		},
		{
			MethodName: "CreateSshKey",
			Handler:    _MCIR_CreateSshKey_Handler,
		},
		{
			MethodName: "ListSshKey",
			Handler:    _MCIR_ListSshKey_Handler,
		},
		{
			MethodName: "GetSshKey",
			Handler:    _MCIR_GetSshKey_Handler,
		},
		{
			MethodName: "DeleteSshKey",
			Handler:    _MCIR_DeleteSshKey_Handler,
		},
		{
			MethodName: "DeleteAllSshKey",
			Handler:    _MCIR_DeleteAllSshKey_Handler,
		},
		{
			MethodName: "CreateSpecWithInfo",
			Handler:    _MCIR_CreateSpecWithInfo_Handler,
		},
		{
			MethodName: "CreateSpecWithSpecName",
			Handler:    _MCIR_CreateSpecWithSpecName_Handler,
		},
		{
			MethodName: "ListSpec",
			Handler:    _MCIR_ListSpec_Handler,
		},
		{
			MethodName: "GetSpec",
			Handler:    _MCIR_GetSpec_Handler,
		},
		{
			MethodName: "DeleteSpec",
			Handler:    _MCIR_DeleteSpec_Handler,
		},
		{
			MethodName: "DeleteAllSpec",
			Handler:    _MCIR_DeleteAllSpec_Handler,
		},
		{
			MethodName: "FetchSpec",
			Handler:    _MCIR_FetchSpec_Handler,
		},
		{
			MethodName: "CreateSecurityGroup",
			Handler:    _MCIR_CreateSecurityGroup_Handler,
		},
		{
			MethodName: "ListSecurityGroup",
			Handler:    _MCIR_ListSecurityGroup_Handler,
		},
		{
			MethodName: "GetSecurityGroup",
			Handler:    _MCIR_GetSecurityGroup_Handler,
		},
		{
			MethodName: "DeleteSecurityGroup",
			Handler:    _MCIR_DeleteSecurityGroup_Handler,
		},
		{
			MethodName: "DeleteAllSecurityGroup",
			Handler:    _MCIR_DeleteAllSecurityGroup_Handler,
		},
		{
			MethodName: "CreateVNet",
			Handler:    _MCIR_CreateVNet_Handler,
		},
		{
			MethodName: "ListVNet",
			Handler:    _MCIR_ListVNet_Handler,
		},
		{
			MethodName: "GetVNet",
			Handler:    _MCIR_GetVNet_Handler,
		},
		{
			MethodName: "DeleteVNet",
			Handler:    _MCIR_DeleteVNet_Handler,
		},
		{
			MethodName: "DeleteAllVNet",
			Handler:    _MCIR_DeleteAllVNet_Handler,
		},
		{
			MethodName: "CheckResource",
			Handler:    _MCIR_CheckResource_Handler,
		},
		{
			MethodName: "ListLookupSpec",
			Handler:    _MCIR_ListLookupSpec_Handler,
		},
		{
			MethodName: "GetLookupSpec",
			Handler:    _MCIR_GetLookupSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbtumblebug/cbtumblebug.proto",
}

// MCISClient is the client API for MCIS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MCISClient interface {
	CreateMcis(ctx context.Context, in *TbMcisCreateRequest, opts ...grpc.CallOption) (*TbMcisInfoResponse, error)
	ListMcis(ctx context.Context, in *TbMcisAllQryRequest, opts ...grpc.CallOption) (*ListTbMcisInfoResponse, error)
	ControlMcis(ctx context.Context, in *TbMcisActionRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	GetMcisStatus(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*TbMcisStatusInfoResponse, error)
	GetMcisInfo(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*TbMcisInfoResponse, error)
	DeleteMcis(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteAllMcis(ctx context.Context, in *TbMcisAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	CreateMcisVM(ctx context.Context, in *TbVmCreateRequest, opts ...grpc.CallOption) (*TbVmInfoResponse, error)
	ControlMcisVM(ctx context.Context, in *TbVmActionRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	GetMcisVMStatus(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*TbVmStatusInfoesponse, error)
	GetMcisVMInfo(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*TbVmInfoResponse, error)
	DeleteMcisVM(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	RecommandMcis(ctx context.Context, in *McisRecommendCreateRequest, opts ...grpc.CallOption) (*McisRecommendInfoResponse, error)
	CmdMcis(ctx context.Context, in *McisCmdCreateRequest, opts ...grpc.CallOption) (*ListCmdMcisResponse, error)
	CmdMcisVm(ctx context.Context, in *McisCmdVmCreateRequest, opts ...grpc.CallOption) (*StringResponse, error)
	InstallAgentToMcis(ctx context.Context, in *McisCmdCreateRequest, opts ...grpc.CallOption) (*ListAgentInstallResponse, error)
	GetBenchmark(ctx context.Context, in *BmQryRequest, opts ...grpc.CallOption) (*ListBenchmarkInfoResponse, error)
	GetAllBenchmark(ctx context.Context, in *BmQryAllRequest, opts ...grpc.CallOption) (*ListBenchmarkInfoResponse, error)
	InstallMonitorAgentToMcis(ctx context.Context, in *McisCmdCreateRequest, opts ...grpc.CallOption) (*ListAgentInstallResponse, error)
	GetMonitorData(ctx context.Context, in *MonitorQryRequest, opts ...grpc.CallOption) (*ListAgentInstallResponse, error)
	CheckMcis(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	CheckVm(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
}

type mCISClient struct {
	cc *grpc.ClientConn
}

func NewMCISClient(cc *grpc.ClientConn) MCISClient {
	return &mCISClient{cc}
}

func (c *mCISClient) CreateMcis(ctx context.Context, in *TbMcisCreateRequest, opts ...grpc.CallOption) (*TbMcisInfoResponse, error) {
	out := new(TbMcisInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CreateMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) ListMcis(ctx context.Context, in *TbMcisAllQryRequest, opts ...grpc.CallOption) (*ListTbMcisInfoResponse, error) {
	out := new(ListTbMcisInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/ListMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) ControlMcis(ctx context.Context, in *TbMcisActionRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/ControlMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetMcisStatus(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*TbMcisStatusInfoResponse, error) {
	out := new(TbMcisStatusInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetMcisStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetMcisInfo(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*TbMcisInfoResponse, error) {
	out := new(TbMcisInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetMcisInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) DeleteMcis(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/DeleteMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) DeleteAllMcis(ctx context.Context, in *TbMcisAllQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/DeleteAllMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) CreateMcisVM(ctx context.Context, in *TbVmCreateRequest, opts ...grpc.CallOption) (*TbVmInfoResponse, error) {
	out := new(TbVmInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CreateMcisVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) ControlMcisVM(ctx context.Context, in *TbVmActionRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/ControlMcisVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetMcisVMStatus(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*TbVmStatusInfoesponse, error) {
	out := new(TbVmStatusInfoesponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetMcisVMStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetMcisVMInfo(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*TbVmInfoResponse, error) {
	out := new(TbVmInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetMcisVMInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) DeleteMcisVM(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/DeleteMcisVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) RecommandMcis(ctx context.Context, in *McisRecommendCreateRequest, opts ...grpc.CallOption) (*McisRecommendInfoResponse, error) {
	out := new(McisRecommendInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/RecommandMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) CmdMcis(ctx context.Context, in *McisCmdCreateRequest, opts ...grpc.CallOption) (*ListCmdMcisResponse, error) {
	out := new(ListCmdMcisResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CmdMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) CmdMcisVm(ctx context.Context, in *McisCmdVmCreateRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CmdMcisVm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) InstallAgentToMcis(ctx context.Context, in *McisCmdCreateRequest, opts ...grpc.CallOption) (*ListAgentInstallResponse, error) {
	out := new(ListAgentInstallResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/InstallAgentToMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetBenchmark(ctx context.Context, in *BmQryRequest, opts ...grpc.CallOption) (*ListBenchmarkInfoResponse, error) {
	out := new(ListBenchmarkInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetAllBenchmark(ctx context.Context, in *BmQryAllRequest, opts ...grpc.CallOption) (*ListBenchmarkInfoResponse, error) {
	out := new(ListBenchmarkInfoResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetAllBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) InstallMonitorAgentToMcis(ctx context.Context, in *McisCmdCreateRequest, opts ...grpc.CallOption) (*ListAgentInstallResponse, error) {
	out := new(ListAgentInstallResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/InstallMonitorAgentToMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) GetMonitorData(ctx context.Context, in *MonitorQryRequest, opts ...grpc.CallOption) (*ListAgentInstallResponse, error) {
	out := new(ListAgentInstallResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/GetMonitorData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) CheckMcis(ctx context.Context, in *TbMcisQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CheckMcis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCISClient) CheckVm(ctx context.Context, in *TbVmQryRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.MCIS/CheckVm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MCISServer is the server API for MCIS service.
type MCISServer interface {
	CreateMcis(context.Context, *TbMcisCreateRequest) (*TbMcisInfoResponse, error)
	ListMcis(context.Context, *TbMcisAllQryRequest) (*ListTbMcisInfoResponse, error)
	ControlMcis(context.Context, *TbMcisActionRequest) (*MessageResponse, error)
	GetMcisStatus(context.Context, *TbMcisQryRequest) (*TbMcisStatusInfoResponse, error)
	GetMcisInfo(context.Context, *TbMcisQryRequest) (*TbMcisInfoResponse, error)
	DeleteMcis(context.Context, *TbMcisQryRequest) (*MessageResponse, error)
	DeleteAllMcis(context.Context, *TbMcisAllQryRequest) (*MessageResponse, error)
	CreateMcisVM(context.Context, *TbVmCreateRequest) (*TbVmInfoResponse, error)
	ControlMcisVM(context.Context, *TbVmActionRequest) (*MessageResponse, error)
	GetMcisVMStatus(context.Context, *TbVmQryRequest) (*TbVmStatusInfoesponse, error)
	GetMcisVMInfo(context.Context, *TbVmQryRequest) (*TbVmInfoResponse, error)
	DeleteMcisVM(context.Context, *TbVmQryRequest) (*MessageResponse, error)
	RecommandMcis(context.Context, *McisRecommendCreateRequest) (*McisRecommendInfoResponse, error)
	CmdMcis(context.Context, *McisCmdCreateRequest) (*ListCmdMcisResponse, error)
	CmdMcisVm(context.Context, *McisCmdVmCreateRequest) (*StringResponse, error)
	InstallAgentToMcis(context.Context, *McisCmdCreateRequest) (*ListAgentInstallResponse, error)
	GetBenchmark(context.Context, *BmQryRequest) (*ListBenchmarkInfoResponse, error)
	GetAllBenchmark(context.Context, *BmQryAllRequest) (*ListBenchmarkInfoResponse, error)
	InstallMonitorAgentToMcis(context.Context, *McisCmdCreateRequest) (*ListAgentInstallResponse, error)
	GetMonitorData(context.Context, *MonitorQryRequest) (*ListAgentInstallResponse, error)
	CheckMcis(context.Context, *TbMcisQryRequest) (*ExistsResponse, error)
	CheckVm(context.Context, *TbVmQryRequest) (*ExistsResponse, error)
}

// UnimplementedMCISServer can be embedded to have forward compatible implementations.
type UnimplementedMCISServer struct {
}

func (*UnimplementedMCISServer) CreateMcis(ctx context.Context, req *TbMcisCreateRequest) (*TbMcisInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMcis not implemented")
}
func (*UnimplementedMCISServer) ListMcis(ctx context.Context, req *TbMcisAllQryRequest) (*ListTbMcisInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMcis not implemented")
}
func (*UnimplementedMCISServer) ControlMcis(ctx context.Context, req *TbMcisActionRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlMcis not implemented")
}
func (*UnimplementedMCISServer) GetMcisStatus(ctx context.Context, req *TbMcisQryRequest) (*TbMcisStatusInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMcisStatus not implemented")
}
func (*UnimplementedMCISServer) GetMcisInfo(ctx context.Context, req *TbMcisQryRequest) (*TbMcisInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMcisInfo not implemented")
}
func (*UnimplementedMCISServer) DeleteMcis(ctx context.Context, req *TbMcisQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMcis not implemented")
}
func (*UnimplementedMCISServer) DeleteAllMcis(ctx context.Context, req *TbMcisAllQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllMcis not implemented")
}
func (*UnimplementedMCISServer) CreateMcisVM(ctx context.Context, req *TbVmCreateRequest) (*TbVmInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMcisVM not implemented")
}
func (*UnimplementedMCISServer) ControlMcisVM(ctx context.Context, req *TbVmActionRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlMcisVM not implemented")
}
func (*UnimplementedMCISServer) GetMcisVMStatus(ctx context.Context, req *TbVmQryRequest) (*TbVmStatusInfoesponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMcisVMStatus not implemented")
}
func (*UnimplementedMCISServer) GetMcisVMInfo(ctx context.Context, req *TbVmQryRequest) (*TbVmInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMcisVMInfo not implemented")
}
func (*UnimplementedMCISServer) DeleteMcisVM(ctx context.Context, req *TbVmQryRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMcisVM not implemented")
}
func (*UnimplementedMCISServer) RecommandMcis(ctx context.Context, req *McisRecommendCreateRequest) (*McisRecommendInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommandMcis not implemented")
}
func (*UnimplementedMCISServer) CmdMcis(ctx context.Context, req *McisCmdCreateRequest) (*ListCmdMcisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdMcis not implemented")
}
func (*UnimplementedMCISServer) CmdMcisVm(ctx context.Context, req *McisCmdVmCreateRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdMcisVm not implemented")
}
func (*UnimplementedMCISServer) InstallAgentToMcis(ctx context.Context, req *McisCmdCreateRequest) (*ListAgentInstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallAgentToMcis not implemented")
}
func (*UnimplementedMCISServer) GetBenchmark(ctx context.Context, req *BmQryRequest) (*ListBenchmarkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBenchmark not implemented")
}
func (*UnimplementedMCISServer) GetAllBenchmark(ctx context.Context, req *BmQryAllRequest) (*ListBenchmarkInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBenchmark not implemented")
}
func (*UnimplementedMCISServer) InstallMonitorAgentToMcis(ctx context.Context, req *McisCmdCreateRequest) (*ListAgentInstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallMonitorAgentToMcis not implemented")
}
func (*UnimplementedMCISServer) GetMonitorData(ctx context.Context, req *MonitorQryRequest) (*ListAgentInstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorData not implemented")
}
func (*UnimplementedMCISServer) CheckMcis(ctx context.Context, req *TbMcisQryRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMcis not implemented")
}
func (*UnimplementedMCISServer) CheckVm(ctx context.Context, req *TbVmQryRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVm not implemented")
}

func RegisterMCISServer(s *grpc.Server, srv MCISServer) {
	s.RegisterService(&_MCIS_serviceDesc, srv)
}

func _MCIS_CreateMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CreateMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CreateMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CreateMcis(ctx, req.(*TbMcisCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_ListMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).ListMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/ListMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).ListMcis(ctx, req.(*TbMcisAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_ControlMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).ControlMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/ControlMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).ControlMcis(ctx, req.(*TbMcisActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetMcisStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetMcisStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetMcisStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetMcisStatus(ctx, req.(*TbMcisQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetMcisInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetMcisInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetMcisInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetMcisInfo(ctx, req.(*TbMcisQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_DeleteMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).DeleteMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/DeleteMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).DeleteMcis(ctx, req.(*TbMcisQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_DeleteAllMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisAllQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).DeleteAllMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/DeleteAllMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).DeleteAllMcis(ctx, req.(*TbMcisAllQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_CreateMcisVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVmCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CreateMcisVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CreateMcisVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CreateMcisVM(ctx, req.(*TbVmCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_ControlMcisVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVmActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).ControlMcisVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/ControlMcisVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).ControlMcisVM(ctx, req.(*TbVmActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetMcisVMStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVmQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetMcisVMStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetMcisVMStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetMcisVMStatus(ctx, req.(*TbVmQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetMcisVMInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVmQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetMcisVMInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetMcisVMInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetMcisVMInfo(ctx, req.(*TbVmQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_DeleteMcisVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVmQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).DeleteMcisVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/DeleteMcisVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).DeleteMcisVM(ctx, req.(*TbVmQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_RecommandMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisRecommendCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).RecommandMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/RecommandMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).RecommandMcis(ctx, req.(*McisRecommendCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_CmdMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisCmdCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CmdMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CmdMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CmdMcis(ctx, req.(*McisCmdCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_CmdMcisVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisCmdVmCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CmdMcisVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CmdMcisVm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CmdMcisVm(ctx, req.(*McisCmdVmCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_InstallAgentToMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisCmdCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).InstallAgentToMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/InstallAgentToMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).InstallAgentToMcis(ctx, req.(*McisCmdCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BmQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetBenchmark(ctx, req.(*BmQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetAllBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BmQryAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetAllBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetAllBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetAllBenchmark(ctx, req.(*BmQryAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_InstallMonitorAgentToMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McisCmdCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).InstallMonitorAgentToMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/InstallMonitorAgentToMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).InstallMonitorAgentToMcis(ctx, req.(*McisCmdCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_GetMonitorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).GetMonitorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/GetMonitorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).GetMonitorData(ctx, req.(*MonitorQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_CheckMcis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbMcisQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CheckMcis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CheckMcis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CheckMcis(ctx, req.(*TbMcisQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCIS_CheckVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TbVmQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCISServer).CheckVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.MCIS/CheckVm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCISServer).CheckVm(ctx, req.(*TbVmQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MCIS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbtumblebug.MCIS",
	HandlerType: (*MCISServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMcis",
			Handler:    _MCIS_CreateMcis_Handler,
		},
		{
			MethodName: "ListMcis",
			Handler:    _MCIS_ListMcis_Handler,
		},
		{
			MethodName: "ControlMcis",
			Handler:    _MCIS_ControlMcis_Handler,
		},
		{
			MethodName: "GetMcisStatus",
			Handler:    _MCIS_GetMcisStatus_Handler,
		},
		{
			MethodName: "GetMcisInfo",
			Handler:    _MCIS_GetMcisInfo_Handler,
		},
		{
			MethodName: "DeleteMcis",
			Handler:    _MCIS_DeleteMcis_Handler,
		},
		{
			MethodName: "DeleteAllMcis",
			Handler:    _MCIS_DeleteAllMcis_Handler,
		},
		{
			MethodName: "CreateMcisVM",
			Handler:    _MCIS_CreateMcisVM_Handler,
		},
		{
			MethodName: "ControlMcisVM",
			Handler:    _MCIS_ControlMcisVM_Handler,
		},
		{
			MethodName: "GetMcisVMStatus",
			Handler:    _MCIS_GetMcisVMStatus_Handler,
		},
		{
			MethodName: "GetMcisVMInfo",
			Handler:    _MCIS_GetMcisVMInfo_Handler,
		},
		{
			MethodName: "DeleteMcisVM",
			Handler:    _MCIS_DeleteMcisVM_Handler,
		},
		{
			MethodName: "RecommandMcis",
			Handler:    _MCIS_RecommandMcis_Handler,
		},
		{
			MethodName: "CmdMcis",
			Handler:    _MCIS_CmdMcis_Handler,
		},
		{
			MethodName: "CmdMcisVm",
			Handler:    _MCIS_CmdMcisVm_Handler,
		},
		{
			MethodName: "InstallAgentToMcis",
			Handler:    _MCIS_InstallAgentToMcis_Handler,
		},
		{
			MethodName: "GetBenchmark",
			Handler:    _MCIS_GetBenchmark_Handler,
		},
		{
			MethodName: "GetAllBenchmark",
			Handler:    _MCIS_GetAllBenchmark_Handler,
		},
		{
			MethodName: "InstallMonitorAgentToMcis",
			Handler:    _MCIS_InstallMonitorAgentToMcis_Handler,
		},
		{
			MethodName: "GetMonitorData",
			Handler:    _MCIS_GetMonitorData_Handler,
		},
		{
			MethodName: "CheckMcis",
			Handler:    _MCIS_CheckMcis_Handler,
		},
		{
			MethodName: "CheckVm",
			Handler:    _MCIS_CheckVm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbtumblebug/cbtumblebug.proto",
}

// UTILITYClient is the client API for UTILITY service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UTILITYClient interface {
	ListConnConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListConnConfigResponse, error)
	GetConnConfig(ctx context.Context, in *ConnConfigQryRequest, opts ...grpc.CallOption) (*ConnConfigResponse, error)
	ListRegion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListRegionResponse, error)
	GetRegion(ctx context.Context, in *RegionQryRequest, opts ...grpc.CallOption) (*RegionResponse, error)
}

type uTILITYClient struct {
	cc *grpc.ClientConn
}

func NewUTILITYClient(cc *grpc.ClientConn) UTILITYClient {
	return &uTILITYClient{cc}
}

func (c *uTILITYClient) ListConnConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListConnConfigResponse, error) {
	out := new(ListConnConfigResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.UTILITY/ListConnConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTILITYClient) GetConnConfig(ctx context.Context, in *ConnConfigQryRequest, opts ...grpc.CallOption) (*ConnConfigResponse, error) {
	out := new(ConnConfigResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.UTILITY/GetConnConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTILITYClient) ListRegion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListRegionResponse, error) {
	out := new(ListRegionResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.UTILITY/ListRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uTILITYClient) GetRegion(ctx context.Context, in *RegionQryRequest, opts ...grpc.CallOption) (*RegionResponse, error) {
	out := new(RegionResponse)
	err := c.cc.Invoke(ctx, "/cbtumblebug.UTILITY/GetRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UTILITYServer is the server API for UTILITY service.
type UTILITYServer interface {
	ListConnConfig(context.Context, *Empty) (*ListConnConfigResponse, error)
	GetConnConfig(context.Context, *ConnConfigQryRequest) (*ConnConfigResponse, error)
	ListRegion(context.Context, *Empty) (*ListRegionResponse, error)
	GetRegion(context.Context, *RegionQryRequest) (*RegionResponse, error)
}

// UnimplementedUTILITYServer can be embedded to have forward compatible implementations.
type UnimplementedUTILITYServer struct {
}

func (*UnimplementedUTILITYServer) ListConnConfig(ctx context.Context, req *Empty) (*ListConnConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnConfig not implemented")
}
func (*UnimplementedUTILITYServer) GetConnConfig(ctx context.Context, req *ConnConfigQryRequest) (*ConnConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnConfig not implemented")
}
func (*UnimplementedUTILITYServer) ListRegion(ctx context.Context, req *Empty) (*ListRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegion not implemented")
}
func (*UnimplementedUTILITYServer) GetRegion(ctx context.Context, req *RegionQryRequest) (*RegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}

func RegisterUTILITYServer(s *grpc.Server, srv UTILITYServer) {
	s.RegisterService(&_UTILITY_serviceDesc, srv)
}

func _UTILITY_ListConnConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTILITYServer).ListConnConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.UTILITY/ListConnConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTILITYServer).ListConnConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTILITY_GetConnConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnConfigQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTILITYServer).GetConnConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.UTILITY/GetConnConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTILITYServer).GetConnConfig(ctx, req.(*ConnConfigQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTILITY_ListRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTILITYServer).ListRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.UTILITY/ListRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTILITYServer).ListRegion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UTILITY_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UTILITYServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.UTILITY/GetRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UTILITYServer).GetRegion(ctx, req.(*RegionQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UTILITY_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbtumblebug.UTILITY",
	HandlerType: (*UTILITYServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConnConfig",
			Handler:    _UTILITY_ListConnConfig_Handler,
		},
		{
			MethodName: "GetConnConfig",
			Handler:    _UTILITY_GetConnConfig_Handler,
		},
		{
			MethodName: "ListRegion",
			Handler:    _UTILITY_ListRegion_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _UTILITY_GetRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbtumblebug/cbtumblebug.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *KeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SystemId) > 0 {
		i -= len(m.SystemId)
		copy(dAtA[i:], m.SystemId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SystemId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NameId) > 0 {
		i -= len(m.NameId)
		copy(dAtA[i:], m.NameId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NameId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BooleanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BooleanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BooleanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExistsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExistsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExistsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListNSInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNSInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNSInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NSInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NSQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NSQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Force) > 0 {
		i -= len(m.Force)
		copy(dAtA[i:], m.Force)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Force)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResourceType) > 0 {
		i -= len(m.ResourceType)
		copy(dAtA[i:], m.ResourceType)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ResourceType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceAllQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceAllQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceAllQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Force) > 0 {
		i -= len(m.Force)
		copy(dAtA[i:], m.Force)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Force)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResourceType) > 0 {
		i -= len(m.ResourceType)
		copy(dAtA[i:], m.ResourceType)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ResourceType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbImageInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbImageInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbImageInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbImageInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbImageInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbImageInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTbImageInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTbImageInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTbImageInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbImageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbImageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbImageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.GuestOs) > 0 {
		i -= len(m.GuestOs)
		copy(dAtA[i:], m.GuestOs)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.GuestOs)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreationDate) > 0 {
		i -= len(m.CreationDate)
		copy(dAtA[i:], m.CreationDate)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CreationDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CspImageName) > 0 {
		i -= len(m.CspImageName)
		copy(dAtA[i:], m.CspImageName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspImageName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CspImageId) > 0 {
		i -= len(m.CspImageId)
		copy(dAtA[i:], m.CspImageId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspImageId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbImageCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbImageCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbImageCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbImageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbImageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbImageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CspImageId) > 0 {
		i -= len(m.CspImageId)
		copy(dAtA[i:], m.CspImageId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspImageId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSshKeyInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSshKeyInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSshKeyInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTbSshKeyInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTbSshKeyInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTbSshKeyInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbSshKeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSshKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSshKeyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.PrivateKey) > 0 {
		i -= len(m.PrivateKey)
		copy(dAtA[i:], m.PrivateKey)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PrivateKey)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Fingerprint) > 0 {
		i -= len(m.Fingerprint)
		copy(dAtA[i:], m.Fingerprint)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Fingerprint)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CspSshKeyName) > 0 {
		i -= len(m.CspSshKeyName)
		copy(dAtA[i:], m.CspSshKeyName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspSshKeyName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSshKeyCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSshKeyCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSshKeyCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSshKeyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSshKeyReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSshKeyReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSpecInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSpecInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSpecInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSpecInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSpecInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSpecInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTbSpecInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTbSpecInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTbSpecInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbSpecInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSpecInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSpecInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GpuP2P) > 0 {
		i -= len(m.GpuP2P)
		copy(dAtA[i:], m.GpuP2P)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.GpuP2P)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.GpumemGib) > 0 {
		i -= len(m.GpumemGib)
		copy(dAtA[i:], m.GpumemGib)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.GpumemGib)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.NumGpu) > 0 {
		i -= len(m.NumGpu)
		copy(dAtA[i:], m.NumGpu)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NumGpu)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.GpuModel) > 0 {
		i -= len(m.GpuModel)
		copy(dAtA[i:], m.GpuModel)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.GpuModel)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.EbsBwMbps) > 0 {
		i -= len(m.EbsBwMbps)
		copy(dAtA[i:], m.EbsBwMbps)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.EbsBwMbps)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.NetBwGbps) > 0 {
		i -= len(m.NetBwGbps)
		copy(dAtA[i:], m.NetBwGbps)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NetBwGbps)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.MaxTotalStorageTib) > 0 {
		i -= len(m.MaxTotalStorageTib)
		copy(dAtA[i:], m.MaxTotalStorageTib)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MaxTotalStorageTib)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.MaxNumStorage) > 0 {
		i -= len(m.MaxNumStorage)
		copy(dAtA[i:], m.MaxNumStorage)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MaxNumStorage)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.NumStorage) > 0 {
		i -= len(m.NumStorage)
		copy(dAtA[i:], m.NumStorage)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NumStorage)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CostPerHour) > 0 {
		i -= len(m.CostPerHour)
		copy(dAtA[i:], m.CostPerHour)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CostPerHour)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.StorageGib) > 0 {
		i -= len(m.StorageGib)
		copy(dAtA[i:], m.StorageGib)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.StorageGib)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.MemMib) > 0 {
		i -= len(m.MemMib)
		copy(dAtA[i:], m.MemMib)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MemMib)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MemGib) > 0 {
		i -= len(m.MemGib)
		copy(dAtA[i:], m.MemGib)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MemGib)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.NumCore) > 0 {
		i -= len(m.NumCore)
		copy(dAtA[i:], m.NumCore)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NumCore)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NumVcpu) > 0 {
		i -= len(m.NumVcpu)
		copy(dAtA[i:], m.NumVcpu)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NumVcpu)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OsType) > 0 {
		i -= len(m.OsType)
		copy(dAtA[i:], m.OsType)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.OsType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CspSpecName) > 0 {
		i -= len(m.CspSpecName)
		copy(dAtA[i:], m.CspSpecName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspSpecName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSpecCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSpecCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSpecCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSpecReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSpecReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSpecReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CspSpecName) > 0 {
		i -= len(m.CspSpecName)
		copy(dAtA[i:], m.CspSpecName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspSpecName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchSpecQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchSpecQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchSpecQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderSpecInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderSpecInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderSpecInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSpiderSpecInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSpiderSpecInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSpiderSpecInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SpiderSpecInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderSpecInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderSpecInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Gpu) > 0 {
		for iNdEx := len(m.Gpu) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gpu[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Mem) > 0 {
		i -= len(m.Mem)
		copy(dAtA[i:], m.Mem)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Mem)))
		i--
		dAtA[i] = 0x22
	}
	if m.VCpu != nil {
		{
			size, err := m.VCpu.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderVCpuInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderVCpuInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderVCpuInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Clock) > 0 {
		i -= len(m.Clock)
		copy(dAtA[i:], m.Clock)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Clock)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Count) > 0 {
		i -= len(m.Count)
		copy(dAtA[i:], m.Count)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Count)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderGpuInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderGpuInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderGpuInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Mem) > 0 {
		i -= len(m.Mem)
		copy(dAtA[i:], m.Mem)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Mem)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mfr) > 0 {
		i -= len(m.Mfr)
		copy(dAtA[i:], m.Mfr)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Mfr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Count) > 0 {
		i -= len(m.Count)
		copy(dAtA[i:], m.Count)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Count)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSpecListQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSpecListQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSpecListQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LookupSpecQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSpecQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LookupSpecQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SpecName) > 0 {
		i -= len(m.SpecName)
		copy(dAtA[i:], m.SpecName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SpecName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSecurityGroupInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSecurityGroupInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSecurityGroupInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTbSecurityGroupInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTbSecurityGroupInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTbSecurityGroupInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbSecurityGroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSecurityGroupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSecurityGroupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CspSecurityGroupName) > 0 {
		i -= len(m.CspSecurityGroupName)
		copy(dAtA[i:], m.CspSecurityGroupName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspSecurityGroupName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CspSecurityGroupId) > 0 {
		i -= len(m.CspSecurityGroupId)
		copy(dAtA[i:], m.CspSecurityGroupId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspSecurityGroupId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FirewallRules) > 0 {
		for iNdEx := len(m.FirewallRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirewallRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VnetId) > 0 {
		i -= len(m.VnetId)
		copy(dAtA[i:], m.VnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VnetId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderSecurityRuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderSecurityRuleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderSecurityRuleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Direction) > 0 {
		i -= len(m.Direction)
		copy(dAtA[i:], m.Direction)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Direction)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IpProtocol) > 0 {
		i -= len(m.IpProtocol)
		copy(dAtA[i:], m.IpProtocol)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.IpProtocol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToPort) > 0 {
		i -= len(m.ToPort)
		copy(dAtA[i:], m.ToPort)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ToPort)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromPort) > 0 {
		i -= len(m.FromPort)
		copy(dAtA[i:], m.FromPort)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.FromPort)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSecurityGroupCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSecurityGroupCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSecurityGroupCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSecurityGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSecurityGroupReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSecurityGroupReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FirewallRules) > 0 {
		for iNdEx := len(m.FirewallRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirewallRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VnetId) > 0 {
		i -= len(m.VnetId)
		copy(dAtA[i:], m.VnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VnetId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVNetInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVNetInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVNetInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTbVNetInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTbVNetInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTbVNetInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbVNetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVNetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVNetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CspVnetName) > 0 {
		i -= len(m.CspVnetName)
		copy(dAtA[i:], m.CspVnetName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspVnetName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CspVnetId) > 0 {
		i -= len(m.CspVnetId)
		copy(dAtA[i:], m.CspVnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspVnetId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SubnetInfoList) > 0 {
		for iNdEx := len(m.SubnetInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubnetInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CidrBlock) > 0 {
		i -= len(m.CidrBlock)
		copy(dAtA[i:], m.CidrBlock)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CidrBlock)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderSubnetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderSubnetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderSubnetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Ipv4Cidr) > 0 {
		i -= len(m.Ipv4Cidr)
		copy(dAtA[i:], m.Ipv4Cidr)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Ipv4Cidr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Iid != nil {
		{
			size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVNetCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVNetCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVNetCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVNetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVNetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVNetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SubnetInfoList) > 0 {
		for iNdEx := len(m.SubnetInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubnetInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CidrBlock) > 0 {
		i -= len(m.CidrBlock)
		copy(dAtA[i:], m.CidrBlock)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CidrBlock)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderSubnetReqInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderSubnetReqInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderSubnetReqInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Ipv4Cidr) > 0 {
		i -= len(m.Ipv4Cidr)
		copy(dAtA[i:], m.Ipv4Cidr)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Ipv4Cidr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTbMcisInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTbMcisInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTbMcisInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TargetAction) > 0 {
		i -= len(m.TargetAction)
		copy(dAtA[i:], m.TargetAction)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetAction)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TargetStatus) > 0 {
		i -= len(m.TargetStatus)
		copy(dAtA[i:], m.TargetStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetStatus)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PlacementAlgo) > 0 {
		i -= len(m.PlacementAlgo)
		copy(dAtA[i:], m.PlacementAlgo)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PlacementAlgo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Vm) > 0 {
		for iNdEx := len(m.Vm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CspViewVmDetail != nil {
		{
			size, err := m.CspViewVmDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.TargetAction) > 0 {
		i -= len(m.TargetAction)
		copy(dAtA[i:], m.TargetAction)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetAction)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.TargetStatus) > 0 {
		i -= len(m.TargetStatus)
		copy(dAtA[i:], m.TargetStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetStatus)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.VmBlockDisk) > 0 {
		i -= len(m.VmBlockDisk)
		copy(dAtA[i:], m.VmBlockDisk)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmBlockDisk)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.VmBootDisk) > 0 {
		i -= len(m.VmBootDisk)
		copy(dAtA[i:], m.VmBootDisk)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmBootDisk)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.PrivateDns) > 0 {
		i -= len(m.PrivateDns)
		copy(dAtA[i:], m.PrivateDns)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PrivateDns)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.PrivateIp) > 0 {
		i -= len(m.PrivateIp)
		copy(dAtA[i:], m.PrivateIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PrivateIp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.PublicDns) > 0 {
		i -= len(m.PublicDns)
		copy(dAtA[i:], m.PublicDns)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PublicDns)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PublicIp) > 0 {
		i -= len(m.PublicIp)
		copy(dAtA[i:], m.PublicIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PublicIp)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Region != nil {
		{
			size, err := m.Region.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.VmUserPassword) > 0 {
		i -= len(m.VmUserPassword)
		copy(dAtA[i:], m.VmUserPassword)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmUserPassword)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.VmUserAccount) > 0 {
		i -= len(m.VmUserAccount)
		copy(dAtA[i:], m.VmUserAccount)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmUserAccount)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SshKeyId) > 0 {
		i -= len(m.SshKeyId)
		copy(dAtA[i:], m.SshKeyId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SshKeyId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SecurityGroupIds) > 0 {
		for iNdEx := len(m.SecurityGroupIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SecurityGroupIds[iNdEx])
			copy(dAtA[i:], m.SecurityGroupIds[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SecurityGroupIds[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SubnetId) > 0 {
		i -= len(m.SubnetId)
		copy(dAtA[i:], m.SubnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SubnetId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.VnetId) > 0 {
		i -= len(m.VnetId)
		copy(dAtA[i:], m.VnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VnetId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SpecId) > 0 {
		i -= len(m.SpecId)
		copy(dAtA[i:], m.SpecId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SpecId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GeoLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeoLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeoLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NativeRegion) > 0 {
		i -= len(m.NativeRegion)
		copy(dAtA[i:], m.NativeRegion)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NativeRegion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CloudType) > 0 {
		i -= len(m.CloudType)
		copy(dAtA[i:], m.CloudType)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CloudType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BriefAddr) > 0 {
		i -= len(m.BriefAddr)
		copy(dAtA[i:], m.BriefAddr)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.BriefAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Longitude) > 0 {
		i -= len(m.Longitude)
		copy(dAtA[i:], m.Longitude)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Longitude)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Latitude) > 0 {
		i -= len(m.Latitude)
		copy(dAtA[i:], m.Latitude)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Latitude)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Zone) > 0 {
		i -= len(m.Zone)
		copy(dAtA[i:], m.Zone)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Zone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpiderVMInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpiderVMInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpiderVMInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.VmBlockDisk) > 0 {
		i -= len(m.VmBlockDisk)
		copy(dAtA[i:], m.VmBlockDisk)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmBlockDisk)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.VmBootDisk) > 0 {
		i -= len(m.VmBootDisk)
		copy(dAtA[i:], m.VmBootDisk)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmBootDisk)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.PrivateDns) > 0 {
		i -= len(m.PrivateDns)
		copy(dAtA[i:], m.PrivateDns)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PrivateDns)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.PrivateIp) > 0 {
		i -= len(m.PrivateIp)
		copy(dAtA[i:], m.PrivateIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PrivateIp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.PublicDns) > 0 {
		i -= len(m.PublicDns)
		copy(dAtA[i:], m.PublicDns)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PublicDns)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.PublicIp) > 0 {
		i -= len(m.PublicIp)
		copy(dAtA[i:], m.PublicIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PublicIp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.NetworkInterface) > 0 {
		i -= len(m.NetworkInterface)
		copy(dAtA[i:], m.NetworkInterface)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NetworkInterface)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Region != nil {
		{
			size, err := m.Region.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.KeyPairIid != nil {
		{
			size, err := m.KeyPairIid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SecurityGroupIids) > 0 {
		for iNdEx := len(m.SecurityGroupIids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SecurityGroupIids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.SubnetIid != nil {
		{
			size, err := m.SubnetIid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.VpcIid != nil {
		{
			size, err := m.VpcIid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.ImageIid != nil {
		{
			size, err := m.ImageIid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Iid != nil {
		{
			size, err := m.Iid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.VmUserPasswd) > 0 {
		i -= len(m.VmUserPasswd)
		copy(dAtA[i:], m.VmUserPasswd)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmUserPasswd)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.VmUserId) > 0 {
		i -= len(m.VmUserId)
		copy(dAtA[i:], m.VmUserId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmUserId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.VmSpecName) > 0 {
		i -= len(m.VmSpecName)
		copy(dAtA[i:], m.VmSpecName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmSpecName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.KeyPairName) > 0 {
		i -= len(m.KeyPairName)
		copy(dAtA[i:], m.KeyPairName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.KeyPairName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SecurityGroupNames) > 0 {
		for iNdEx := len(m.SecurityGroupNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SecurityGroupNames[iNdEx])
			copy(dAtA[i:], m.SecurityGroupNames[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SecurityGroupNames[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SubnetName) > 0 {
		i -= len(m.SubnetName)
		copy(dAtA[i:], m.SubnetName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SubnetName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VpcName) > 0 {
		i -= len(m.VpcName)
		copy(dAtA[i:], m.VpcName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VpcName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ImageName) > 0 {
		i -= len(m.ImageName)
		copy(dAtA[i:], m.ImageName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ImageName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PlacementAlgo) > 0 {
		i -= len(m.PlacementAlgo)
		copy(dAtA[i:], m.PlacementAlgo)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PlacementAlgo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Vm) > 0 {
		for iNdEx := len(m.Vm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.VmUserPassword) > 0 {
		i -= len(m.VmUserPassword)
		copy(dAtA[i:], m.VmUserPassword)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmUserPassword)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.VmUserAccount) > 0 {
		i -= len(m.VmUserAccount)
		copy(dAtA[i:], m.VmUserAccount)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmUserAccount)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SshKeyId) > 0 {
		i -= len(m.SshKeyId)
		copy(dAtA[i:], m.SshKeyId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SshKeyId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SecurityGroupIds) > 0 {
		for iNdEx := len(m.SecurityGroupIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SecurityGroupIds[iNdEx])
			copy(dAtA[i:], m.SecurityGroupIds[iNdEx])
			i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SecurityGroupIds[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.SubnetId) > 0 {
		i -= len(m.SubnetId)
		copy(dAtA[i:], m.SubnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SubnetId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.VnetId) > 0 {
		i -= len(m.VnetId)
		copy(dAtA[i:], m.VnetId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VnetId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SpecId) > 0 {
		i -= len(m.SpecId)
		copy(dAtA[i:], m.SpecId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SpecId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisStatusInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisStatusInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisStatusInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisStatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisStatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisStatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vm) > 0 {
		for iNdEx := len(m.Vm) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vm[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TargetAction) > 0 {
		i -= len(m.TargetAction)
		copy(dAtA[i:], m.TargetAction)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetAction)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetStatus) > 0 {
		i -= len(m.TargetStatus)
		copy(dAtA[i:], m.TargetStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetStatus)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmStatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmStatusInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmStatusInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublicIp) > 0 {
		i -= len(m.PublicIp)
		copy(dAtA[i:], m.PublicIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PublicIp)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.NativeStatus) > 0 {
		i -= len(m.NativeStatus)
		copy(dAtA[i:], m.NativeStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NativeStatus)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TargetAction) > 0 {
		i -= len(m.TargetAction)
		copy(dAtA[i:], m.TargetAction)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetAction)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TargetStatus) > 0 {
		i -= len(m.TargetStatus)
		copy(dAtA[i:], m.TargetStatus)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.TargetStatus)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CspVmId) > 0 {
		i -= len(m.CspVmId)
		copy(dAtA[i:], m.CspVmId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CspVmId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisAllQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisAllQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisAllQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Option) > 0 {
		i -= len(m.Option)
		copy(dAtA[i:], m.Option)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Option)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisActionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisActionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisActionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbMcisQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbMcisQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbMcisQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmStatusInfoesponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmStatusInfoesponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmStatusInfoesponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VmId) > 0 {
		i -= len(m.VmId)
		copy(dAtA[i:], m.VmId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmActionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmActionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmActionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VmId) > 0 {
		i -= len(m.VmId)
		copy(dAtA[i:], m.VmId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisRecommendInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisRecommendInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisRecommendInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisRecommendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisRecommendInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisRecommendInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlacementParam) > 0 {
		for iNdEx := len(m.PlacementParam) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlacementParam[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PlacementAlgo) > 0 {
		i -= len(m.PlacementAlgo)
		copy(dAtA[i:], m.PlacementAlgo)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PlacementAlgo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VmRecommend) > 0 {
		for iNdEx := len(m.VmRecommend) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VmRecommend[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbVmRecommendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmRecommendInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmRecommendInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlacementParam) > 0 {
		for iNdEx := len(m.PlacementParam) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlacementParam[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PlacementAlgo) > 0 {
		i -= len(m.PlacementAlgo)
		copy(dAtA[i:], m.PlacementAlgo)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PlacementAlgo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VmPriority) > 0 {
		for iNdEx := len(m.VmPriority) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VmPriority[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.VmReq != nil {
		{
			size, err := m.VmReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbVmPriority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmPriority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmPriority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VmSpec != nil {
		{
			size, err := m.VmSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Priority) > 0 {
		i -= len(m.Priority)
		copy(dAtA[i:], m.Priority)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Priority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisRecommendCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisRecommendCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisRecommendCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisRecommendReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisRecommendReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisRecommendReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MaxResultNum) > 0 {
		i -= len(m.MaxResultNum)
		copy(dAtA[i:], m.MaxResultNum)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MaxResultNum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PlacementParam) > 0 {
		for iNdEx := len(m.PlacementParam) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlacementParam[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PlacementAlgo) > 0 {
		i -= len(m.PlacementAlgo)
		copy(dAtA[i:], m.PlacementAlgo)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PlacementAlgo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VmReq) > 0 {
		for iNdEx := len(m.VmReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VmReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TbVmRecommendReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbVmRecommendReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbVmRecommendReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PlacementParam) > 0 {
		for iNdEx := len(m.PlacementParam) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlacementParam[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PlacementAlgo) > 0 {
		i -= len(m.PlacementAlgo)
		copy(dAtA[i:], m.PlacementAlgo)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.PlacementAlgo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DiskSize) > 0 {
		i -= len(m.DiskSize)
		copy(dAtA[i:], m.DiskSize)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.DiskSize)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MemorySize) > 0 {
		i -= len(m.MemorySize)
		copy(dAtA[i:], m.MemorySize)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MemorySize)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VcpuSize) > 0 {
		i -= len(m.VcpuSize)
		copy(dAtA[i:], m.VcpuSize)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VcpuSize)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MaxResultNum) > 0 {
		i -= len(m.MaxResultNum)
		copy(dAtA[i:], m.MaxResultNum)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.MaxResultNum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestName) > 0 {
		i -= len(m.RequestName)
		copy(dAtA[i:], m.RequestName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.RequestName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCmdMcisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCmdMcisResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCmdMcisResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CmdMcisResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdMcisResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmdMcisResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VmIp) > 0 {
		i -= len(m.VmIp)
		copy(dAtA[i:], m.VmIp)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmIp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VmId) > 0 {
		i -= len(m.VmId)
		copy(dAtA[i:], m.VmId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisCmdCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisCmdCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisCmdCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisCmdVmCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisCmdVmCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisCmdVmCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.VmId) > 0 {
		i -= len(m.VmId)
		copy(dAtA[i:], m.VmId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *McisCmdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McisCmdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *McisCmdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SshKey) > 0 {
		i -= len(m.SshKey)
		copy(dAtA[i:], m.SshKey)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SshKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VmId) > 0 {
		i -= len(m.VmId)
		copy(dAtA[i:], m.VmId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.VmId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAgentInstallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAgentInstallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAgentInstallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MonitorQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonitorQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonitorQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metric) > 0 {
		i -= len(m.Metric)
		copy(dAtA[i:], m.Metric)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Metric)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBenchmarkInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBenchmarkInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBenchmarkInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BenchmarkInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BenchmarkInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BenchmarkInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResultArray) > 0 {
		for iNdEx := len(m.ResultArray) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResultArray[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SpecId) > 0 {
		i -= len(m.SpecId)
		copy(dAtA[i:], m.SpecId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.SpecId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Elapsed) > 0 {
		i -= len(m.Elapsed)
		copy(dAtA[i:], m.Elapsed)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Elapsed)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Unit) > 0 {
		i -= len(m.Unit)
		copy(dAtA[i:], m.Unit)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Unit)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BmQryAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BmQryAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BmQryAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BmQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BmQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BmQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.McisId) > 0 {
		i -= len(m.McisId)
		copy(dAtA[i:], m.McisId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.McisId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BmReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BmReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BmReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListConnConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListConnConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListConnConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConnConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RegionName) > 0 {
		i -= len(m.RegionName)
		copy(dAtA[i:], m.RegionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.RegionName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CredentialName) > 0 {
		i -= len(m.CredentialName)
		copy(dAtA[i:], m.CredentialName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.CredentialName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DriverName) > 0 {
		i -= len(m.DriverName)
		copy(dAtA[i:], m.DriverName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.DriverName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProviderName) > 0 {
		i -= len(m.ProviderName)
		copy(dAtA[i:], m.ProviderName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ProviderName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConfigName) > 0 {
		i -= len(m.ConfigName)
		copy(dAtA[i:], m.ConfigName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConfigName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnConfigQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnConfigQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnConfigQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConnConfigName) > 0 {
		i -= len(m.ConnConfigName)
		copy(dAtA[i:], m.ConnConfigName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ConnConfigName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRegionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRegionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRegionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Region) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Region) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Region) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueInfoList) > 0 {
		for iNdEx := len(m.KeyValueInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCbtumblebug(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ProviderName) > 0 {
		i -= len(m.ProviderName)
		copy(dAtA[i:], m.ProviderName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.ProviderName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegionName) > 0 {
		i -= len(m.RegionName)
		copy(dAtA[i:], m.RegionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.RegionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegionQryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionQryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionQryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RegionName) > 0 {
		i -= len(m.RegionName)
		copy(dAtA[i:], m.RegionName)
		i = encodeVarintCbtumblebug(dAtA, i, uint64(len(m.RegionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCbtumblebug(dAtA []byte, offset int, v uint64) int {
	offset -= sovCbtumblebug(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NameId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SystemId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BooleanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExistsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exists {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NSInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListNSInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NSInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NSCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NSQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ResourceType)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Force)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceAllQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ResourceType)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Force)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbImageInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbImageInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTbImageInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbImageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspImageId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspImageName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CreationDate)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.GuestOs)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbImageCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbImageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspImageId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSshKeyInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTbSshKeyInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSshKeyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspSshKeyName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Fingerprint)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PrivateKey)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSshKeyCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSshKeyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSpecInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSpecInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTbSpecInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSpecInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspSpecName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.OsType)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NumVcpu)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NumCore)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.MemGib)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.MemMib)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.StorageGib)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CostPerHour)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NumStorage)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.MaxNumStorage)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.MaxTotalStorageTib)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NetBwGbps)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.EbsBwMbps)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.GpuModel)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NumGpu)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.GpumemGib)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.GpuP2P)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSpecCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSpecReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspSpecName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchSpecQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderSpecInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSpiderSpecInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderSpecInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.VCpu != nil {
		l = m.VCpu.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Mem)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.Gpu) > 0 {
		for _, e := range m.Gpu {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderVCpuInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Count)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Clock)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderGpuInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Count)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Mfr)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Mem)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSpecListQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LookupSpecQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SpecName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSecurityGroupInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTbSecurityGroupInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSecurityGroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VnetId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.FirewallRules) > 0 {
		for _, e := range m.FirewallRules {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.CspSecurityGroupId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspSecurityGroupName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderSecurityRuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromPort)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ToPort)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.IpProtocol)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSecurityGroupCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSecurityGroupReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VnetId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.FirewallRules) > 0 {
		for _, e := range m.FirewallRules {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVNetInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTbVNetInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVNetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CidrBlock)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.SubnetInfoList) > 0 {
		for _, e := range m.SubnetInfoList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspVnetId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspVnetName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderSubnetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iid != nil {
		l = m.Iid.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Ipv4Cidr)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVNetCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVNetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CidrBlock)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.SubnetInfoList) > 0 {
		for _, e := range m.SubnetInfoList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderSubnetReqInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Ipv4Cidr)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTbMcisInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.Vm) > 0 {
		for _, e := range m.Vm {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.PlacementAlgo)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetStatus)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetAction)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SpecId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VnetId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SubnetId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.SecurityGroupIds) > 0 {
		for _, s := range m.SecurityGroupIds {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.SshKeyId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmUserAccount)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmUserPassword)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PublicIp)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PublicDns)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PrivateIp)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PrivateDns)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmBootDisk)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmBlockDisk)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetStatus)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetAction)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.CspViewVmDetail != nil {
		l = m.CspViewVmDetail.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeoLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Latitude)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Longitude)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.BriefAddr)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CloudType)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NativeRegion)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpiderVMInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ImageName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VpcName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SubnetName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.SecurityGroupNames) > 0 {
		for _, s := range m.SecurityGroupNames {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.KeyPairName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmSpecName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmUserId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmUserPasswd)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Iid != nil {
		l = m.Iid.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.ImageIid != nil {
		l = m.ImageIid.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.VpcIid != nil {
		l = m.VpcIid.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.SubnetIid != nil {
		l = m.SubnetIid.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.SecurityGroupIids) > 0 {
		for _, e := range m.SecurityGroupIids {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.KeyPairIid != nil {
		l = m.KeyPairIid.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if m.Region != nil {
		l = m.Region.Size()
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NetworkInterface)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PublicIp)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PublicDns)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PrivateIp)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PrivateDns)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmBootDisk)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmBlockDisk)
	if l > 0 {
		n += 2 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 2 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.Vm) > 0 {
		for _, e := range m.Vm {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.PlacementAlgo)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SpecId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VnetId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SubnetId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.SecurityGroupIds) > 0 {
		for _, s := range m.SecurityGroupIds {
			l = len(s)
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.SshKeyId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmUserAccount)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmUserPassword)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisStatusInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisStatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetStatus)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetAction)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.Vm) > 0 {
		for _, e := range m.Vm {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmStatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CspVmId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetStatus)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.TargetAction)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.NativeStatus)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PublicIp)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisAllQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Option)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisActionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbMcisQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmStatusInfoesponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmActionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisRecommendInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisRecommendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VmRecommend) > 0 {
		for _, e := range m.VmRecommend {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.PlacementAlgo)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.PlacementParam) > 0 {
		for _, e := range m.PlacementParam {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmRecommendInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VmReq != nil {
		l = m.VmReq.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.VmPriority) > 0 {
		for _, e := range m.VmPriority {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.PlacementAlgo)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.PlacementParam) > 0 {
		for _, e := range m.PlacementParam {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmPriority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Priority)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.VmSpec != nil {
		l = m.VmSpec.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisRecommendCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisRecommendReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VmReq) > 0 {
		for _, e := range m.VmReq {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.PlacementAlgo)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.PlacementParam) > 0 {
		for _, e := range m.PlacementParam {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	l = len(m.MaxResultNum)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbVmRecommendReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.MaxResultNum)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VcpuSize)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.MemorySize)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.DiskSize)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.PlacementAlgo)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.PlacementParam) > 0 {
		for _, e := range m.PlacementParam {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCmdMcisResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CmdMcisResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmIp)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisCmdCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisCmdVmCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *McisCmdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.VmId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SshKey)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAgentInstallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MonitorQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Metric)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBenchmarkInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BenchmarkInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Unit)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Elapsed)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.SpecId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.ResultArray) > 0 {
		for _, e := range m.ResultArray {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BmQryAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BmQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.McisId)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BmReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListConnConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ProviderName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.DriverName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.CredentialName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.RegionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnConfigQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnConfigName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRegionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	l = len(m.ProviderName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if len(m.KeyValueInfoList) > 0 {
		for _, e := range m.KeyValueInfoList {
			l = e.Size()
			n += 1 + l + sovCbtumblebug(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionQryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegionName)
	if l > 0 {
		n += 1 + l + sovCbtumblebug(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCbtumblebug(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCbtumblebug(x uint64) (n int) {
	return sovCbtumblebug(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BooleanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BooleanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BooleanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExistsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExistsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExistsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NSInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NSInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &NSInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNSInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNSInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNSInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &NSInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NSInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NSInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NSCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NSCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &NsReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NSQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NSQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NSQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Force = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceAllQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceAllQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceAllQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Force = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbImageInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbImageInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbImageInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbImageInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbImageInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbImageInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbImageInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbImageInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTbImageInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTbImageInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTbImageInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TbImageInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbImageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbImageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbImageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestOs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuestOs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbImageCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbImageCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbImageCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbImageReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbImageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbImageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbImageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSshKeyInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSshKeyInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSshKeyInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSshKeyInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTbSshKeyInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTbSshKeyInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTbSshKeyInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TbSshKeyInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSshKeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSshKeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSshKeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspSshKeyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspSshKeyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fingerprint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fingerprint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSshKeyCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSshKeyCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSshKeyCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSshKeyReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSshKeyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSshKeyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSshKeyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSpecInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSpecInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSpecInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSpecInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSpecInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSpecInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSpecInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSpecInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTbSpecInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTbSpecInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTbSpecInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TbSpecInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSpecInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSpecInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSpecInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspSpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspSpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumVcpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumVcpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumCore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumCore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemGib", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemGib = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemMib", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemMib = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageGib", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageGib = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostPerHour", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CostPerHour = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumStorage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumStorage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumStorage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxNumStorage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTotalStorageTib", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxTotalStorageTib = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetBwGbps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetBwGbps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbsBwMbps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbsBwMbps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GpuModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumGpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumGpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpumemGib", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GpumemGib = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuP2P", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GpuP2P = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSpecCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSpecCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSpecCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSpecReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSpecReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSpecReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSpecReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspSpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspSpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchSpecQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchSpecQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchSpecQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderSpecInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderSpecInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderSpecInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &SpiderSpecInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSpiderSpecInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSpiderSpecInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSpiderSpecInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &SpiderSpecInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderSpecInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderSpecInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderSpecInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VCpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VCpu == nil {
				m.VCpu = &SpiderVCpuInfo{}
			}
			if err := m.VCpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gpu = append(m.Gpu, &SpiderGpuInfo{})
			if err := m.Gpu[len(m.Gpu)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderVCpuInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderVCpuInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderVCpuInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderGpuInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderGpuInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderGpuInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mfr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mfr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSpecListQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSpecListQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSpecListQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSpecQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSpecQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSpecQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSecurityGroupInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSecurityGroupInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSecurityGroupInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSecurityGroupInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTbSecurityGroupInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTbSecurityGroupInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTbSecurityGroupInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TbSecurityGroupInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSecurityGroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSecurityGroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSecurityGroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirewallRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirewallRules = append(m.FirewallRules, &SpiderSecurityRuleInfo{})
			if err := m.FirewallRules[len(m.FirewallRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspSecurityGroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspSecurityGroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspSecurityGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspSecurityGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderSecurityRuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderSecurityRuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderSecurityRuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Direction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSecurityGroupCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSecurityGroupCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSecurityGroupCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbSecurityGroupReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSecurityGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSecurityGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSecurityGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirewallRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirewallRules = append(m.FirewallRules, &SpiderSecurityRuleInfo{})
			if err := m.FirewallRules[len(m.FirewallRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVNetInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVNetInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVNetInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbVNetInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTbVNetInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTbVNetInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTbVNetInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TbVNetInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVNetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVNetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVNetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CidrBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CidrBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetInfoList = append(m.SubnetInfoList, &SpiderSubnetInfo{})
			if err := m.SubnetInfoList[len(m.SubnetInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspVnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspVnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspVnetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspVnetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderSubnetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderSubnetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderSubnetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iid == nil {
				m.Iid = &IID{}
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVNetCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVNetCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVNetCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbVNetReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVNetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVNetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVNetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CidrBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CidrBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetInfoList = append(m.SubnetInfoList, &SpiderSubnetReqInfo{})
			if err := m.SubnetInfoList[len(m.SubnetInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderSubnetReqInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderSubnetReqInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderSubnetReqInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4Cidr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4Cidr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbMcisInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTbMcisInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTbMcisInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTbMcisInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TbMcisInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vm = append(m.Vm, &TbVmInfo{})
			if err := m.Vm[len(m.Vm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroupIds = append(m.SecurityGroupIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &GeoLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &RegionInfo{}
			}
			if err := m.Region.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicDns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicDns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateDns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateDns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmBootDisk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmBootDisk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmBlockDisk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmBlockDisk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspViewVmDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CspViewVmDetail == nil {
				m.CspViewVmDetail = &SpiderVMInfo{}
			}
			if err := m.CspViewVmDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeoLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeoLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeoLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Latitude = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Longitude = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BriefAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BriefAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpiderVMInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpiderVMInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpiderVMInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroupNames = append(m.SecurityGroupNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPairName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPairName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmSpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmSpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserPasswd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserPasswd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iid == nil {
				m.Iid = &IID{}
			}
			if err := m.Iid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageIid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImageIid == nil {
				m.ImageIid = &IID{}
			}
			if err := m.ImageIid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcIid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VpcIid == nil {
				m.VpcIid = &IID{}
			}
			if err := m.VpcIid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetIid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubnetIid == nil {
				m.SubnetIid = &IID{}
			}
			if err := m.SubnetIid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupIids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroupIids = append(m.SecurityGroupIids, &IID{})
			if err := m.SecurityGroupIids[len(m.SecurityGroupIids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPairIid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyPairIid == nil {
				m.KeyPairIid = &IID{}
			}
			if err := m.KeyPairIid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &RegionInfo{}
			}
			if err := m.Region.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicDns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicDns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateDns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateDns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmBootDisk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmBootDisk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmBlockDisk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmBlockDisk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbMcisReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vm = append(m.Vm, &TbVmReq{})
			if err := m.Vm[len(m.Vm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroupIds = append(m.SecurityGroupIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmUserPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmUserPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisStatusInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisStatusInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisStatusInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &McisStatusInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisStatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisStatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisStatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vm = append(m.Vm, &TbVmStatusInfo{})
			if err := m.Vm[len(m.Vm)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmStatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmStatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmStatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspVmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspVmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisAllQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisAllQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisAllQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Option = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisActionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisActionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisActionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbMcisQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbMcisQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbMcisQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbVmInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbVmInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmStatusInfoesponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmStatusInfoesponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmStatusInfoesponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &TbVmStatusInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmActionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmActionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmActionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisRecommendInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisRecommendInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisRecommendInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &McisRecommendInfo{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisRecommendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisRecommendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisRecommendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmRecommend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmRecommend = append(m.VmRecommend, &TbVmRecommendInfo{})
			if err := m.VmRecommend[len(m.VmRecommend)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementParam = append(m.PlacementParam, &KeyValue{})
			if err := m.PlacementParam[len(m.PlacementParam)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmRecommendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmRecommendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmRecommendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VmReq == nil {
				m.VmReq = &TbVmRecommendReq{}
			}
			if err := m.VmReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmPriority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmPriority = append(m.VmPriority, &TbVmPriority{})
			if err := m.VmPriority[len(m.VmPriority)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementParam = append(m.PlacementParam, &KeyValue{})
			if err := m.PlacementParam[len(m.PlacementParam)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmPriority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmPriority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmPriority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Priority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VmSpec == nil {
				m.VmSpec = &TbSpecInfo{}
			}
			if err := m.VmSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisRecommendCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisRecommendCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisRecommendCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &McisRecommendReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisRecommendReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisRecommendReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisRecommendReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmReq = append(m.VmReq, &TbVmRecommendReq{})
			if err := m.VmReq[len(m.VmReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementParam = append(m.PlacementParam, &KeyValue{})
			if err := m.PlacementParam[len(m.PlacementParam)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResultNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxResultNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbVmRecommendReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbVmRecommendReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbVmRecommendReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResultNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxResultNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VcpuSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VcpuSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemorySize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiskSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementParam = append(m.PlacementParam, &KeyValue{})
			if err := m.PlacementParam[len(m.PlacementParam)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCmdMcisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCmdMcisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCmdMcisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CmdMcisResult{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdMcisResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdMcisResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdMcisResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisCmdCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisCmdCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisCmdCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &McisCmdReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisCmdVmCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisCmdVmCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisCmdVmCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &McisCmdReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McisCmdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McisCmdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McisCmdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SshKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SshKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAgentInstallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAgentInstallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAgentInstallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &CmdMcisResult{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonitorQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonitorQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonitorQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBenchmarkInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBenchmarkInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBenchmarkInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &BenchmarkInfo{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BenchmarkInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BenchmarkInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BenchmarkInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elapsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elapsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultArray = append(m.ResultArray, &BenchmarkInfo{})
			if err := m.ResultArray[len(m.ResultArray)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BmQryAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BmQryAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BmQryAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &BmReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BmQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BmQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BmQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McisId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.McisId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &BmReq{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BmReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BmReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BmReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ConnConfig{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListConnConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListConnConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListConnConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ConnConfig{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnConfigQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnConfigQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnConfigQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnConfigName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnConfigName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &Region{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRegionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRegionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRegionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Region{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Region) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueInfoList = append(m.KeyValueInfoList, &KeyValue{})
			if err := m.KeyValueInfoList[len(m.KeyValueInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionQryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionQryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionQryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCbtumblebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCbtumblebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCbtumblebug(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCbtumblebug
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCbtumblebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCbtumblebug
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCbtumblebug
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCbtumblebug
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCbtumblebug        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCbtumblebug          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCbtumblebug = fmt.Errorf("proto: unexpected end of group")
)
