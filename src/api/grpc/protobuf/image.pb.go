// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: image.proto

package cbtumblebug

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TbImageReq struct {
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string   `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspImageId           string   `protobuf:"bytes,4,opt,name=csp_image_id,json=cspImageId,proto3" json:"cspImageId" yaml:"cspImageId"`
	CspImageName         string   `protobuf:"bytes,5,opt,name=csp_image_name,json=cspImageName,proto3" json:"cspImageName" yaml:"cspImageName"`
	Description          string   `protobuf:"bytes,6,opt,name=description,proto3" json:"description" yaml:"description"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbImageReq) Reset()         { *m = TbImageReq{} }
func (m *TbImageReq) String() string { return proto.CompactTextString(m) }
func (*TbImageReq) ProtoMessage()    {}
func (*TbImageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{0}
}
func (m *TbImageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbImageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbImageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbImageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbImageReq.Merge(m, src)
}
func (m *TbImageReq) XXX_Size() int {
	return m.Size()
}
func (m *TbImageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TbImageReq.DiscardUnknown(m)
}

var xxx_messageInfo_TbImageReq proto.InternalMessageInfo

func (m *TbImageReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbImageReq) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbImageReq) GetCspImageId() string {
	if m != nil {
		return m.CspImageId
	}
	return ""
}

func (m *TbImageReq) GetCspImageName() string {
	if m != nil {
		return m.CspImageName
	}
	return ""
}

func (m *TbImageReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RegisterImageWithIdWrapper struct {
	NsId                 string      `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	TbImageReq           *TbImageReq `protobuf:"bytes,2,opt,name=tb_image_req,json=tbImageReq,proto3" json:"tbImageReq" yaml:"tbImageReq"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RegisterImageWithIdWrapper) Reset()         { *m = RegisterImageWithIdWrapper{} }
func (m *RegisterImageWithIdWrapper) String() string { return proto.CompactTextString(m) }
func (*RegisterImageWithIdWrapper) ProtoMessage()    {}
func (*RegisterImageWithIdWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{1}
}
func (m *RegisterImageWithIdWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterImageWithIdWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterImageWithIdWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterImageWithIdWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterImageWithIdWrapper.Merge(m, src)
}
func (m *RegisterImageWithIdWrapper) XXX_Size() int {
	return m.Size()
}
func (m *RegisterImageWithIdWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterImageWithIdWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterImageWithIdWrapper proto.InternalMessageInfo

func (m *RegisterImageWithIdWrapper) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *RegisterImageWithIdWrapper) GetTbImageReq() *TbImageReq {
	if m != nil {
		return m.TbImageReq
	}
	return nil
}

type TbImageInfo struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string      `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspImageId           string      `protobuf:"bytes,4,opt,name=csp_image_id,json=cspImageId,proto3" json:"cspImageId" yaml:"cspImageId"`
	CspImageName         string      `protobuf:"bytes,5,opt,name=csp_image_name,json=cspImageName,proto3" json:"cspImageName" yaml:"cspImageName"`
	Description          string      `protobuf:"bytes,6,opt,name=description,proto3" json:"description" yaml:"description"`
	CreationDate         string      `protobuf:"bytes,7,opt,name=creation_date,json=creationDate,proto3" json:"creationDate" yaml:"creationDate"`
	GuestOs              string      `protobuf:"bytes,8,opt,name=guest_os,json=guestOS,proto3" json:"guestOS" yaml:"guestOS"`
	Status               string      `protobuf:"bytes,9,opt,name=status,proto3" json:"status" yaml:"status"`
	KeyValueList         []*KeyValue `protobuf:"bytes,10,rep,name=key_value_list,json=keyValueList,proto3" json:"keyValueList" yaml:"keyValueList"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TbImageInfo) Reset()         { *m = TbImageInfo{} }
func (m *TbImageInfo) String() string { return proto.CompactTextString(m) }
func (*TbImageInfo) ProtoMessage()    {}
func (*TbImageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{2}
}
func (m *TbImageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbImageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbImageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbImageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbImageInfo.Merge(m, src)
}
func (m *TbImageInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbImageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbImageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbImageInfo proto.InternalMessageInfo

func (m *TbImageInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbImageInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbImageInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbImageInfo) GetCspImageId() string {
	if m != nil {
		return m.CspImageId
	}
	return ""
}

func (m *TbImageInfo) GetCspImageName() string {
	if m != nil {
		return m.CspImageName
	}
	return ""
}

func (m *TbImageInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbImageInfo) GetCreationDate() string {
	if m != nil {
		return m.CreationDate
	}
	return ""
}

func (m *TbImageInfo) GetGuestOs() string {
	if m != nil {
		return m.GuestOs
	}
	return ""
}

func (m *TbImageInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TbImageInfo) GetKeyValueList() []*KeyValue {
	if m != nil {
		return m.KeyValueList
	}
	return nil
}

type RegisterImageWithInfoWrapper struct {
	NsId                 string       `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	TbImageInfo          *TbImageInfo `protobuf:"bytes,2,opt,name=tb_image_info,json=tbImageInfo,proto3" json:"tbImageInfo" yaml:"tbImageInfo"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RegisterImageWithInfoWrapper) Reset()         { *m = RegisterImageWithInfoWrapper{} }
func (m *RegisterImageWithInfoWrapper) String() string { return proto.CompactTextString(m) }
func (*RegisterImageWithInfoWrapper) ProtoMessage()    {}
func (*RegisterImageWithInfoWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{3}
}
func (m *RegisterImageWithInfoWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterImageWithInfoWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterImageWithInfoWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterImageWithInfoWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterImageWithInfoWrapper.Merge(m, src)
}
func (m *RegisterImageWithInfoWrapper) XXX_Size() int {
	return m.Size()
}
func (m *RegisterImageWithInfoWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterImageWithInfoWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterImageWithInfoWrapper proto.InternalMessageInfo

func (m *RegisterImageWithInfoWrapper) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *RegisterImageWithInfoWrapper) GetTbImageInfo() *TbImageInfo {
	if m != nil {
		return m.TbImageInfo
	}
	return nil
}

type TbImageInfoList struct {
	TbImageInfos         []*TbImageInfo `protobuf:"bytes,1,rep,name=tb_image_infos,json=image,proto3" json:"image" yaml:"image"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TbImageInfoList) Reset()         { *m = TbImageInfoList{} }
func (m *TbImageInfoList) String() string { return proto.CompactTextString(m) }
func (*TbImageInfoList) ProtoMessage()    {}
func (*TbImageInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{4}
}
func (m *TbImageInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbImageInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbImageInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbImageInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbImageInfoList.Merge(m, src)
}
func (m *TbImageInfoList) XXX_Size() int {
	return m.Size()
}
func (m *TbImageInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_TbImageInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_TbImageInfoList proto.InternalMessageInfo

func (m *TbImageInfoList) GetTbImageInfos() []*TbImageInfo {
	if m != nil {
		return m.TbImageInfos
	}
	return nil
}

func init() {
	proto.RegisterType((*TbImageReq)(nil), "cbtumblebug.TbImageReq")
	proto.RegisterType((*RegisterImageWithIdWrapper)(nil), "cbtumblebug.RegisterImageWithIdWrapper")
	proto.RegisterType((*TbImageInfo)(nil), "cbtumblebug.TbImageInfo")
	proto.RegisterType((*RegisterImageWithInfoWrapper)(nil), "cbtumblebug.RegisterImageWithInfoWrapper")
	proto.RegisterType((*TbImageInfoList)(nil), "cbtumblebug.TbImageInfoList")
}

func init() { proto.RegisterFile("image.proto", fileDescriptor_9624c68e2b547544) }

var fileDescriptor_9624c68e2b547544 = []byte{
	// 795 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0x4f, 0x4f, 0xfb, 0x36,
	0x18, 0xc7, 0x9b, 0x42, 0xa1, 0x75, 0x4a, 0x19, 0x46, 0x8c, 0xac, 0xb0, 0x1a, 0x19, 0x4d, 0x30,
	0xb1, 0x15, 0x09, 0x2e, 0xd3, 0x0e, 0x9b, 0x86, 0x40, 0x55, 0x35, 0x60, 0x52, 0x86, 0x86, 0xb4,
	0x03, 0x55, 0xfe, 0xb8, 0x21, 0x22, 0x89, 0x4b, 0xec, 0x4c, 0xea, 0x3b, 0xd9, 0x7d, 0xb7, 0xdd,
	0x76, 0xda, 0x5b, 0xd8, 0x71, 0xaf, 0x20, 0x9a, 0xd8, 0x2d, 0x87, 0x1d, 0xfa, 0x0a, 0xa6, 0xd8,
	0x69, 0x93, 0x74, 0x2d, 0x48, 0x93, 0x7e, 0xb7, 0xdf, 0xad, 0xcf, 0xd7, 0xdf, 0xe7, 0xe3, 0xe7,
	0xf1, 0x63, 0x37, 0x40, 0x75, 0x7d, 0xc3, 0x21, 0xdd, 0x51, 0x48, 0x39, 0x85, 0xaa, 0x65, 0xf2,
	0xc8, 0x37, 0x3d, 0x62, 0x46, 0x4e, 0xfb, 0x73, 0xc7, 0xe5, 0x8f, 0x91, 0xd9, 0xb5, 0xa8, 0x7f,
	0xea, 0x50, 0x87, 0x9e, 0x0a, 0x8f, 0x19, 0x0d, 0x45, 0x24, 0x02, 0xf1, 0x4b, 0xe6, 0xb6, 0xf7,
	0x1c, 0x4a, 0x1d, 0x8f, 0xe4, 0x2e, 0xe2, 0x8f, 0xf8, 0x38, 0x5b, 0x6c, 0x5a, 0xd4, 0xf7, 0x69,
	0x20, 0x23, 0xfc, 0x4f, 0x15, 0x80, 0x3b, 0xb3, 0x9f, 0x6e, 0xac, 0x93, 0x67, 0x78, 0x02, 0x56,
	0x03, 0xc3, 0x27, 0x5a, 0xf5, 0x40, 0x39, 0x6e, 0x5c, 0xec, 0x26, 0x31, 0x12, 0xf1, 0x24, 0x46,
	0xea, 0xd8, 0xf0, 0xbd, 0x2f, 0x71, 0x1a, 0x61, 0x5d, 0x88, 0xf0, 0x0e, 0x6c, 0x5a, 0x34, 0x08,
	0x88, 0xc5, 0x5d, 0x1a, 0x0c, 0x44, 0xde, 0x8a, 0xc8, 0x3b, 0x49, 0x62, 0xd4, 0xca, 0x97, 0x6e,
	0x25, 0x61, 0x47, 0x12, 0xca, 0x3a, 0xd6, 0xe7, 0x8c, 0xf0, 0x0a, 0x34, 0x2d, 0x36, 0x1a, 0x88,
	0xb3, 0x18, 0xb8, 0xb6, 0xb6, 0x2a, 0x90, 0x87, 0x49, 0x8c, 0x80, 0xc5, 0x46, 0xa2, 0xd2, 0xbe,
	0x3d, 0x89, 0xd1, 0x56, 0x86, 0x9b, 0x69, 0x58, 0x2f, 0x18, 0xe0, 0x0d, 0x68, 0xe5, 0x18, 0x51,
	0x5b, 0x4d, 0x80, 0x8e, 0x92, 0x18, 0x35, 0xa7, 0xbe, 0xac, 0xb2, 0xed, 0x32, 0x4a, 0xd6, 0x55,
	0x32, 0xc1, 0x1e, 0x50, 0x6d, 0xc2, 0xac, 0xd0, 0x1d, 0xa5, 0x85, 0x6a, 0x6b, 0x82, 0xf5, 0x49,
	0x12, 0xa3, 0xa2, 0x3c, 0x89, 0x11, 0x94, 0xa8, 0x82, 0x88, 0xf5, 0xa2, 0x05, 0xff, 0xaa, 0x80,
	0xb6, 0x4e, 0x1c, 0x97, 0x71, 0x12, 0x0a, 0xfc, 0xbd, 0xcb, 0x1f, 0xfb, 0xf6, 0x7d, 0x68, 0x8c,
	0x46, 0x24, 0x84, 0x9f, 0x81, 0x5a, 0xc0, 0xd2, 0xb6, 0x95, 0xc2, 0x04, 0x98, 0x68, 0x78, 0x3a,
	0x01, 0x96, 0xb6, 0x2a, 0x44, 0xf8, 0x00, 0x9a, 0xdc, 0xcc, 0x7a, 0x0c, 0xc9, 0xb3, 0x18, 0x9b,
	0x7a, 0xb6, 0xdb, 0x2d, 0xdc, 0x9d, 0x6e, 0x3e, 0x5d, 0x79, 0x88, 0x7c, 0x16, 0xe7, 0x87, 0x98,
	0x6b, 0x58, 0x2f, 0x18, 0xf0, 0xef, 0x35, 0xa0, 0x66, 0xf9, 0xfd, 0x60, 0x48, 0xe1, 0x21, 0xa8,
	0xce, 0x4a, 0xdb, 0x4e, 0x62, 0x54, 0x75, 0xd3, 0xc2, 0x1a, 0x12, 0xe2, 0xda, 0x58, 0xaf, 0xba,
	0xf6, 0xfb, 0x3b, 0xf4, 0xae, 0xef, 0x10, 0xbc, 0x06, 0x1b, 0x56, 0x48, 0x0c, 0x71, 0x64, 0xb6,
	0xc1, 0x89, 0xb6, 0x5e, 0x28, 0x2b, 0x5b, 0xb8, 0x34, 0x78, 0xb1, 0xac, 0x82, 0x9a, 0x96, 0x55,
	0x08, 0xe1, 0x17, 0xa0, 0xee, 0x44, 0x84, 0xf1, 0x01, 0x65, 0x5a, 0x5d, 0x80, 0x3e, 0x4e, 0x62,
	0xb4, 0x2e, 0xb4, 0xef, 0xbe, 0x9f, 0xc4, 0xa8, 0x25, 0x19, 0x99, 0x80, 0xf5, 0xe9, 0x12, 0x3c,
	0x07, 0x6b, 0x8c, 0x1b, 0x3c, 0x62, 0x5a, 0x43, 0xe4, 0xed, 0x25, 0x31, 0xca, 0x94, 0x49, 0x8c,
	0x36, 0x64, 0x9a, 0x8c, 0xb1, 0x9e, 0x2d, 0x40, 0x1b, 0xb4, 0x9e, 0xc8, 0x78, 0xf0, 0x93, 0xe1,
	0x45, 0x64, 0xe0, 0xb9, 0x8c, 0x6b, 0xe0, 0x60, 0xe5, 0x58, 0x3d, 0xdb, 0x29, 0xdd, 0xda, 0x6f,
	0xc9, 0xf8, 0x87, 0xd4, 0x21, 0x9b, 0x7a, 0xca, 0xa2, 0x6b, 0x97, 0xf1, 0xbc, 0xa9, 0xa2, 0x8a,
	0xf5, 0x92, 0x09, 0xff, 0xa6, 0x80, 0xfd, 0xff, 0x3e, 0xb3, 0x60, 0x48, 0xff, 0xdf, 0x43, 0xb3,
	0xc0, 0xc6, 0xec, 0xa1, 0xb9, 0xc1, 0x90, 0x66, 0x2f, 0x4d, 0x5b, 0xf4, 0xd2, 0xd2, 0x5d, 0xe4,
	0x58, 0x79, 0x2e, 0xe4, 0x63, 0x2d, 0x88, 0x58, 0x2f, 0x5a, 0x30, 0x01, 0x9b, 0x05, 0x44, 0xda,
	0x06, 0xd4, 0x41, 0xab, 0xb4, 0x2f, 0xd3, 0x14, 0x71, 0x58, 0xcb, 0x37, 0xfe, 0x28, 0x89, 0x51,
	0x4d, 0x24, 0x4c, 0x62, 0xd4, 0xcc, 0x5e, 0x66, 0x1a, 0x62, 0x5d, 0xca, 0x67, 0xbf, 0xac, 0x82,
	0x9a, 0xf0, 0xc3, 0x1f, 0xc1, 0xf6, 0x82, 0xbf, 0x22, 0x78, 0x54, 0x82, 0x2f, 0xff, 0xb3, 0x6a,
	0x2f, 0xad, 0x02, 0x57, 0xe0, 0x03, 0xd8, 0x59, 0x78, 0xfe, 0xf0, 0xd3, 0x37, 0xe8, 0xf9, 0x8c,
	0x5e, 0xe5, 0xdf, 0x80, 0xe6, 0x25, 0xf1, 0xbe, 0xf1, 0x3c, 0x21, 0x32, 0x78, 0x58, 0xf2, 0xca,
	0x25, 0x9d, 0x30, 0x1a, 0x85, 0x16, 0x61, 0x53, 0xe0, 0x87, 0x5d, 0xf9, 0x65, 0xec, 0x4e, 0xbf,
	0x8c, 0xdd, 0xab, 0xf4, 0xcb, 0x88, 0x2b, 0xf0, 0x0a, 0xd4, 0x2f, 0x89, 0x64, 0x41, 0x34, 0x8f,
	0x9a, 0x72, 0xde, 0xc6, 0xf4, 0x40, 0xbd, 0x47, 0xf8, 0x22, 0x4c, 0x8f, 0xf0, 0x79, 0xcc, 0x6b,
	0xed, 0x7d, 0x05, 0x1a, 0xe9, 0x05, 0x90, 0xa4, 0xad, 0x92, 0xf1, 0x96, 0xf5, 0xed, 0xf6, 0xfe,
	0xb2, 0x5c, 0x71, 0xfb, 0x2b, 0xf0, 0x6b, 0xa0, 0xce, 0xf2, 0xfb, 0xf6, 0x22, 0xc2, 0xde, 0xdc,
	0x1c, 0x64, 0x6d, 0x7d, 0x5b, 0x02, 0x2e, 0x3e, 0xf8, 0xe3, 0xa5, 0xa3, 0xfc, 0xf9, 0xd2, 0x51,
	0xfe, 0x7a, 0xe9, 0x28, 0x3f, 0xff, 0xdd, 0xa9, 0x98, 0x6b, 0xa2, 0xdb, 0xf3, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x97, 0xc2, 0xf4, 0x50, 0xa7, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImageClient is the client API for Image service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageClient interface {
	RegisterImageWithId(ctx context.Context, in *RegisterImageWithIdWrapper, opts ...grpc.CallOption) (*TbImageInfo, error)
	RegisterImageWithInfo(ctx context.Context, in *RegisterImageWithInfoWrapper, opts ...grpc.CallOption) (*TbImageInfo, error)
	DelAllImages(ctx context.Context, in *DelAllResourcesWrapper, opts ...grpc.CallOption) (*types.Empty, error)
	DelImage(ctx context.Context, in *DelResourceWrapper, opts ...grpc.CallOption) (*types.Empty, error)
	GetImage(ctx context.Context, in *GetResourceWrapper, opts ...grpc.CallOption) (*TbImageInfo, error)
	ListImage(ctx context.Context, in *NsId, opts ...grpc.CallOption) (*TbImageInfoList, error)
	ListImageId(ctx context.Context, in *NsId, opts ...grpc.CallOption) (*ResourceIdList, error)
}

type imageClient struct {
	cc *grpc.ClientConn
}

func NewImageClient(cc *grpc.ClientConn) ImageClient {
	return &imageClient{cc}
}

func (c *imageClient) RegisterImageWithId(ctx context.Context, in *RegisterImageWithIdWrapper, opts ...grpc.CallOption) (*TbImageInfo, error) {
	out := new(TbImageInfo)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Image/RegisterImageWithId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) RegisterImageWithInfo(ctx context.Context, in *RegisterImageWithInfoWrapper, opts ...grpc.CallOption) (*TbImageInfo, error) {
	out := new(TbImageInfo)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Image/RegisterImageWithInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) DelAllImages(ctx context.Context, in *DelAllResourcesWrapper, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Image/DelAllImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) DelImage(ctx context.Context, in *DelResourceWrapper, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Image/DelImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) GetImage(ctx context.Context, in *GetResourceWrapper, opts ...grpc.CallOption) (*TbImageInfo, error) {
	out := new(TbImageInfo)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Image/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) ListImage(ctx context.Context, in *NsId, opts ...grpc.CallOption) (*TbImageInfoList, error) {
	out := new(TbImageInfoList)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Image/ListImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageClient) ListImageId(ctx context.Context, in *NsId, opts ...grpc.CallOption) (*ResourceIdList, error) {
	out := new(ResourceIdList)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Image/ListImageId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServer is the server API for Image service.
type ImageServer interface {
	RegisterImageWithId(context.Context, *RegisterImageWithIdWrapper) (*TbImageInfo, error)
	RegisterImageWithInfo(context.Context, *RegisterImageWithInfoWrapper) (*TbImageInfo, error)
	DelAllImages(context.Context, *DelAllResourcesWrapper) (*types.Empty, error)
	DelImage(context.Context, *DelResourceWrapper) (*types.Empty, error)
	GetImage(context.Context, *GetResourceWrapper) (*TbImageInfo, error)
	ListImage(context.Context, *NsId) (*TbImageInfoList, error)
	ListImageId(context.Context, *NsId) (*ResourceIdList, error)
}

// UnimplementedImageServer can be embedded to have forward compatible implementations.
type UnimplementedImageServer struct {
}

func (*UnimplementedImageServer) RegisterImageWithId(ctx context.Context, req *RegisterImageWithIdWrapper) (*TbImageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterImageWithId not implemented")
}
func (*UnimplementedImageServer) RegisterImageWithInfo(ctx context.Context, req *RegisterImageWithInfoWrapper) (*TbImageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterImageWithInfo not implemented")
}
func (*UnimplementedImageServer) DelAllImages(ctx context.Context, req *DelAllResourcesWrapper) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllImages not implemented")
}
func (*UnimplementedImageServer) DelImage(ctx context.Context, req *DelResourceWrapper) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelImage not implemented")
}
func (*UnimplementedImageServer) GetImage(ctx context.Context, req *GetResourceWrapper) (*TbImageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (*UnimplementedImageServer) ListImage(ctx context.Context, req *NsId) (*TbImageInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImage not implemented")
}
func (*UnimplementedImageServer) ListImageId(ctx context.Context, req *NsId) (*ResourceIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImageId not implemented")
}

func RegisterImageServer(s *grpc.Server, srv ImageServer) {
	s.RegisterService(&_Image_serviceDesc, srv)
}

func _Image_RegisterImageWithId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterImageWithIdWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).RegisterImageWithId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Image/RegisterImageWithId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).RegisterImageWithId(ctx, req.(*RegisterImageWithIdWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_RegisterImageWithInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterImageWithInfoWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).RegisterImageWithInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Image/RegisterImageWithInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).RegisterImageWithInfo(ctx, req.(*RegisterImageWithInfoWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_DelAllImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllResourcesWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).DelAllImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Image/DelAllImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).DelAllImages(ctx, req.(*DelAllResourcesWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_DelImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelResourceWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).DelImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Image/DelImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).DelImage(ctx, req.(*DelResourceWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Image/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).GetImage(ctx, req.(*GetResourceWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_ListImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).ListImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Image/ListImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).ListImage(ctx, req.(*NsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Image_ListImageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServer).ListImageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Image/ListImageId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServer).ListImageId(ctx, req.(*NsId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Image_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbtumblebug.Image",
	HandlerType: (*ImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterImageWithId",
			Handler:    _Image_RegisterImageWithId_Handler,
		},
		{
			MethodName: "RegisterImageWithInfo",
			Handler:    _Image_RegisterImageWithInfo_Handler,
		},
		{
			MethodName: "DelAllImages",
			Handler:    _Image_DelAllImages_Handler,
		},
		{
			MethodName: "DelImage",
			Handler:    _Image_DelImage_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _Image_GetImage_Handler,
		},
		{
			MethodName: "ListImage",
			Handler:    _Image_ListImage_Handler,
		},
		{
			MethodName: "ListImageId",
			Handler:    _Image_ListImageId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "image.proto",
}

func (m *TbImageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbImageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbImageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintImage(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CspImageName) > 0 {
		i -= len(m.CspImageName)
		copy(dAtA[i:], m.CspImageName)
		i = encodeVarintImage(dAtA, i, uint64(len(m.CspImageName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CspImageId) > 0 {
		i -= len(m.CspImageId)
		copy(dAtA[i:], m.CspImageId)
		i = encodeVarintImage(dAtA, i, uint64(len(m.CspImageId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintImage(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *RegisterImageWithIdWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterImageWithIdWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterImageWithIdWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TbImageReq != nil {
		{
			size, err := m.TbImageReq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintImage(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbImageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbImageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbImageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyValueList) > 0 {
		for iNdEx := len(m.KeyValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintImage(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.GuestOs) > 0 {
		i -= len(m.GuestOs)
		copy(dAtA[i:], m.GuestOs)
		i = encodeVarintImage(dAtA, i, uint64(len(m.GuestOs)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreationDate) > 0 {
		i -= len(m.CreationDate)
		copy(dAtA[i:], m.CreationDate)
		i = encodeVarintImage(dAtA, i, uint64(len(m.CreationDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintImage(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CspImageName) > 0 {
		i -= len(m.CspImageName)
		copy(dAtA[i:], m.CspImageName)
		i = encodeVarintImage(dAtA, i, uint64(len(m.CspImageName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CspImageId) > 0 {
		i -= len(m.CspImageId)
		copy(dAtA[i:], m.CspImageId)
		i = encodeVarintImage(dAtA, i, uint64(len(m.CspImageId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintImage(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintImage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterImageWithInfoWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterImageWithInfoWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterImageWithInfoWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TbImageInfo != nil {
		{
			size, err := m.TbImageInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintImage(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbImageInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbImageInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbImageInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TbImageInfos) > 0 {
		for iNdEx := len(m.TbImageInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TbImageInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintImage(dAtA []byte, offset int, v uint64) int {
	offset -= sovImage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TbImageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.CspImageId)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.CspImageName)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterImageWithIdWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	if m.TbImageReq != nil {
		l = m.TbImageReq.Size()
		n += 1 + l + sovImage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbImageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.CspImageId)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.CspImageName)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.CreationDate)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.GuestOs)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	if len(m.KeyValueList) > 0 {
		for _, e := range m.KeyValueList {
			l = e.Size()
			n += 1 + l + sovImage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterImageWithInfoWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	if m.TbImageInfo != nil {
		l = m.TbImageInfo.Size()
		n += 1 + l + sovImage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbImageInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TbImageInfos) > 0 {
		for _, e := range m.TbImageInfos {
			l = e.Size()
			n += 1 + l + sovImage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImage(x uint64) (n int) {
	return sovImage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TbImageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbImageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbImageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterImageWithIdWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterImageWithIdWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterImageWithIdWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TbImageReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TbImageReq == nil {
				m.TbImageReq = &TbImageReq{}
			}
			if err := m.TbImageReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbImageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbImageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbImageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestOs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuestOs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValueList = append(m.KeyValueList, &KeyValue{})
			if err := m.KeyValueList[len(m.KeyValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterImageWithInfoWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterImageWithInfoWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterImageWithInfoWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TbImageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TbImageInfo == nil {
				m.TbImageInfo = &TbImageInfo{}
			}
			if err := m.TbImageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbImageInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbImageInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbImageInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TbImageInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TbImageInfos = append(m.TbImageInfos, &TbImageInfo{})
			if err := m.TbImageInfos[len(m.TbImageInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthImage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImage = fmt.Errorf("proto: unexpected end of group")
)
