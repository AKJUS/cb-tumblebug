// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spec.proto

package cbtumblebug

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegisterSpecWithCspSpecNameWrapper struct {
	NsId string `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	//TbSpecReq tb_spec_req = 2 [json_name="tbSpecReq", (gogoproto.jsontag) = "tbSpecReq", (gogoproto.moretags) = "yaml:\"tbSpecReq\""];
	TbSpecInfo           *TbSpecInfo `protobuf:"bytes,2,opt,name=tb_spec_info,json=tbSpecInfo,proto3" json:"tbSpecInfo" yaml:"tbSpecInfo"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RegisterSpecWithCspSpecNameWrapper) Reset()         { *m = RegisterSpecWithCspSpecNameWrapper{} }
func (m *RegisterSpecWithCspSpecNameWrapper) String() string { return proto.CompactTextString(m) }
func (*RegisterSpecWithCspSpecNameWrapper) ProtoMessage()    {}
func (*RegisterSpecWithCspSpecNameWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{0}
}
func (m *RegisterSpecWithCspSpecNameWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterSpecWithCspSpecNameWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterSpecWithCspSpecNameWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterSpecWithCspSpecNameWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterSpecWithCspSpecNameWrapper.Merge(m, src)
}
func (m *RegisterSpecWithCspSpecNameWrapper) XXX_Size() int {
	return m.Size()
}
func (m *RegisterSpecWithCspSpecNameWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterSpecWithCspSpecNameWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterSpecWithCspSpecNameWrapper proto.InternalMessageInfo

func (m *RegisterSpecWithCspSpecNameWrapper) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *RegisterSpecWithCspSpecNameWrapper) GetTbSpecInfo() *TbSpecInfo {
	if m != nil {
		return m.TbSpecInfo
	}
	return nil
}

type TbSpecInfo struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" yaml:"name"`
	ConnectionName       string   `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connectionName" yaml:"connectionName"`
	CspSpecName          string   `protobuf:"bytes,4,opt,name=csp_spec_name,json=cspSpecName,proto3" json:"cspSpecName" yaml:"cspSpecName"`
	OsType               string   `protobuf:"bytes,5,opt,name=os_type,proto3" json:"os_type" yaml:"os_type"`
	NumVcpu              string   `protobuf:"bytes,6,opt,name=num_vcpu,json=num_vCPU,proto3" json:"num_vCPU" yaml:"num_vCPU"`
	NumCore              string   `protobuf:"bytes,7,opt,name=num_core,proto3" json:"num_core" yaml:"num_core"`
	MemGib               string   `protobuf:"bytes,8,opt,name=mem_gib,json=mem_GiB,proto3" json:"mem_GiB" yaml:"mem_GiB"`
	MemMib               string   `protobuf:"bytes,9,opt,name=mem_mib,json=mem_MiB,proto3" json:"mem_MiB" yaml:"mem_MiB"`
	StorageGib           string   `protobuf:"bytes,10,opt,name=storage_gib,json=storage_GiB,proto3" json:"storage_GiB" yaml:"storage_GiB"`
	Description          string   `protobuf:"bytes,11,opt,name=description,proto3" json:"description" yaml:"description"`
	CostPerHour          string   `protobuf:"bytes,12,opt,name=cost_per_hour,proto3" json:"cost_per_hour" yaml:"cost_per_hour"`
	NumStorage           string   `protobuf:"bytes,13,opt,name=num_storage,proto3" json:"num_storage" yaml:"num_storage"`
	MaxNumStorage        string   `protobuf:"bytes,14,opt,name=max_num_storage,proto3" json:"max_num_storage" yaml:"max_num_storage"`
	MaxTotalStorageTib   string   `protobuf:"bytes,15,opt,name=max_total_storage_tib,json=max_total_storage_TiB,proto3" json:"max_total_storage_TiB" yaml:"max_total_storage_TiB"`
	NetBwGbps            string   `protobuf:"bytes,16,opt,name=net_bw_gbps,json=net_bw_Gbps,proto3" json:"net_bw_Gbps" yaml:"net_bw_Gbps"`
	EbsBw_Mbps           string   `protobuf:"bytes,17,opt,name=ebs_bw_Mbps,proto3" json:"ebs_bw_Mbps" yaml:"ebs_bw_Mbps"`
	GpuModel             string   `protobuf:"bytes,18,opt,name=gpu_model,proto3" json:"gpu_model" yaml:"gpu_model"`
	NumGpu               string   `protobuf:"bytes,19,opt,name=num_gpu,proto3" json:"num_gpu" yaml:"num_gpu"`
	GpumemGib            string   `protobuf:"bytes,20,opt,name=gpumem_gib,json=gpumem_GiB,proto3" json:"gpumem_GiB" yaml:"gpumem_GiB"`
	GpuP2P               string   `protobuf:"bytes,21,opt,name=gpu_p2p,proto3" json:"gpu_p2p" yaml:"gpu_p2p"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TbSpecInfo) Reset()         { *m = TbSpecInfo{} }
func (m *TbSpecInfo) String() string { return proto.CompactTextString(m) }
func (*TbSpecInfo) ProtoMessage()    {}
func (*TbSpecInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{1}
}
func (m *TbSpecInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSpecInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSpecInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSpecInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSpecInfo.Merge(m, src)
}
func (m *TbSpecInfo) XXX_Size() int {
	return m.Size()
}
func (m *TbSpecInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSpecInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TbSpecInfo proto.InternalMessageInfo

func (m *TbSpecInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TbSpecInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TbSpecInfo) GetConnectionName() string {
	if m != nil {
		return m.ConnectionName
	}
	return ""
}

func (m *TbSpecInfo) GetCspSpecName() string {
	if m != nil {
		return m.CspSpecName
	}
	return ""
}

func (m *TbSpecInfo) GetOsType() string {
	if m != nil {
		return m.OsType
	}
	return ""
}

func (m *TbSpecInfo) GetNumVcpu() string {
	if m != nil {
		return m.NumVcpu
	}
	return ""
}

func (m *TbSpecInfo) GetNumCore() string {
	if m != nil {
		return m.NumCore
	}
	return ""
}

func (m *TbSpecInfo) GetMemGib() string {
	if m != nil {
		return m.MemGib
	}
	return ""
}

func (m *TbSpecInfo) GetMemMib() string {
	if m != nil {
		return m.MemMib
	}
	return ""
}

func (m *TbSpecInfo) GetStorageGib() string {
	if m != nil {
		return m.StorageGib
	}
	return ""
}

func (m *TbSpecInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TbSpecInfo) GetCostPerHour() string {
	if m != nil {
		return m.CostPerHour
	}
	return ""
}

func (m *TbSpecInfo) GetNumStorage() string {
	if m != nil {
		return m.NumStorage
	}
	return ""
}

func (m *TbSpecInfo) GetMaxNumStorage() string {
	if m != nil {
		return m.MaxNumStorage
	}
	return ""
}

func (m *TbSpecInfo) GetMaxTotalStorageTib() string {
	if m != nil {
		return m.MaxTotalStorageTib
	}
	return ""
}

func (m *TbSpecInfo) GetNetBwGbps() string {
	if m != nil {
		return m.NetBwGbps
	}
	return ""
}

func (m *TbSpecInfo) GetEbsBw_Mbps() string {
	if m != nil {
		return m.EbsBw_Mbps
	}
	return ""
}

func (m *TbSpecInfo) GetGpuModel() string {
	if m != nil {
		return m.GpuModel
	}
	return ""
}

func (m *TbSpecInfo) GetNumGpu() string {
	if m != nil {
		return m.NumGpu
	}
	return ""
}

func (m *TbSpecInfo) GetGpumemGib() string {
	if m != nil {
		return m.GpumemGib
	}
	return ""
}

func (m *TbSpecInfo) GetGpuP2P() string {
	if m != nil {
		return m.GpuP2P
	}
	return ""
}

type RegisterSpecWithInfoWrapper struct {
	NsId                 string      `protobuf:"bytes,1,opt,name=ns_id,json=nsId,proto3" json:"nsId" yaml:"nsId"`
	TbSpecInfo           *TbSpecInfo `protobuf:"bytes,2,opt,name=tb_spec_info,json=tbSpecInfo,proto3" json:"tbSpecInfo" yaml:"tbSpecInfo"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RegisterSpecWithInfoWrapper) Reset()         { *m = RegisterSpecWithInfoWrapper{} }
func (m *RegisterSpecWithInfoWrapper) String() string { return proto.CompactTextString(m) }
func (*RegisterSpecWithInfoWrapper) ProtoMessage()    {}
func (*RegisterSpecWithInfoWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{2}
}
func (m *RegisterSpecWithInfoWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterSpecWithInfoWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterSpecWithInfoWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterSpecWithInfoWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterSpecWithInfoWrapper.Merge(m, src)
}
func (m *RegisterSpecWithInfoWrapper) XXX_Size() int {
	return m.Size()
}
func (m *RegisterSpecWithInfoWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterSpecWithInfoWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterSpecWithInfoWrapper proto.InternalMessageInfo

func (m *RegisterSpecWithInfoWrapper) GetNsId() string {
	if m != nil {
		return m.NsId
	}
	return ""
}

func (m *RegisterSpecWithInfoWrapper) GetTbSpecInfo() *TbSpecInfo {
	if m != nil {
		return m.TbSpecInfo
	}
	return nil
}

type TbSpecInfoList struct {
	TbSpecInfos          []*TbSpecInfo `protobuf:"bytes,1,rep,name=tb_spec_infos,json=spec,proto3" json:"spec" yaml:"spec"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TbSpecInfoList) Reset()         { *m = TbSpecInfoList{} }
func (m *TbSpecInfoList) String() string { return proto.CompactTextString(m) }
func (*TbSpecInfoList) ProtoMessage()    {}
func (*TbSpecInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_423806180556987f, []int{3}
}
func (m *TbSpecInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TbSpecInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TbSpecInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TbSpecInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TbSpecInfoList.Merge(m, src)
}
func (m *TbSpecInfoList) XXX_Size() int {
	return m.Size()
}
func (m *TbSpecInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_TbSpecInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_TbSpecInfoList proto.InternalMessageInfo

func (m *TbSpecInfoList) GetTbSpecInfos() []*TbSpecInfo {
	if m != nil {
		return m.TbSpecInfos
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterSpecWithCspSpecNameWrapper)(nil), "cbtumblebug.RegisterSpecWithCspSpecNameWrapper")
	proto.RegisterType((*TbSpecInfo)(nil), "cbtumblebug.TbSpecInfo")
	proto.RegisterType((*RegisterSpecWithInfoWrapper)(nil), "cbtumblebug.RegisterSpecWithInfoWrapper")
	proto.RegisterType((*TbSpecInfoList)(nil), "cbtumblebug.TbSpecInfoList")
}

func init() { proto.RegisterFile("spec.proto", fileDescriptor_423806180556987f) }

var fileDescriptor_423806180556987f = []byte{
	// 976 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xdd, 0x6e, 0xe4, 0x34,
	0x14, 0xc7, 0x3b, 0xdd, 0xee, 0xb6, 0xf5, 0xf4, 0xd3, 0xdb, 0xee, 0x46, 0x2d, 0xd4, 0xc5, 0x15,
	0x52, 0xd1, 0xb2, 0x53, 0xa9, 0x5c, 0x20, 0x3e, 0x04, 0xa2, 0xed, 0x6a, 0x34, 0xd2, 0x4e, 0x41,
	0xa6, 0xa8, 0x17, 0x48, 0x44, 0x49, 0xc6, 0x4d, 0x23, 0x4d, 0x62, 0x2b, 0x76, 0x80, 0xbe, 0x09,
	0x0f, 0x80, 0xc4, 0x05, 0x77, 0x3c, 0x05, 0x97, 0x3c, 0x81, 0x85, 0xca, 0x5d, 0x2e, 0xe7, 0x09,
	0x90, 0x9d, 0x64, 0xec, 0xcc, 0x76, 0xdb, 0xdb, 0xbd, 0x8b, 0x7f, 0xe7, 0xfc, 0xff, 0xe7, 0xf8,
	0x24, 0x4e, 0x02, 0x80, 0xe0, 0x34, 0xea, 0xf1, 0x9c, 0x49, 0x06, 0xbb, 0x51, 0x28, 0x8b, 0x34,
	0x1c, 0xd3, 0xb0, 0x88, 0x77, 0x5e, 0xc6, 0x89, 0xbc, 0x2e, 0xc2, 0x5e, 0xc4, 0xd2, 0xa3, 0x98,
	0xc5, 0xec, 0xc8, 0xe4, 0x84, 0xc5, 0x95, 0x59, 0x99, 0x85, 0xb9, 0xaa, 0xb4, 0x3b, 0xbb, 0x31,
	0x63, 0xf1, 0x98, 0xda, 0x2c, 0x9a, 0x72, 0x79, 0x53, 0x07, 0x57, 0x22, 0x96, 0xa6, 0x2c, 0xab,
	0x56, 0xf8, 0xaf, 0x0e, 0xc0, 0x84, 0xc6, 0x89, 0x90, 0x34, 0xff, 0x9e, 0xd3, 0xe8, 0x32, 0x91,
	0xd7, 0xa7, 0x82, 0xeb, 0xcb, 0xf3, 0x20, 0xa5, 0x97, 0x79, 0xc0, 0x39, 0xcd, 0xe1, 0xc7, 0xe0,
	0x71, 0x26, 0xfc, 0x64, 0xe4, 0x75, 0xf6, 0x3b, 0x87, 0xcb, 0x27, 0xcf, 0x4b, 0x85, 0x16, 0x32,
	0x31, 0x18, 0x4d, 0x14, 0xea, 0xde, 0x04, 0xe9, 0xf8, 0x73, 0xac, 0x57, 0x98, 0x18, 0x08, 0x7f,
	0x02, 0x2b, 0x32, 0xf4, 0xf5, 0x66, 0xfc, 0x24, 0xbb, 0x62, 0xde, 0xfc, 0x7e, 0xe7, 0xb0, 0x7b,
	0xfc, 0xbc, 0xe7, 0x6c, 0xa9, 0x77, 0x11, 0xea, 0x1a, 0x83, 0xec, 0x8a, 0x9d, 0x1c, 0x94, 0x0a,
	0x01, 0x39, 0x5d, 0x4f, 0x14, 0xda, 0xac, 0x3c, 0x2d, 0xc3, 0xc4, 0x49, 0xc0, 0xbf, 0x77, 0x01,
	0xb0, 0x7a, 0x78, 0x00, 0xe6, 0xa7, 0x9d, 0x3d, 0x2d, 0x15, 0x9a, 0x4f, 0x74, 0x5f, 0xcb, 0x95,
	0x47, 0x32, 0xc2, 0x64, 0x3e, 0x19, 0xc1, 0x17, 0x60, 0x21, 0x0b, 0x52, 0x6a, 0x7a, 0x69, 0x36,
	0x10, 0xa4, 0xd4, 0xd9, 0x40, 0x90, 0x52, 0xbd, 0x81, 0x20, 0xa5, 0xf0, 0x02, 0xac, 0x47, 0x2c,
	0xcb, 0x68, 0x24, 0x13, 0x96, 0xf9, 0x46, 0xf7, 0xc8, 0xe8, 0x5e, 0x94, 0x0a, 0xad, 0xd9, 0xd0,
	0x79, 0xe5, 0xb0, 0x5d, 0x39, 0xb4, 0x39, 0x26, 0x33, 0x89, 0x70, 0x00, 0x56, 0x23, 0xc1, 0xab,
	0xb9, 0x18, 0xcf, 0x05, 0xe3, 0xf9, 0x61, 0xa9, 0x50, 0x37, 0xb2, 0x33, 0x9f, 0x28, 0x04, 0x6b,
	0x43, 0x0b, 0x31, 0x71, 0x53, 0xe0, 0xa7, 0x60, 0x91, 0x09, 0x5f, 0xde, 0x70, 0xea, 0x3d, 0x36,
	0x26, 0xef, 0x97, 0x0a, 0x35, 0x68, 0xa2, 0xd0, 0x5a, 0x65, 0x50, 0x03, 0x4c, 0x9a, 0x10, 0xfc,
	0x02, 0x2c, 0x65, 0x45, 0xea, 0xff, 0x1c, 0xf1, 0xc2, 0x7b, 0x62, 0x94, 0xa8, 0x54, 0xa8, 0x62,
	0xa7, 0xdf, 0xfd, 0x30, 0x51, 0x68, 0xbd, 0x1e, 0x47, 0x4d, 0x30, 0x99, 0x06, 0x1b, 0x71, 0xc4,
	0x72, 0xea, 0x2d, 0xb6, 0xc5, 0x9a, 0xb5, 0xc5, 0x9a, 0xd4, 0x62, 0x7d, 0xa9, 0x5b, 0x4e, 0x69,
	0xea, 0xc7, 0x49, 0xe8, 0x2d, 0xd9, 0x96, 0x35, 0xea, 0x27, 0x27, 0xb6, 0xe5, 0x1a, 0x60, 0xd2,
	0x84, 0x1a, 0x61, 0x9a, 0x84, 0xde, 0x72, 0x5b, 0x38, 0x9c, 0x15, 0x0e, 0xa7, 0xc2, 0x61, 0x72,
	0x02, 0xfb, 0xa0, 0x2b, 0x24, 0xcb, 0x83, 0x98, 0x9a, 0xaa, 0xc0, 0x4e, 0xbb, 0xc1, 0x55, 0xe5,
	0x7a, 0xda, 0x0e, 0xc4, 0xc4, 0x4d, 0xd1, 0x46, 0x23, 0x2a, 0xa2, 0x3c, 0xe1, 0xfa, 0x5e, 0x7a,
	0x5d, 0x6b, 0xe4, 0x60, 0x6b, 0xe4, 0x40, 0x4c, 0xdc, 0x14, 0xf8, 0x2d, 0x58, 0x8d, 0x98, 0x90,
	0x3e, 0xa7, 0xb9, 0x7f, 0xcd, 0x8a, 0xdc, 0x5b, 0x31, 0x56, 0x1f, 0x95, 0x0a, 0xb5, 0x03, 0x13,
	0x85, 0xb6, 0x9a, 0x87, 0xca, 0xc1, 0x98, 0xb4, 0xd3, 0x74, 0x67, 0x7a, 0xc0, 0x75, 0xb3, 0xde,
	0xaa, 0xed, 0xcc, 0xc1, 0xb6, 0x33, 0x07, 0x62, 0xe2, 0xa6, 0xc0, 0x4b, 0xb0, 0x9e, 0x06, 0xbf,
	0xfa, 0xae, 0xd9, 0x9a, 0x31, 0x7b, 0x59, 0x2a, 0x34, 0x1b, 0x9a, 0x28, 0xf4, 0xac, 0x1e, 0x7a,
	0x3b, 0x80, 0xc9, 0x6c, 0x2a, 0x64, 0x60, 0x5b, 0x23, 0xc9, 0x64, 0x30, 0x6e, 0xa0, 0x2f, 0x93,
	0xd0, 0x5b, 0x37, 0xf6, 0x9f, 0x95, 0x0a, 0xdd, 0x91, 0x70, 0x61, 0x6e, 0xcc, 0x7b, 0xb6, 0xc8,
	0x1b, 0x61, 0x4c, 0xee, 0x96, 0x99, 0x91, 0x50, 0xe9, 0x87, 0xbf, 0xf8, 0x71, 0xc8, 0x85, 0xb7,
	0xe1, 0x8c, 0xa4, 0xc2, 0xfd, 0x90, 0x0b, 0x67, 0x24, 0x16, 0xea, 0x91, 0xd8, 0x95, 0x36, 0xa2,
	0xa1, 0xd0, 0xcb, 0xa1, 0x36, 0xda, 0xb4, 0x46, 0x0e, 0xb6, 0x46, 0x0e, 0xc4, 0xc4, 0x4d, 0x81,
	0x5f, 0x83, 0xe5, 0x98, 0x17, 0x7e, 0xca, 0x46, 0x74, 0xec, 0x41, 0x63, 0xf3, 0x41, 0xa9, 0x90,
	0x85, 0x13, 0x85, 0x36, 0x2a, 0x93, 0x29, 0xc2, 0xc4, 0x86, 0xf5, 0x09, 0xd0, 0x23, 0x8d, 0x79,
	0xe1, 0x3d, 0xb5, 0x27, 0xa0, 0x46, 0xf6, 0x04, 0xd4, 0x00, 0x93, 0x26, 0x04, 0x4f, 0x01, 0x88,
	0x79, 0xd1, 0x1c, 0xbb, 0x2d, 0xa3, 0x35, 0x6f, 0xdb, 0x9a, 0x56, 0xcf, 0xff, 0xe6, 0xb4, 0xf6,
	0xf4, 0xf0, 0x39, 0x09, 0xba, 0xba, 0x6e, 0x85, 0x1f, 0x73, 0x6f, 0xdb, 0x56, 0xaf, 0x91, 0xad,
	0x5e, 0x03, 0x4c, 0x9a, 0x10, 0xfe, 0xb3, 0x03, 0x76, 0x67, 0xbf, 0x2d, 0xfa, 0x85, 0xfd, 0x6e,
	0x7e, 0x54, 0x7c, 0xb0, 0x66, 0xe5, 0xaf, 0x13, 0x21, 0xe1, 0x10, 0xac, 0xba, 0x15, 0x85, 0xd7,
	0xd9, 0x7f, 0x74, 0x5f, 0x49, 0xb3, 0x01, 0x9d, 0x6e, 0x37, 0xa0, 0x57, 0x98, 0x18, 0x78, 0xfc,
	0xc7, 0x02, 0x58, 0xd0, 0xb9, 0x30, 0x79, 0x73, 0x2c, 0xce, 0x27, 0x17, 0x1e, 0xb5, 0xfc, 0x1f,
	0xfe, 0x38, 0xef, 0xbc, 0xad, 0x21, 0x3c, 0x07, 0x7f, 0x04, 0x5b, 0x77, 0xdd, 0x01, 0x78, 0x78,
	0x6f, 0x0d, 0xe7, 0x26, 0xdd, 0x67, 0xfe, 0x1a, 0x74, 0xcf, 0xe8, 0xf8, 0x9b, 0xf1, 0x58, 0x33,
	0x01, 0x0f, 0x5a, 0x99, 0x55, 0x84, 0x50, 0xc1, 0x8a, 0x3c, 0xa2, 0xa2, 0xb1, 0x7b, 0xd6, 0xab,
	0xfe, 0x4d, 0x7a, 0xcd, 0xbf, 0x49, 0xef, 0x95, 0xfe, 0x37, 0xc1, 0x73, 0xf0, 0x0c, 0x2c, 0x9e,
	0x51, 0x63, 0x05, 0xd1, 0xac, 0x53, 0x63, 0xf3, 0xb0, 0xcb, 0x2b, 0xb0, 0xd8, 0xa7, 0xf2, 0x0e,
	0x97, 0x3e, 0x95, 0xb3, 0x2e, 0xf7, 0x6c, 0xed, 0x4b, 0xb0, 0xa4, 0x1f, 0x01, 0xe3, 0xb3, 0xd9,
	0x4a, 0x3b, 0x17, 0x83, 0xd1, 0xce, 0xee, 0x5b, 0x94, 0x5a, 0x83, 0xe7, 0xe0, 0x57, 0x00, 0x34,
	0xea, 0xc1, 0xe8, 0x61, 0x7d, 0xd3, 0xd7, 0x60, 0x54, 0xe9, 0x4f, 0x36, 0xfe, 0xbe, 0xdd, 0xeb,
	0xfc, 0x73, 0xbb, 0xd7, 0xf9, 0xf7, 0x76, 0xaf, 0xf3, 0xdb, 0x7f, 0x7b, 0x73, 0xe1, 0x13, 0xb3,
	0xd1, 0x4f, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x8c, 0xcf, 0x12, 0x22, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpecClient is the client API for Spec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpecClient interface {
	RegisterSpecWithCspSpecName(ctx context.Context, in *RegisterSpecWithCspSpecNameWrapper, opts ...grpc.CallOption) (*TbSpecInfo, error)
	RegisterSpecWithInfo(ctx context.Context, in *RegisterSpecWithInfoWrapper, opts ...grpc.CallOption) (*TbSpecInfo, error)
	DelAllSpecs(ctx context.Context, in *DelAllResourcesWrapper, opts ...grpc.CallOption) (*types.Empty, error)
	DelSpec(ctx context.Context, in *DelResourceWrapper, opts ...grpc.CallOption) (*types.Empty, error)
	GetSpec(ctx context.Context, in *GetResourceWrapper, opts ...grpc.CallOption) (*TbSpecInfo, error)
	ListSpec(ctx context.Context, in *NsId, opts ...grpc.CallOption) (*TbSpecInfoList, error)
	ListSpecId(ctx context.Context, in *NsId, opts ...grpc.CallOption) (*ResourceIdList, error)
}

type specClient struct {
	cc *grpc.ClientConn
}

func NewSpecClient(cc *grpc.ClientConn) SpecClient {
	return &specClient{cc}
}

func (c *specClient) RegisterSpecWithCspSpecName(ctx context.Context, in *RegisterSpecWithCspSpecNameWrapper, opts ...grpc.CallOption) (*TbSpecInfo, error) {
	out := new(TbSpecInfo)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Spec/RegisterSpecWithCspSpecName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) RegisterSpecWithInfo(ctx context.Context, in *RegisterSpecWithInfoWrapper, opts ...grpc.CallOption) (*TbSpecInfo, error) {
	out := new(TbSpecInfo)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Spec/RegisterSpecWithInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) DelAllSpecs(ctx context.Context, in *DelAllResourcesWrapper, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Spec/DelAllSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) DelSpec(ctx context.Context, in *DelResourceWrapper, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Spec/DelSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) GetSpec(ctx context.Context, in *GetResourceWrapper, opts ...grpc.CallOption) (*TbSpecInfo, error) {
	out := new(TbSpecInfo)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Spec/GetSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) ListSpec(ctx context.Context, in *NsId, opts ...grpc.CallOption) (*TbSpecInfoList, error) {
	out := new(TbSpecInfoList)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Spec/ListSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) ListSpecId(ctx context.Context, in *NsId, opts ...grpc.CallOption) (*ResourceIdList, error) {
	out := new(ResourceIdList)
	err := c.cc.Invoke(ctx, "/cbtumblebug.Spec/ListSpecId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpecServer is the server API for Spec service.
type SpecServer interface {
	RegisterSpecWithCspSpecName(context.Context, *RegisterSpecWithCspSpecNameWrapper) (*TbSpecInfo, error)
	RegisterSpecWithInfo(context.Context, *RegisterSpecWithInfoWrapper) (*TbSpecInfo, error)
	DelAllSpecs(context.Context, *DelAllResourcesWrapper) (*types.Empty, error)
	DelSpec(context.Context, *DelResourceWrapper) (*types.Empty, error)
	GetSpec(context.Context, *GetResourceWrapper) (*TbSpecInfo, error)
	ListSpec(context.Context, *NsId) (*TbSpecInfoList, error)
	ListSpecId(context.Context, *NsId) (*ResourceIdList, error)
}

// UnimplementedSpecServer can be embedded to have forward compatible implementations.
type UnimplementedSpecServer struct {
}

func (*UnimplementedSpecServer) RegisterSpecWithCspSpecName(ctx context.Context, req *RegisterSpecWithCspSpecNameWrapper) (*TbSpecInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSpecWithCspSpecName not implemented")
}
func (*UnimplementedSpecServer) RegisterSpecWithInfo(ctx context.Context, req *RegisterSpecWithInfoWrapper) (*TbSpecInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSpecWithInfo not implemented")
}
func (*UnimplementedSpecServer) DelAllSpecs(ctx context.Context, req *DelAllResourcesWrapper) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllSpecs not implemented")
}
func (*UnimplementedSpecServer) DelSpec(ctx context.Context, req *DelResourceWrapper) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSpec not implemented")
}
func (*UnimplementedSpecServer) GetSpec(ctx context.Context, req *GetResourceWrapper) (*TbSpecInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpec not implemented")
}
func (*UnimplementedSpecServer) ListSpec(ctx context.Context, req *NsId) (*TbSpecInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpec not implemented")
}
func (*UnimplementedSpecServer) ListSpecId(ctx context.Context, req *NsId) (*ResourceIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpecId not implemented")
}

func RegisterSpecServer(s *grpc.Server, srv SpecServer) {
	s.RegisterService(&_Spec_serviceDesc, srv)
}

func _Spec_RegisterSpecWithCspSpecName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSpecWithCspSpecNameWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).RegisterSpecWithCspSpecName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Spec/RegisterSpecWithCspSpecName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).RegisterSpecWithCspSpecName(ctx, req.(*RegisterSpecWithCspSpecNameWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_RegisterSpecWithInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSpecWithInfoWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).RegisterSpecWithInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Spec/RegisterSpecWithInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).RegisterSpecWithInfo(ctx, req.(*RegisterSpecWithInfoWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_DelAllSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllResourcesWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).DelAllSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Spec/DelAllSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).DelAllSpecs(ctx, req.(*DelAllResourcesWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_DelSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelResourceWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).DelSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Spec/DelSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).DelSpec(ctx, req.(*DelResourceWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_GetSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).GetSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Spec/GetSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).GetSpec(ctx, req.(*GetResourceWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_ListSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).ListSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Spec/ListSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).ListSpec(ctx, req.(*NsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_ListSpecId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).ListSpecId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbtumblebug.Spec/ListSpecId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).ListSpecId(ctx, req.(*NsId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Spec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbtumblebug.Spec",
	HandlerType: (*SpecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSpecWithCspSpecName",
			Handler:    _Spec_RegisterSpecWithCspSpecName_Handler,
		},
		{
			MethodName: "RegisterSpecWithInfo",
			Handler:    _Spec_RegisterSpecWithInfo_Handler,
		},
		{
			MethodName: "DelAllSpecs",
			Handler:    _Spec_DelAllSpecs_Handler,
		},
		{
			MethodName: "DelSpec",
			Handler:    _Spec_DelSpec_Handler,
		},
		{
			MethodName: "GetSpec",
			Handler:    _Spec_GetSpec_Handler,
		},
		{
			MethodName: "ListSpec",
			Handler:    _Spec_ListSpec_Handler,
		},
		{
			MethodName: "ListSpecId",
			Handler:    _Spec_ListSpecId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}

func (m *RegisterSpecWithCspSpecNameWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterSpecWithCspSpecNameWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterSpecWithCspSpecNameWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TbSpecInfo != nil {
		{
			size, err := m.TbSpecInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSpecInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSpecInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSpecInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GpuP2P) > 0 {
		i -= len(m.GpuP2P)
		copy(dAtA[i:], m.GpuP2P)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.GpuP2P)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.GpumemGib) > 0 {
		i -= len(m.GpumemGib)
		copy(dAtA[i:], m.GpumemGib)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.GpumemGib)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.NumGpu) > 0 {
		i -= len(m.NumGpu)
		copy(dAtA[i:], m.NumGpu)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.NumGpu)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.GpuModel) > 0 {
		i -= len(m.GpuModel)
		copy(dAtA[i:], m.GpuModel)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.GpuModel)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.EbsBw_Mbps) > 0 {
		i -= len(m.EbsBw_Mbps)
		copy(dAtA[i:], m.EbsBw_Mbps)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.EbsBw_Mbps)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.NetBwGbps) > 0 {
		i -= len(m.NetBwGbps)
		copy(dAtA[i:], m.NetBwGbps)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.NetBwGbps)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.MaxTotalStorageTib) > 0 {
		i -= len(m.MaxTotalStorageTib)
		copy(dAtA[i:], m.MaxTotalStorageTib)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.MaxTotalStorageTib)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.MaxNumStorage) > 0 {
		i -= len(m.MaxNumStorage)
		copy(dAtA[i:], m.MaxNumStorage)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.MaxNumStorage)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.NumStorage) > 0 {
		i -= len(m.NumStorage)
		copy(dAtA[i:], m.NumStorage)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.NumStorage)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CostPerHour) > 0 {
		i -= len(m.CostPerHour)
		copy(dAtA[i:], m.CostPerHour)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.CostPerHour)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.StorageGib) > 0 {
		i -= len(m.StorageGib)
		copy(dAtA[i:], m.StorageGib)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.StorageGib)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.MemMib) > 0 {
		i -= len(m.MemMib)
		copy(dAtA[i:], m.MemMib)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.MemMib)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MemGib) > 0 {
		i -= len(m.MemGib)
		copy(dAtA[i:], m.MemGib)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.MemGib)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.NumCore) > 0 {
		i -= len(m.NumCore)
		copy(dAtA[i:], m.NumCore)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.NumCore)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NumVcpu) > 0 {
		i -= len(m.NumVcpu)
		copy(dAtA[i:], m.NumVcpu)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.NumVcpu)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OsType) > 0 {
		i -= len(m.OsType)
		copy(dAtA[i:], m.OsType)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.OsType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CspSpecName) > 0 {
		i -= len(m.CspSpecName)
		copy(dAtA[i:], m.CspSpecName)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.CspSpecName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionName) > 0 {
		i -= len(m.ConnectionName)
		copy(dAtA[i:], m.ConnectionName)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.ConnectionName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterSpecWithInfoWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterSpecWithInfoWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterSpecWithInfoWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TbSpecInfo != nil {
		{
			size, err := m.TbSpecInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NsId) > 0 {
		i -= len(m.NsId)
		copy(dAtA[i:], m.NsId)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.NsId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TbSpecInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TbSpecInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TbSpecInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TbSpecInfos) > 0 {
		for iNdEx := len(m.TbSpecInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TbSpecInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpec(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterSpecWithCspSpecNameWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.TbSpecInfo != nil {
		l = m.TbSpecInfo.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSpecInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.ConnectionName)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.CspSpecName)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.OsType)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.NumVcpu)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.NumCore)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.MemGib)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.MemMib)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.StorageGib)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.CostPerHour)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.NumStorage)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.MaxNumStorage)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.MaxTotalStorageTib)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.NetBwGbps)
	if l > 0 {
		n += 2 + l + sovSpec(uint64(l))
	}
	l = len(m.EbsBw_Mbps)
	if l > 0 {
		n += 2 + l + sovSpec(uint64(l))
	}
	l = len(m.GpuModel)
	if l > 0 {
		n += 2 + l + sovSpec(uint64(l))
	}
	l = len(m.NumGpu)
	if l > 0 {
		n += 2 + l + sovSpec(uint64(l))
	}
	l = len(m.GpumemGib)
	if l > 0 {
		n += 2 + l + sovSpec(uint64(l))
	}
	l = len(m.GpuP2P)
	if l > 0 {
		n += 2 + l + sovSpec(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterSpecWithInfoWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NsId)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.TbSpecInfo != nil {
		l = m.TbSpecInfo.Size()
		n += 1 + l + sovSpec(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TbSpecInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TbSpecInfos) > 0 {
		for _, e := range m.TbSpecInfos {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSpec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpec(x uint64) (n int) {
	return sovSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterSpecWithCspSpecNameWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterSpecWithCspSpecNameWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterSpecWithCspSpecNameWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TbSpecInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TbSpecInfo == nil {
				m.TbSpecInfo = &TbSpecInfo{}
			}
			if err := m.TbSpecInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSpecInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSpecInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSpecInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspSpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CspSpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumVcpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumVcpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumCore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumCore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemGib", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemGib = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemMib", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemMib = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageGib", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageGib = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostPerHour", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CostPerHour = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumStorage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumStorage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumStorage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxNumStorage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTotalStorageTib", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxTotalStorageTib = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetBwGbps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetBwGbps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EbsBw_Mbps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EbsBw_Mbps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GpuModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumGpu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumGpu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpumemGib", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GpumemGib = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GpuP2P", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GpuP2P = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterSpecWithInfoWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterSpecWithInfoWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterSpecWithInfoWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TbSpecInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TbSpecInfo == nil {
				m.TbSpecInfo = &TbSpecInfo{}
			}
			if err := m.TbSpecInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TbSpecInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TbSpecInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TbSpecInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TbSpecInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TbSpecInfos = append(m.TbSpecInfos, &TbSpecInfo{})
			if err := m.TbSpecInfos[len(m.TbSpecInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpec = fmt.Errorf("proto: unexpected end of group")
)
