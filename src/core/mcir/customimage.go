/*
Copyright 2019 The Cloud-Barista Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Package mcir is to manage multi-cloud infra resource
package mcir

import (
	"encoding/json"
	"fmt"
	"net/url"
	"time"

	"github.com/cloud-barista/cb-tumblebug/src/core/common"
	validator "github.com/go-playground/validator/v10"
	"github.com/go-resty/resty/v2"
	"github.com/rs/zerolog/log"
)

type CustomImageStatus string

const (
	MyImageAvailable   CustomImageStatus = "Available"
	MyImageUnavailable CustomImageStatus = "Unavailable"
)

type SpiderMyImageReq struct {
	ConnectionName string
	ReqInfo        struct {
		Name     string
		SourceVM string
	}
}

type SpiderMyImageInfo struct {
	IId common.IID // {NameId, SystemId}

	SourceVM common.IID

	Status CustomImageStatus // Available | Deleting

	CreatedTime  time.Time
	KeyValueList []common.KeyValue
}

type SpiderMyImageRegisterReq struct {
	ConnectionName string
	ReqInfo        struct {
		Name  string
		CSPId string // or, CSPid ?
	}
}

// TbCustomImageReq is a struct to handle 'Create custom image (VM snapshot)' request toward CB-Tumblebug.
type TbCustomImageReq struct {
	ConnectionName string `json:"connectionName"`
	Name           string `json:"name" validate:"required"`
	SourceVmId     string `json:"sourceVmId"`
	Description    string `json:"description"`

	// This field is for 'Register existing custom image'
	CspCustomImageId string `json:"cspCustomImageId"`
}

type TbCustomImageInfo struct {
	Namespace            string            `json:"namespace,omitempty" example:"ns01"` // required to save in RDB
	Id                   string            `json:"id" example:"aws-ap-southeast-1-snapshot"`
	Name                 string            `json:"name" example:"aws-ap-southeast-1-snapshot"`
	ConnectionName       string            `json:"connectionName" example:"aws-ap-southeast-1"`
	SourceVmId           string            `json:"sourceVmId" example:"aws-ap-southeast-1-1"`
	CspCustomImageId     string            `json:"cspCustomImageId,omitempty" example:"ami-06eb41e14121c550a"`
	CspCustomImageName   string            `json:"cspCustomImageName,omitempty" example:"aws-ap-southeast-1-snapshot"`
	Description          string            `json:"description"`
	CreationDate         time.Time         `json:"creationDate,omitempty" example:"2022-10-18T08:12:48Z"`
	GuestOS              string            `json:"guestOS,omitempty"` // Windows7, Ubuntu etc.
	Status               CustomImageStatus `json:"status" example:"Available"`
	KeyValueList         []common.KeyValue `json:"keyValueList,omitempty"`
	AssociatedObjectList []string          `json:"associatedObjectList,omitempty" example:["/ns/ns01/mcis/mcis01/vm/aws-ap-southeast-1-1"]`
	IsAutoGenerated      bool              `json:"isAutoGenerated,omitempty"`

	// SystemLabel is for describing the MCIR in a keyword (any string can be used) for special System purpose
	SystemLabel string `json:"systemLabel,omitempty" example:"Managed by CB-Tumblebug" default:""`
}

// TbImageReqStructLevelValidation func is for Validation
func TbCustomImageReqStructLevelValidation(sl validator.StructLevel) {

	u := sl.Current().Interface().(TbCustomImageReq)

	err := common.CheckString(u.Name)
	if err != nil {
		// ReportError(field interface{}, fieldName, structFieldName, tag, param string)
		sl.ReportError(u.Name, "name", "Name", err.Error(), "")
	}
}

// RegisterCustomImageWithInfo accepts customimage registration request, creates and returns an TB customimage object
func RegisterCustomImageWithInfo(nsId string, content TbCustomImageInfo) (TbCustomImageInfo, error) {

	resourceType := common.StrCustomImage

	err := common.CheckString(nsId)
	if err != nil {
		log.Error().Err(err).Msg("")
		return TbCustomImageInfo{}, err
	}
	err = common.CheckString(content.Name)
	if err != nil {
		log.Error().Err(err).Msg("")
		return TbCustomImageInfo{}, err
	}
	check, err := CheckResource(nsId, resourceType, content.Name)

	if check {
		err := fmt.Errorf("The customImage " + content.Name + " already exists.")
		return TbCustomImageInfo{}, err
	}

	if err != nil {
		err := fmt.Errorf("Failed to check the existence of the customImage " + content.Name + ".")
		return TbCustomImageInfo{}, err
	}

	content.Namespace = nsId
	content.Id = content.Name
	content.AssociatedObjectList = []string{}

	fmt.Println("=========================== POST registerCustomImage")
	Key := common.GenResourceKey(nsId, resourceType, content.Id)
	Val, _ := json.Marshal(content)
	err = common.CBStore.Put(Key, string(Val))
	if err != nil {
		log.Error().Err(err).Msg("")
		return TbCustomImageInfo{}, err
	}
	keyValue, err := common.CBStore.Get(Key)
	if err != nil {
		fmt.Println("In RegisterCustomImageWithInfo(); CBStore.Get() returned error.")
	}
	fmt.Println("<" + keyValue.Key + "> \n" + keyValue.Value)
	fmt.Println("===========================")

	// "INSERT INTO `image`(`namespace`, `id`, ...) VALUES ('nsId', 'content.Id', ...);
	_, err = common.ORM.Insert(content)
	if err != nil {
		fmt.Println(err.Error())
	} else {
		fmt.Println("Data inserted successfully..")
	}

	return content, nil
}

// LookupMyImage accepts Spider conn config and CSP myImage ID, lookups and returns the Spider image object
func LookupMyImage(connConfig string, myImageId string) (SpiderMyImageInfo, error) {

	if connConfig == "" {
		err := fmt.Errorf("LookupMyImage() called with empty connConfig.")
		log.Error().Err(err).Msg("")
		return SpiderMyImageInfo{}, err
	} else if myImageId == "" {
		err := fmt.Errorf("LookupMyImage() called with empty myImageId.")
		log.Error().Err(err).Msg("")
		return SpiderMyImageInfo{}, err
	}

	var callResult SpiderMyImageInfo
	client := resty.New()
	client.SetTimeout(2 * time.Minute)
	url := common.SpiderRestUrl + "/myimage/" + url.QueryEscape(myImageId)
	method := "GET"
	requestBody := common.SpiderConnectionName{}
	requestBody.ConnectionName = connConfig

	err := common.ExecuteHttpRequest(
		client,
		method,
		url,
		nil,
		common.SetUseBody(requestBody),
		&requestBody,
		&callResult,
		common.MediumDuration,
	)

	if err != nil {
		log.Error().Err(err).Msg("")
		content := SpiderMyImageInfo{}
		return content, err
	}

	temp := callResult
	return temp, nil
}

// ConvertSpiderMyImageToTumblebugCustomImage accepts an Spider MyImage object, converts to and returns an TB customImage object
func ConvertSpiderMyImageToTumblebugCustomImage(spiderMyImage SpiderMyImageInfo) (TbCustomImageInfo, error) {
	if spiderMyImage.IId.NameId == "" {
		err := fmt.Errorf("ConvertSpiderMyImageToTumblebugCustomImage failed; spiderMyImage.IId.NameId == \"\" ")
		return TbCustomImageInfo{}, err
	}

	tumblebugCustomImage := TbCustomImageInfo{
		CspCustomImageId:     spiderMyImage.IId.SystemId,
		CspCustomImageName:   spiderMyImage.IId.NameId, // common.LookupKeyValueList(spiderMyImage.KeyValueList, "Name"),
		Description:          common.LookupKeyValueList(spiderMyImage.KeyValueList, "Description"),
		CreationDate:         spiderMyImage.CreatedTime,
		GuestOS:              "",
		Status:               spiderMyImage.Status,
		KeyValueList:         spiderMyImage.KeyValueList,
		AssociatedObjectList: []string{},
	}
	//tumblebugCustomImage.Id = spiderMyImage.IId.NameId

	spiderKeyValueListName := common.LookupKeyValueList(spiderMyImage.KeyValueList, "Name")
	if len(spiderKeyValueListName) > 0 {
		tumblebugCustomImage.Name = spiderKeyValueListName
	} else {
		tumblebugCustomImage.Name = spiderMyImage.IId.NameId
	}

	return tumblebugCustomImage, nil
}

// RegisterCustomImageWithId accepts customimage creation request, creates and returns an TB customimage object
func RegisterCustomImageWithId(nsId string, u *TbCustomImageReq) (TbCustomImageInfo, error) {

	resourceType := common.StrCustomImage

	err := common.CheckString(nsId)
	if err != nil {
		log.Error().Err(err).Msg("")
		return TbCustomImageInfo{}, err
	}

	err = validate.Struct(u)
	if err != nil {

		if _, ok := err.(*validator.InvalidValidationError); ok {
			fmt.Println(err)
			return TbCustomImageInfo{}, err
		}

		return TbCustomImageInfo{}, err
	}

	check, err := CheckResource(nsId, resourceType, u.Name)

	if check {
		err := fmt.Errorf("The customimage " + u.Name + " already exists.")
		return TbCustomImageInfo{}, err
	}

	if err != nil {
		err := fmt.Errorf("Failed to check the existence of the customimage " + u.Name + ".")
		return TbCustomImageInfo{}, err
	}

	client := resty.New()
	client.SetTimeout(2 * time.Minute)
	url := ""
	method := ""
	if u.CspCustomImageId == "" {
		url = fmt.Sprintf("%s/myimage/%s", common.SpiderRestUrl, u.Name)
		method = "GET"
	} else if u.CspCustomImageId != "" {
		url = fmt.Sprintf("%s/regmyimage", common.SpiderRestUrl)
		method = "POST"
	}
	requestBody := SpiderMyImageRegisterReq{
		ConnectionName: u.ConnectionName,
		ReqInfo: struct {
			Name  string
			CSPId string
		}{
			Name:  u.Name,
			CSPId: u.CspCustomImageId,
		},
	}
	callResult := SpiderMyImageInfo{}

	err = common.ExecuteHttpRequest(
		client,
		method,
		url,
		nil,
		common.SetUseBody(requestBody),
		&requestBody,
		&callResult,
		common.MediumDuration,
	)

	if err != nil {
		log.Error().Err(err).Msg("")
		return TbCustomImageInfo{}, err
	}

	content := TbCustomImageInfo{
		Namespace:            nsId,
		Id:                   u.Name,
		Name:                 u.Name,
		ConnectionName:       u.ConnectionName,
		SourceVmId:           "",
		CspCustomImageId:     callResult.IId.SystemId,
		CspCustomImageName:   callResult.IId.NameId,
		Description:          u.Description,
		CreationDate:         callResult.CreatedTime,
		GuestOS:              "",
		Status:               callResult.Status,
		KeyValueList:         callResult.KeyValueList,
		AssociatedObjectList: []string{},
		IsAutoGenerated:      false,
	}

	if u.CspCustomImageId == "" {
		content.SystemLabel = "Registered from CB-Spider resource"
	} else if u.CspCustomImageId != "" {
		content.SystemLabel = "Registered from CSP resource"
	}

	Key := common.GenResourceKey(nsId, resourceType, content.Id)
	Val, _ := json.Marshal(content)
	err = common.CBStore.Put(Key, string(Val))
	if err != nil {
		log.Error().Err(err).Msg("")
		return content, err
	}
	return content, nil
}
